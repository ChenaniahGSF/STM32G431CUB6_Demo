
STM32G431CUB6_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007644  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800781c  0800781c  0000881c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e0  080079e0  00009140  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079e0  080079e0  000089e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079e8  080079e8  00009140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e8  080079e8  000089e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079ec  080079ec  000089ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  20000000  080079f0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000140  08007b30  00009140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  08007b30  000099f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb47  00000000  00000000  00009170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000474b  00000000  00000000  00027cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001416  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021db8  00000000  00000000  0002f22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021355  00000000  00000000  00050fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d082e  00000000  00000000  0007233b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142b69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b40  00000000  00000000  00142bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001496ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000140 	.word	0x20000140
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007804 	.word	0x08007804

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000144 	.word	0x20000144
 8000214:	08007804 	.word	0x08007804

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b988 	b.w	8000550 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	468e      	mov	lr, r1
 8000260:	4604      	mov	r4, r0
 8000262:	4688      	mov	r8, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4617      	mov	r7, r2
 800026c:	d962      	bls.n	8000334 <__udivmoddi4+0xdc>
 800026e:	fab2 f682 	clz	r6, r2
 8000272:	b14e      	cbz	r6, 8000288 <__udivmoddi4+0x30>
 8000274:	f1c6 0320 	rsb	r3, r6, #32
 8000278:	fa01 f806 	lsl.w	r8, r1, r6
 800027c:	fa20 f303 	lsr.w	r3, r0, r3
 8000280:	40b7      	lsls	r7, r6
 8000282:	ea43 0808 	orr.w	r8, r3, r8
 8000286:	40b4      	lsls	r4, r6
 8000288:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800028c:	fa1f fc87 	uxth.w	ip, r7
 8000290:	fbb8 f1fe 	udiv	r1, r8, lr
 8000294:	0c23      	lsrs	r3, r4, #16
 8000296:	fb0e 8811 	mls	r8, lr, r1, r8
 800029a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029e:	fb01 f20c 	mul.w	r2, r1, ip
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002ac:	f080 80ea 	bcs.w	8000484 <__udivmoddi4+0x22c>
 80002b0:	429a      	cmp	r2, r3
 80002b2:	f240 80e7 	bls.w	8000484 <__udivmoddi4+0x22c>
 80002b6:	3902      	subs	r1, #2
 80002b8:	443b      	add	r3, r7
 80002ba:	1a9a      	subs	r2, r3, r2
 80002bc:	b2a3      	uxth	r3, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ce:	459c      	cmp	ip, r3
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x8e>
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 80d6 	bcs.w	8000488 <__udivmoddi4+0x230>
 80002dc:	459c      	cmp	ip, r3
 80002de:	f240 80d3 	bls.w	8000488 <__udivmoddi4+0x230>
 80002e2:	443b      	add	r3, r7
 80002e4:	3802      	subs	r0, #2
 80002e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ea:	eba3 030c 	sub.w	r3, r3, ip
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40f3      	lsrs	r3, r6
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xb6>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb0>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa2>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x14c>
 8000316:	4573      	cmp	r3, lr
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xc8>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 8105 	bhi.w	800052a <__udivmoddi4+0x2d2>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb6e 0203 	sbc.w	r2, lr, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4690      	mov	r8, r2
 800032a:	2d00      	cmp	r5, #0
 800032c:	d0e5      	beq.n	80002fa <__udivmoddi4+0xa2>
 800032e:	e9c5 4800 	strd	r4, r8, [r5]
 8000332:	e7e2      	b.n	80002fa <__udivmoddi4+0xa2>
 8000334:	2a00      	cmp	r2, #0
 8000336:	f000 8090 	beq.w	800045a <__udivmoddi4+0x202>
 800033a:	fab2 f682 	clz	r6, r2
 800033e:	2e00      	cmp	r6, #0
 8000340:	f040 80a4 	bne.w	800048c <__udivmoddi4+0x234>
 8000344:	1a8a      	subs	r2, r1, r2
 8000346:	0c03      	lsrs	r3, r0, #16
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	b280      	uxth	r0, r0
 800034e:	b2bc      	uxth	r4, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 fcfe 	udiv	ip, r2, lr
 8000356:	fb0e 221c 	mls	r2, lr, ip, r2
 800035a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035e:	fb04 f20c 	mul.w	r2, r4, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x11e>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f10c 38ff 	add.w	r8, ip, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x11c>
 800036e:	429a      	cmp	r2, r3
 8000370:	f200 80e0 	bhi.w	8000534 <__udivmoddi4+0x2dc>
 8000374:	46c4      	mov	ip, r8
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	fbb3 f2fe 	udiv	r2, r3, lr
 800037c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000380:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000384:	fb02 f404 	mul.w	r4, r2, r4
 8000388:	429c      	cmp	r4, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x144>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x142>
 8000394:	429c      	cmp	r4, r3
 8000396:	f200 80ca 	bhi.w	800052e <__udivmoddi4+0x2d6>
 800039a:	4602      	mov	r2, r0
 800039c:	1b1b      	subs	r3, r3, r4
 800039e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x98>
 80003a4:	f1c1 0620 	rsb	r6, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 f706 	lsr.w	r7, r2, r6
 80003ae:	431f      	orrs	r7, r3
 80003b0:	fa0e f401 	lsl.w	r4, lr, r1
 80003b4:	fa20 f306 	lsr.w	r3, r0, r6
 80003b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	fa1f fc87 	uxth.w	ip, r7
 80003ca:	fbbe f0f9 	udiv	r0, lr, r9
 80003ce:	0c1c      	lsrs	r4, r3, #16
 80003d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003dc:	45a6      	cmp	lr, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d909      	bls.n	80003f8 <__udivmoddi4+0x1a0>
 80003e4:	193c      	adds	r4, r7, r4
 80003e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ea:	f080 809c 	bcs.w	8000526 <__udivmoddi4+0x2ce>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f240 8099 	bls.w	8000526 <__udivmoddi4+0x2ce>
 80003f4:	3802      	subs	r0, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	eba4 040e 	sub.w	r4, r4, lr
 80003fc:	fa1f fe83 	uxth.w	lr, r3
 8000400:	fbb4 f3f9 	udiv	r3, r4, r9
 8000404:	fb09 4413 	mls	r4, r9, r3, r4
 8000408:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800040c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000410:	45a4      	cmp	ip, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1ce>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f103 3eff 	add.w	lr, r3, #4294967295
 800041a:	f080 8082 	bcs.w	8000522 <__udivmoddi4+0x2ca>
 800041e:	45a4      	cmp	ip, r4
 8000420:	d97f      	bls.n	8000522 <__udivmoddi4+0x2ca>
 8000422:	3b02      	subs	r3, #2
 8000424:	443c      	add	r4, r7
 8000426:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000432:	4564      	cmp	r4, ip
 8000434:	4673      	mov	r3, lr
 8000436:	46e1      	mov	r9, ip
 8000438:	d362      	bcc.n	8000500 <__udivmoddi4+0x2a8>
 800043a:	d05f      	beq.n	80004fc <__udivmoddi4+0x2a4>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x1fe>
 800043e:	ebb8 0203 	subs.w	r2, r8, r3
 8000442:	eb64 0409 	sbc.w	r4, r4, r9
 8000446:	fa04 f606 	lsl.w	r6, r4, r6
 800044a:	fa22 f301 	lsr.w	r3, r2, r1
 800044e:	431e      	orrs	r6, r3
 8000450:	40cc      	lsrs	r4, r1
 8000452:	e9c5 6400 	strd	r6, r4, [r5]
 8000456:	2100      	movs	r1, #0
 8000458:	e74f      	b.n	80002fa <__udivmoddi4+0xa2>
 800045a:	fbb1 fcf2 	udiv	ip, r1, r2
 800045e:	0c01      	lsrs	r1, r0, #16
 8000460:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000464:	b280      	uxth	r0, r0
 8000466:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800046a:	463b      	mov	r3, r7
 800046c:	4638      	mov	r0, r7
 800046e:	463c      	mov	r4, r7
 8000470:	46b8      	mov	r8, r7
 8000472:	46be      	mov	lr, r7
 8000474:	2620      	movs	r6, #32
 8000476:	fbb1 f1f7 	udiv	r1, r1, r7
 800047a:	eba2 0208 	sub.w	r2, r2, r8
 800047e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000482:	e766      	b.n	8000352 <__udivmoddi4+0xfa>
 8000484:	4601      	mov	r1, r0
 8000486:	e718      	b.n	80002ba <__udivmoddi4+0x62>
 8000488:	4610      	mov	r0, r2
 800048a:	e72c      	b.n	80002e6 <__udivmoddi4+0x8e>
 800048c:	f1c6 0220 	rsb	r2, r6, #32
 8000490:	fa2e f302 	lsr.w	r3, lr, r2
 8000494:	40b7      	lsls	r7, r6
 8000496:	40b1      	lsls	r1, r6
 8000498:	fa20 f202 	lsr.w	r2, r0, r2
 800049c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a0:	430a      	orrs	r2, r1
 80004a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb08 f904 	mul.w	r9, r8, r4
 80004b6:	40b0      	lsls	r0, r6
 80004b8:	4589      	cmp	r9, r1
 80004ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004be:	b280      	uxth	r0, r0
 80004c0:	d93e      	bls.n	8000540 <__udivmoddi4+0x2e8>
 80004c2:	1879      	adds	r1, r7, r1
 80004c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c8:	d201      	bcs.n	80004ce <__udivmoddi4+0x276>
 80004ca:	4589      	cmp	r9, r1
 80004cc:	d81f      	bhi.n	800050e <__udivmoddi4+0x2b6>
 80004ce:	eba1 0109 	sub.w	r1, r1, r9
 80004d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d6:	fb09 f804 	mul.w	r8, r9, r4
 80004da:	fb0e 1119 	mls	r1, lr, r9, r1
 80004de:	b292      	uxth	r2, r2
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	4542      	cmp	r2, r8
 80004e6:	d229      	bcs.n	800053c <__udivmoddi4+0x2e4>
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ee:	d2c4      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f0:	4542      	cmp	r2, r8
 80004f2:	d2c2      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f4:	f1a9 0102 	sub.w	r1, r9, #2
 80004f8:	443a      	add	r2, r7
 80004fa:	e7be      	b.n	800047a <__udivmoddi4+0x222>
 80004fc:	45f0      	cmp	r8, lr
 80004fe:	d29d      	bcs.n	800043c <__udivmoddi4+0x1e4>
 8000500:	ebbe 0302 	subs.w	r3, lr, r2
 8000504:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000508:	3801      	subs	r0, #1
 800050a:	46e1      	mov	r9, ip
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1e4>
 800050e:	eba7 0909 	sub.w	r9, r7, r9
 8000512:	4449      	add	r1, r9
 8000514:	f1a8 0c02 	sub.w	ip, r8, #2
 8000518:	fbb1 f9fe 	udiv	r9, r1, lr
 800051c:	fb09 f804 	mul.w	r8, r9, r4
 8000520:	e7db      	b.n	80004da <__udivmoddi4+0x282>
 8000522:	4673      	mov	r3, lr
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1ce>
 8000526:	4650      	mov	r0, sl
 8000528:	e766      	b.n	80003f8 <__udivmoddi4+0x1a0>
 800052a:	4608      	mov	r0, r1
 800052c:	e6fd      	b.n	800032a <__udivmoddi4+0xd2>
 800052e:	443b      	add	r3, r7
 8000530:	3a02      	subs	r2, #2
 8000532:	e733      	b.n	800039c <__udivmoddi4+0x144>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	443b      	add	r3, r7
 800053a:	e71c      	b.n	8000376 <__udivmoddi4+0x11e>
 800053c:	4649      	mov	r1, r9
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x222>
 8000540:	eba1 0109 	sub.w	r1, r1, r9
 8000544:	46c4      	mov	ip, r8
 8000546:	fbb1 f9fe 	udiv	r9, r1, lr
 800054a:	fb09 f804 	mul.w	r8, r9, r4
 800054e:	e7c4      	b.n	80004da <__udivmoddi4+0x282>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <MX_DMA_Init+0x50>)
 800055c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800055e:	4a11      	ldr	r2, [pc, #68]	@ (80005a4 <MX_DMA_Init+0x50>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6493      	str	r3, [r2, #72]	@ 0x48
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <MX_DMA_Init+0x50>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_DMA_Init+0x50>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	4a0b      	ldr	r2, [pc, #44]	@ (80005a4 <MX_DMA_Init+0x50>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6493      	str	r3, [r2, #72]	@ 0x48
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_DMA_Init+0x50>)
 8000580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2103      	movs	r1, #3
 800058e:	200b      	movs	r0, #11
 8000590:	f000 fe56 	bl	8001240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000594:	200b      	movs	r0, #11
 8000596:	f000 fe6d 	bl	8001274 <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b34      	ldr	r3, [pc, #208]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a33      	ldr	r2, [pc, #204]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a2d      	ldr	r2, [pc, #180]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005dc:	f043 0320 	orr.w	r3, r3, #32
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <MX_GPIO_Init+0xe8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <MX_GPIO_Init+0xe8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <MX_GPIO_Init+0xe8>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xe8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2110      	movs	r1, #16
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f001 fae7 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2140      	movs	r1, #64	@ 0x40
 800062e:	4819      	ldr	r0, [pc, #100]	@ (8000694 <MX_GPIO_Init+0xec>)
 8000630:	f001 fae2 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4812      	ldr	r0, [pc, #72]	@ (8000694 <MX_GPIO_Init+0xec>)
 800064a:	f001 f953 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800064e:	2310      	movs	r3, #16
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f001 f944 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800066c:	2340      	movs	r3, #64	@ 0x40
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0xec>)
 8000684:	f001 f936 	bl	80018f4 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	48000800 	.word	0x48000800

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_I2C1_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <MX_I2C1_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_I2C1_Init+0x74>)
 80006a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <MX_I2C1_Init+0x7c>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_I2C1_Init+0x74>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d2:	480e      	ldr	r0, [pc, #56]	@ (800070c <MX_I2C1_Init+0x74>)
 80006d4:	f001 fac2 	bl	8001c5c <HAL_I2C_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006de:	f000 f9e1 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4809      	ldr	r0, [pc, #36]	@ (800070c <MX_I2C1_Init+0x74>)
 80006e6:	f001 fb54 	bl	8001d92 <HAL_I2CEx_ConfigAnalogFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f0:	f000 f9d8 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_I2C1_Init+0x74>)
 80006f8:	f001 fb96 	bl	8001e28 <HAL_I2CEx_ConfigDigitalFilter>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000702:	f000 f9cf 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000015c 	.word	0x2000015c
 8000710:	40005400 	.word	0x40005400
 8000714:	40621236 	.word	0x40621236

08000718 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	@ 0x70
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	f107 0318 	add.w	r3, r7, #24
 8000734:	2244      	movs	r2, #68	@ 0x44
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f007 f817 	bl	800776c <memset>
  if(i2cHandle->Instance==I2C1)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a2d      	ldr	r2, [pc, #180]	@ (80007f8 <HAL_I2C_MspInit+0xe0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d153      	bne.n	80007f0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000748:	2340      	movs	r3, #64	@ 0x40
 800074a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f9c7 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000760:	f000 f9a0 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 8000766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000768:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 8000772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 800077e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000780:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 8000782:	f043 0302 	orr.w	r3, r3, #2
 8000786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 800078a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078c:	f003 0302 	and.w	r3, r3, #2
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000798:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079a:	2312      	movs	r3, #18
 800079c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a6:	2304      	movs	r3, #4
 80007a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f001 f89e 	bl	80018f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007b8:	2380      	movs	r3, #128	@ 0x80
 80007ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007bc:	2312      	movs	r3, #18
 80007be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c8:	2304      	movs	r3, #4
 80007ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007d0:	4619      	mov	r1, r3
 80007d2:	480b      	ldr	r0, [pc, #44]	@ (8000800 <HAL_I2C_MspInit+0xe8>)
 80007d4:	f001 f88e 	bl	80018f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 80007da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 80007de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <HAL_I2C_MspInit+0xe4>)
 80007e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007f0:	bf00      	nop
 80007f2:	3770      	adds	r7, #112	@ 0x70
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40005400 	.word	0x40005400
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000400 	.word	0x48000400

08000804 <lwprintf_self_func>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int lwprintf_self_func(int ch, lwprintf_t* p) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
    uint8_t c = (uint8_t)ch;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	73fb      	strb	r3, [r7, #15]

    /* Don't print zero */
    if (c == '\0') {
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10c      	bne.n	8000832 <lwprintf_self_func+0x2e>
        HAL_UART_Transmit(&huart1, uart_buffer.buffer, uart_buffer.size, 100);
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <lwprintf_self_func+0x7c>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081c:	b29a      	uxth	r2, r3
 800081e:	2364      	movs	r3, #100	@ 0x64
 8000820:	4917      	ldr	r1, [pc, #92]	@ (8000880 <lwprintf_self_func+0x7c>)
 8000822:	4818      	ldr	r0, [pc, #96]	@ (8000884 <lwprintf_self_func+0x80>)
 8000824:	f002 ff70 	bl	8003708 <HAL_UART_Transmit>
        uart_buffer.size = 0;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <lwprintf_self_func+0x7c>)
 800082a:	2200      	movs	r2, #0
 800082c:	641a      	str	r2, [r3, #64]	@ 0x40
        return ch;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	e022      	b.n	8000878 <lwprintf_self_func+0x74>
    }
    if(uart_buffer.size >= (OUTPUT_BUFFER_SIZE - 1)) {
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <lwprintf_self_func+0x7c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	2b3e      	cmp	r3, #62	@ 0x3e
 8000838:	dd14      	ble.n	8000864 <lwprintf_self_func+0x60>
        uart_buffer.buffer[uart_buffer.size++] = ch;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <lwprintf_self_func+0x7c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	490f      	ldr	r1, [pc, #60]	@ (8000880 <lwprintf_self_func+0x7c>)
 8000842:	640a      	str	r2, [r1, #64]	@ 0x40
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	b2d1      	uxtb	r1, r2
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <lwprintf_self_func+0x7c>)
 800084a:	54d1      	strb	r1, [r2, r3]
        HAL_UART_Transmit(&huart1, uart_buffer.buffer, uart_buffer.size, 100);
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <lwprintf_self_func+0x7c>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	b29a      	uxth	r2, r3
 8000852:	2364      	movs	r3, #100	@ 0x64
 8000854:	490a      	ldr	r1, [pc, #40]	@ (8000880 <lwprintf_self_func+0x7c>)
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <lwprintf_self_func+0x80>)
 8000858:	f002 ff56 	bl	8003708 <HAL_UART_Transmit>
        uart_buffer.size = 0;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <lwprintf_self_func+0x7c>)
 800085e:	2200      	movs	r2, #0
 8000860:	641a      	str	r2, [r3, #64]	@ 0x40
 8000862:	e008      	b.n	8000876 <lwprintf_self_func+0x72>
    } else {
      uart_buffer.buffer[uart_buffer.size++] = ch;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <lwprintf_self_func+0x7c>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	4905      	ldr	r1, [pc, #20]	@ (8000880 <lwprintf_self_func+0x7c>)
 800086c:	640a      	str	r2, [r1, #64]	@ 0x40
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	b2d1      	uxtb	r1, r2
 8000872:	4a03      	ldr	r2, [pc, #12]	@ (8000880 <lwprintf_self_func+0x7c>)
 8000874:	54d1      	strb	r1, [r2, r3]
    }
    
    return ch;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001b0 	.word	0x200001b0
 8000884:	20000384 	.word	0x20000384

08000888 <usart_rx_check>:

void usart_rx_check(size_t pos) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    static size_t old_pos;

    /* Calculate current position in buffer and check for new data available */
    if (pos != old_pos) {                       /* Check change in received data */
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <usart_rx_check+0x6c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	d028      	beq.n	80008ec <usart_rx_check+0x64>
        if (pos > old_pos) {                    /* Current position is over previous one */
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <usart_rx_check+0x6c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d90c      	bls.n	80008be <usart_rx_check+0x36>
             * [   5   ]            |------------------------------------|
             * [   6   ] <- pos
             * [   7   ]
             * [ N - 1 ]
             */
            lwrb_write(&usart_tx_rb, &usart_rx_dma_buffer[old_pos], pos - old_pos);
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <usart_rx_check+0x6c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a13      	ldr	r2, [pc, #76]	@ (80008f8 <usart_rx_check+0x70>)
 80008aa:	1899      	adds	r1, r3, r2
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <usart_rx_check+0x6c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	4811      	ldr	r0, [pc, #68]	@ (80008fc <usart_rx_check+0x74>)
 80008b8:	f006 fa21 	bl	8006cfe <lwrb_write>
 80008bc:	e013      	b.n	80008e6 <usart_rx_check+0x5e>
             * [   5   ]            |                                 |
             * [   6   ]            | First block (len = N - old_pos) |
             * [   7   ]            |                                 |
             * [ N - 1 ]            |---------------------------------|
             */
            lwrb_write(&usart_tx_rb, &usart_rx_dma_buffer[old_pos], ARRAY_LEN(usart_rx_dma_buffer) - old_pos);
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <usart_rx_check+0x6c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <usart_rx_check+0x70>)
 80008c4:	1899      	adds	r1, r3, r2
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <usart_rx_check+0x6c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80008ce:	461a      	mov	r2, r3
 80008d0:	480a      	ldr	r0, [pc, #40]	@ (80008fc <usart_rx_check+0x74>)
 80008d2:	f006 fa14 	bl	8006cfe <lwrb_write>
            if (pos > 0) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d004      	beq.n	80008e6 <usart_rx_check+0x5e>
                lwrb_write(&usart_tx_rb, &usart_rx_dma_buffer[0], pos);
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4906      	ldr	r1, [pc, #24]	@ (80008f8 <usart_rx_check+0x70>)
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <usart_rx_check+0x74>)
 80008e2:	f006 fa0c 	bl	8006cfe <lwrb_write>
            }
        }
        old_pos = pos;                          /* Save current position as old for next transfers */
 80008e6:	4a03      	ldr	r2, [pc, #12]	@ (80008f4 <usart_rx_check+0x6c>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6013      	str	r3, [r2, #0]
    }
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200002d0 	.word	0x200002d0
 80008f8:	20000290 	.word	0x20000290
 80008fc:	200001f4 	.word	0x200001f4

08000900 <HAL_UARTEx_RxEventCallback>:
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
}
#endif

//uart HT TC IDLE event will trigger this callback, dma mode enable
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
  if(huart == &huart1) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_UARTEx_RxEventCallback+0x6c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d127      	bne.n	8000964 <HAL_UARTEx_RxEventCallback+0x64>
    usart_rx_check(Size);
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffb6 	bl	8000888 <usart_rx_check>

    if (usart_tx_dma_current_len == 0 && (usart_tx_dma_current_len = lwrb_get_linear_block_read_length(&usart_tx_rb)) > 0) {
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x70>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d11a      	bne.n	800095a <HAL_UARTEx_RxEventCallback+0x5a>
 8000924:	4813      	ldr	r0, [pc, #76]	@ (8000974 <HAL_UARTEx_RxEventCallback+0x74>)
 8000926:	f006 fb3f 	bl	8006fa8 <lwrb_get_linear_block_read_length>
 800092a:	4603      	mov	r3, r0
 800092c:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x70>)
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d012      	beq.n	800095a <HAL_UARTEx_RxEventCallback+0x5a>
      lwshell_input(lwrb_get_linear_block_read_address(&usart_tx_rb), usart_tx_dma_current_len);
 8000934:	480f      	ldr	r0, [pc, #60]	@ (8000974 <HAL_UARTEx_RxEventCallback+0x74>)
 8000936:	f006 fb12 	bl	8006f5e <lwrb_get_linear_block_read_address>
 800093a:	4601      	mov	r1, r0
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x70>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	2000      	movs	r0, #0
 8000944:	f006 fe04 	bl	8007550 <lwshell_input_ex>

      lwrb_skip(&usart_tx_rb, usart_tx_dma_current_len);
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x70>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	4809      	ldr	r0, [pc, #36]	@ (8000974 <HAL_UARTEx_RxEventCallback+0x74>)
 8000950:	f006 fb6d 	bl	800702e <lwrb_skip>
      usart_tx_dma_current_len = 0;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x70>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart_rx_dma_buffer, sizeof(usart_rx_dma_buffer));
 800095a:	2240      	movs	r2, #64	@ 0x40
 800095c:	4906      	ldr	r1, [pc, #24]	@ (8000978 <HAL_UARTEx_RxEventCallback+0x78>)
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <HAL_UARTEx_RxEventCallback+0x6c>)
 8000960:	f004 faa2 	bl	8004ea8 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000384 	.word	0x20000384
 8000970:	2000028c 	.word	0x2000028c
 8000974:	200001f4 	.word	0x200001f4
 8000978:	20000290 	.word	0x20000290

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fb6f 	bl	8001062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f830 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f7ff fe0e 	bl	80005a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800098c:	f7ff fde2 	bl	8000554 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000990:	f000 fa44 	bl	8000e1c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000994:	f7ff fe80 	bl	8000698 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000998:	f000 f8d8 	bl	8000b4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lwprintf_init(lwprintf_self_func);
 800099c:	490c      	ldr	r1, [pc, #48]	@ (80009d0 <main+0x54>)
 800099e:	2000      	movs	r0, #0
 80009a0:	f006 f91e 	bl	8006be0 <lwprintf_init_ex>
  lwrb_init(&usart_tx_rb, usart_tx_rb_data, sizeof(usart_tx_rb_data));
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	490b      	ldr	r1, [pc, #44]	@ (80009d4 <main+0x58>)
 80009a8:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <main+0x5c>)
 80009aa:	f006 f977 	bl	8006c9c <lwrb_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_UART_Receive_IT(&huart1, uart_rx_buf, sizeof(uart_rx_buf));
  //HAL_UART_Receive_DMA(&huart1, usart_rx_dma_buffer, sizeof(usart_rx_dma_buffer));
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart_rx_dma_buffer, sizeof(usart_rx_dma_buffer));
 80009ae:	2240      	movs	r2, #64	@ 0x40
 80009b0:	490a      	ldr	r1, [pc, #40]	@ (80009dc <main+0x60>)
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <main+0x64>)
 80009b4:	f004 fa78 	bl	8004ea8 <HAL_UARTEx_ReceiveToIdle_DMA>

	lwprintf("System Start!!\r\n");
 80009b8:	490a      	ldr	r1, [pc, #40]	@ (80009e4 <main+0x68>)
 80009ba:	2000      	movs	r0, #0
 80009bc:	f006 f958 	bl	8006c70 <lwprintf_printf_ex>
	
	//button_init_process();
	//HAL_TIM_Base_Start_IT(&htim7);

	lwshell_user_init();
 80009c0:	f006 feba 	bl	8007738 <lwshell_user_init>
	} else {
		lwprintf("SPIF_Init failed..\r\n");
	}
#endif
	
	OS_StartOS(APP_MODE_DEFAULT);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f004 fb11 	bl	8004fec <OS_StartOS>

  while (1)
 80009ca:	bf00      	nop
 80009cc:	e7fd      	b.n	80009ca <main+0x4e>
 80009ce:	bf00      	nop
 80009d0:	08000805 	.word	0x08000805
 80009d4:	2000020c 	.word	0x2000020c
 80009d8:	200001f4 	.word	0x200001f4
 80009dc:	20000290 	.word	0x20000290
 80009e0:	20000384 	.word	0x20000384
 80009e4:	080078c4 	.word	0x080078c4

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	@ 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	2238      	movs	r2, #56	@ 0x38
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f006 feb8 	bl	800776c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f001 fa58 	bl	8001ec0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1a:	2340      	movs	r3, #64	@ 0x40
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a26:	2304      	movs	r3, #4
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a2a:	2355      	movs	r3, #85	@ 0x55
 8000a2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 faf2 	bl	8002028 <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a4a:	f000 f82b 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2303      	movs	r3, #3
 8000a54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2104      	movs	r1, #4
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fdf0 	bl	800264c <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a72:	f000 f817 	bl	8000aa4 <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	@ 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a92:	f000 faff 	bl	8001094 <HAL_IncTick>
  //if(htim == &htim7) {
  //  button_ticks();
  //}

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40014800 	.word	0x40014800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <TaskT1Func>:
#include"TCB.h"
#include"OsAPIs.h"
#include "main.h"

TASK(T1)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  const OsEventMaskType OsWaitEventMask = (OsEventMaskType) EVT_BLINK_BLUE_LED;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]

  (void)OS_SetRelAlarm(ALARM_BLUE_LED, 0, 997);
 8000aba:	f240 32e5 	movw	r2, #997	@ 0x3e5
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f004 fe93 	bl	80057ec <OS_SetRelAlarm>

  for(;;)
  {
    OsEventMaskType Events = (OsEventMaskType) 0U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]

    if(E_OK == OS_WaitEvent(OsWaitEventMask))
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f005 f82e 	bl	8005b2c <OS_WaitEvent>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d111      	bne.n	8000afa <TaskT1Func+0x4a>
    {
      (void) OS_GetEvent((OsTaskType)T1, &Events);
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2001      	movs	r0, #1
 8000adc:	f004 fff2 	bl	8005ac4 <OS_GetEvent>

      if((Events & EVT_BLINK_BLUE_LED) == EVT_BLINK_BLUE_LED)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0ed      	beq.n	8000ac6 <TaskT1Func+0x16>
      {
        OS_ClearEvent(EVT_BLINK_BLUE_LED);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f004 ffbe 	bl	8005a6c <OS_ClearEvent>
        // task here
        HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <TaskT1Func+0x50>)
 8000af4:	f001 f898 	bl	8001c28 <HAL_GPIO_TogglePin>
 8000af8:	e7e5      	b.n	8000ac6 <TaskT1Func+0x16>
      }
    }
    else
    {
      OS_TerminateTask(); /* In case of error we switch off the task */
 8000afa:	f005 f8c5 	bl	8005c88 <OS_TerminateTask>
  {
 8000afe:	e7e2      	b.n	8000ac6 <TaskT1Func+0x16>
 8000b00:	48000800 	.word	0x48000800

08000b04 <TaskIdleFunc>:
    }
  }
}

TASK(Idle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  const OsEventMaskType OsWaitEventMask = (OsEventMaskType) EVT_BLINK_GREEN_LED;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]

  (void)OS_SetRelAlarm(ALARM_GREEN_LED,0, 503);
 8000b0e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8000b12:	2100      	movs	r1, #0
 8000b14:	2001      	movs	r0, #1
 8000b16:	f004 fe69 	bl	80057ec <OS_SetRelAlarm>

  for(;;)
  {
    OsEventMaskType Events = (OsEventMaskType) 0U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]

    if(E_OK == OS_WaitEvent(OsWaitEventMask))
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f005 f804 	bl	8005b2c <OS_WaitEvent>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10d      	bne.n	8000b46 <TaskIdleFunc+0x42>
    {
      (void) OS_GetEvent((OsTaskType)Idle, &Events);
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f004 ffc8 	bl	8005ac4 <OS_GetEvent>

      if((Events & EVT_BLINK_GREEN_LED) == EVT_BLINK_GREEN_LED)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0ed      	beq.n	8000b1a <TaskIdleFunc+0x16>
      {
        OS_ClearEvent(EVT_BLINK_GREEN_LED);
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f004 ff94 	bl	8005a6c <OS_ClearEvent>
 8000b44:	e7e9      	b.n	8000b1a <TaskIdleFunc+0x16>
        // task here
      }
    }
    else
    {
      OS_TerminateTask(); /* In case of error we switch off the task */
 8000b46:	f005 f89f 	bl	8005c88 <OS_TerminateTask>
  {
 8000b4a:	e7e6      	b.n	8000b1a <TaskIdleFunc+0x16>

08000b4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <MX_SPI1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b66:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b82:	2210      	movs	r2, #16
 8000b84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b9a:	2207      	movs	r2, #7
 8000b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000bac:	f002 f98c 	bl	8002ec8 <HAL_SPI_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f7ff ff75 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200002d4 	.word	0x200002d4
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <HAL_SPI_MspInit+0x7c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d128      	bne.n	8000c3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bee:	4a16      	ldr	r2, [pc, #88]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c1a:	23e0      	movs	r3, #224	@ 0xe0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c38:	f000 fe5c 	bl	80018f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	@ 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_MspInit+0x50>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c56:	4a11      	ldr	r2, [pc, #68]	@ (8000c9c <HAL_MspInit+0x50>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_MspInit+0x50>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_MspInit+0x50>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <HAL_MspInit+0x50>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_MspInit+0x50>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	210f      	movs	r1, #15
 8000c86:	f06f 0001 	mvn.w	r0, #1
 8000c8a:	f000 fad9 	bl	8001240 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c8e:	f001 f9bb 	bl	8002008 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	@ 0x30
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <HAL_InitTick+0xc4>)
 8000cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d64 <HAL_InitTick+0xc4>)
 8000cb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cba:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cbc:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <HAL_InitTick+0xc4>)
 8000cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc8:	f107 020c 	add.w	r2, r7, #12
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fe90 	bl	80029f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cd8:	f001 fe78 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 8000cdc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <HAL_InitTick+0xc8>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000cee:	4a20      	ldr	r2, [pc, #128]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000cf0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000cf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000d0c:	4817      	ldr	r0, [pc, #92]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000d0e:	f002 f986 	bl	800301e <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d11b      	bne.n	8000d58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000d20:	4812      	ldr	r0, [pc, #72]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000d22:	f002 f9dd 	bl	80030e0 <HAL_TIM_Base_Start_IT>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d111      	bne.n	8000d58 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d34:	201a      	movs	r0, #26
 8000d36:	f000 fa9d 	bl	8001274 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d808      	bhi.n	8000d52 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	201a      	movs	r0, #26
 8000d46:	f000 fa7b 	bl	8001240 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_InitTick+0xd4>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e002      	b.n	8000d58 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3730      	adds	r7, #48	@ 0x30
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	431bde83 	.word	0x431bde83
 8000d6c:	20000338 	.word	0x20000338
 8000d70:	40014800 	.word	0x40014800
 8000d74:	20000004 	.word	0x20000004

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <NMI_Handler+0x4>

08000d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <MemManage_Handler+0x4>

08000d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <UsageFault_Handler+0x4>

08000da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <DMA1_Channel1_IRQHandler+0x10>)
 8000dc2:	f000 fc48 	bl	8001656 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000418 	.word	0x20000418

08000dd0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000dd4:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000dd6:	f002 f9ed 	bl	80031b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000338 	.word	0x20000338

08000de4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <USART1_IRQHandler+0x10>)
 8000dea:	f002 fd1b 	bl	8003824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000384 	.word	0x20000384

08000df8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e22:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <MX_USART1_UART_Init+0x94>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e64:	4811      	ldr	r0, [pc, #68]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e66:	f002 fbff 	bl	8003668 <HAL_UART_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e70:	f7ff fe18 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e78:	f003 ff9a 	bl	8004db0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e82:	f7ff fe0f 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e8a:	f003 ffcf 	bl	8004e2c <HAL_UARTEx_SetRxFifoThreshold>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e94:	f7ff fe06 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e9a:	f003 ff50 	bl	8004d3e <HAL_UARTEx_DisableFifoMode>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f7ff fdfe 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000384 	.word	0x20000384
 8000eb0:	40013800 	.word	0x40013800

08000eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b09c      	sub	sp, #112	@ 0x70
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	2244      	movs	r2, #68	@ 0x44
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fc49 	bl	800776c <memset>
  if(uartHandle->Instance==USART1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a47      	ldr	r2, [pc, #284]	@ (8000ffc <HAL_UART_MspInit+0x148>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	f040 8086 	bne.w	8000ff2 <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fdf8 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efe:	f7ff fdd1 	bl	8000aa4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f02:	4b3f      	ldr	r3, [pc, #252]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f06:	4a3e      	ldr	r2, [pc, #248]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b39      	ldr	r3, [pc, #228]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a38      	ldr	r2, [pc, #224]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a32      	ldr	r2, [pc, #200]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <HAL_UART_MspInit+0x14c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4827      	ldr	r0, [pc, #156]	@ (8001004 <HAL_UART_MspInit+0x150>)
 8000f66:	f000 fcc5 	bl	80018f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8a:	f000 fcb3 	bl	80018f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000f90:	4a1e      	ldr	r2, [pc, #120]	@ (800100c <HAL_UART_MspInit+0x158>)
 8000f92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000f96:	2218      	movs	r2, #24
 8000f98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fa8:	2280      	movs	r2, #128	@ 0x80
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fba:	2220      	movs	r2, #32
 8000fbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fc4:	4810      	ldr	r0, [pc, #64]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fc6:	f000 f963 	bl	8001290 <HAL_DMA_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8000fd0:	f7ff fd68 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_UART_MspInit+0x154>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	2025      	movs	r0, #37	@ 0x25
 8000fe8:	f000 f92a 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fec:	2025      	movs	r0, #37	@ 0x25
 8000fee:	f000 f941 	bl	8001274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3770      	adds	r7, #112	@ 0x70
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000
 8001004:	48000800 	.word	0x48000800
 8001008:	20000418 	.word	0x20000418
 800100c:	40020008 	.word	0x40020008

08001010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001010:	480d      	ldr	r0, [pc, #52]	@ (8001048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001012:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff fef0 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f006 fbaf 	bl	80077a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001042:	f7ff fc9b 	bl	800097c <main>

08001046 <LoopForever>:

LoopForever:
    b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   r0, =_estack
 8001048:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8001054:	080079f0 	.word	0x080079f0
  ldr r2, =_sbss
 8001058:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 800105c:	200009f8 	.word	0x200009f8

08001060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_2_IRQHandler>

08001062 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f8dc 	bl	800122a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001072:	200a      	movs	r0, #10
 8001074:	f7ff fe14 	bl	8000ca0 <HAL_InitTick>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	e001      	b.n	8001088 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001084:	f7ff fde2 	bl	8000c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001088:	79fb      	ldrb	r3, [r7, #7]

}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_IncTick+0x1c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_IncTick+0x20>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a03      	ldr	r2, [pc, #12]	@ (80010b0 <HAL_IncTick+0x1c>)
 80010a4:	6013      	str	r3, [r2, #0]
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	20000478 	.word	0x20000478
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000478 	.word	0x20000478

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	@ (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	@ (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff4c 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124e:	f7ff ff63 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001252:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	6978      	ldr	r0, [r7, #20]
 800125a:	f7ff ffb3 	bl	80011c4 <NVIC_EncodePriority>
 800125e:	4602      	mov	r2, r0
 8001260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff82 	bl	8001170 <__NVIC_SetPriority>
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff56 	bl	8001134 <__NVIC_EnableIRQ>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e08d      	b.n	80013be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b47      	ldr	r3, [pc, #284]	@ (80013c8 <HAL_DMA_Init+0x138>)
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d80f      	bhi.n	80012ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b45      	ldr	r3, [pc, #276]	@ (80013cc <HAL_DMA_Init+0x13c>)
 80012b6:	4413      	add	r3, r2
 80012b8:	4a45      	ldr	r2, [pc, #276]	@ (80013d0 <HAL_DMA_Init+0x140>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	009a      	lsls	r2, r3, #2
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a42      	ldr	r2, [pc, #264]	@ (80013d4 <HAL_DMA_Init+0x144>)
 80012ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80012cc:	e00e      	b.n	80012ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <HAL_DMA_Init+0x148>)
 80012d6:	4413      	add	r3, r2
 80012d8:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_DMA_Init+0x140>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	009a      	lsls	r2, r3, #2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a3c      	ldr	r2, [pc, #240]	@ (80013dc <HAL_DMA_Init+0x14c>)
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001306:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fa76 	bl	8001830 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800134c:	d102      	bne.n	8001354 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001368:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d010      	beq.n	8001394 <HAL_DMA_Init+0x104>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b04      	cmp	r3, #4
 8001378:	d80c      	bhi.n	8001394 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fa96 	bl	80018ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	e008      	b.n	80013a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40020407 	.word	0x40020407
 80013cc:	bffdfff8 	.word	0xbffdfff8
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	40020000 	.word	0x40020000
 80013d8:	bffdfbf8 	.word	0xbffdfbf8
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_DMA_Start_IT+0x20>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e066      	b.n	80014ce <HAL_DMA_Start_IT+0xee>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d155      	bne.n	80014c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f9bb 	bl	80017b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 020e 	orr.w	r2, r2, #14
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e00f      	b.n	8001478 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0204 	bic.w	r2, r2, #4
 8001466:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 020a 	orr.w	r2, r2, #10
 8001476:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001494:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0201 	orr.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e005      	b.n	80014cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014c8:	2302      	movs	r3, #2
 80014ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d005      	beq.n	80014fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e037      	b.n	800156a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020e 	bic.w	r2, r2, #14
 8001508:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001518:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f003 021f 	and.w	r2, r3, #31
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f202 	lsl.w	r2, r1, r2
 800153c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001546:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00c      	beq.n	800156a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800155e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001568:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800157a:	7bfb      	ldrb	r3, [r7, #15]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d00d      	beq.n	80015bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2204      	movs	r2, #4
 80015a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e047      	b.n	800164c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 020e 	bic.w	r2, r2, #14
 80015ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001608:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00c      	beq.n	800162c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001620:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800162a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
    }
  }
  return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	2204      	movs	r2, #4
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d026      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x7a>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d021      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0204 	bic.w	r2, r2, #4
 80016a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f003 021f 	and.w	r2, r3, #31
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	2104      	movs	r1, #4
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d071      	beq.n	80017aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016ce:	e06c      	b.n	80017aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2202      	movs	r2, #2
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d02e      	beq.n	8001742 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d029      	beq.n	8001742 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10b      	bne.n	8001714 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 020a 	bic.w	r2, r2, #10
 800170a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	2102      	movs	r1, #2
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	2b00      	cmp	r3, #0
 8001736:	d038      	beq.n	80017aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001740:	e033      	b.n	80017aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2208      	movs	r2, #8
 800174c:	409a      	lsls	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d02a      	beq.n	80017ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d025      	beq.n	80017ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020e 	bic.w	r2, r2, #14
 800176e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
}
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f003 021f 	and.w	r2, r3, #31
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d108      	bne.n	8001814 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001812:	e007      	b.n	8001824 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001840:	429a      	cmp	r2, r3
 8001842:	d802      	bhi.n	800184a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001844:	4b15      	ldr	r3, [pc, #84]	@ (800189c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e001      	b.n	800184e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800184c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3b08      	subs	r3, #8
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	009a      	lsls	r2, r3, #2
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800187a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2201      	movs	r2, #1
 8001884:	409a      	lsls	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800188a:	bf00      	nop
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40020407 	.word	0x40020407
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020820 	.word	0x40020820
 80018a4:	cccccccd 	.word	0xcccccccd
 80018a8:	40020880 	.word	0x40020880

080018ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2201      	movs	r2, #1
 80018da:	409a      	lsls	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	1000823f 	.word	0x1000823f
 80018f0:	40020940 	.word	0x40020940

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001902:	e15a      	b.n	8001bba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 814c 	beq.w	8001bb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d005      	beq.n	8001934 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001930:	2b02      	cmp	r3, #2
 8001932:	d130      	bne.n	8001996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196a:	2201      	movs	r2, #1
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f003 0201 	and.w	r2, r3, #1
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d017      	beq.n	80019d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d123      	bne.n	8001a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	08da      	lsrs	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3208      	adds	r2, #8
 8001a20:	6939      	ldr	r1, [r7, #16]
 8001a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0203 	and.w	r2, r3, #3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80a6 	beq.w	8001bb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a68:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a74:	4b58      	ldr	r3, [pc, #352]	@ (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a80:	4a56      	ldr	r2, [pc, #344]	@ (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aaa:	d01f      	beq.n	8001aec <HAL_GPIO_Init+0x1f8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a4c      	ldr	r2, [pc, #304]	@ (8001be0 <HAL_GPIO_Init+0x2ec>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d019      	beq.n	8001ae8 <HAL_GPIO_Init+0x1f4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a4b      	ldr	r2, [pc, #300]	@ (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_GPIO_Init+0x1f0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a4a      	ldr	r2, [pc, #296]	@ (8001be8 <HAL_GPIO_Init+0x2f4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_GPIO_Init+0x1ec>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a49      	ldr	r2, [pc, #292]	@ (8001bec <HAL_GPIO_Init+0x2f8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d007      	beq.n	8001adc <HAL_GPIO_Init+0x1e8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a48      	ldr	r2, [pc, #288]	@ (8001bf0 <HAL_GPIO_Init+0x2fc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_GPIO_Init+0x1e4>
 8001ad4:	2305      	movs	r3, #5
 8001ad6:	e00a      	b.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001ad8:	2306      	movs	r3, #6
 8001ada:	e008      	b.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001adc:	2304      	movs	r3, #4
 8001ade:	e006      	b.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001aec:	2300      	movs	r3, #0
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afe:	4937      	ldr	r1, [pc, #220]	@ (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b0c:	4b39      	ldr	r3, [pc, #228]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b30:	4a30      	ldr	r2, [pc, #192]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b36:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b5a:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b84:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bae:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f47f ae9d 	bne.w	8001904 <HAL_GPIO_Init+0x10>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	48000400 	.word	0x48000400
 8001be4:	48000800 	.word	0x48000800
 8001be8:	48000c00 	.word	0x48000c00
 8001bec:	48001000 	.word	0x48001000
 8001bf0:	48001400 	.word	0x48001400
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43d9      	mvns	r1, r3
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	400b      	ands	r3, r1
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e08d      	b.n	8001d8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fd48 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	@ 0x24
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	e006      	b.n	8001ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d108      	bne.n	8001cfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	e007      	b.n	8001d0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69d9      	ldr	r1, [r3, #28]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1a      	ldr	r2, [r3, #32]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d138      	bne.n	8001e1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e032      	b.n	8001e1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2224      	movs	r2, #36	@ 0x24
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001de4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
  }
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d139      	bne.n	8001eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e033      	b.n	8001eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2224      	movs	r2, #36	@ 0x24
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d141      	bne.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ece:	4b4b      	ldr	r3, [pc, #300]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eda:	d131      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001edc:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ee2:	4a46      	ldr	r2, [pc, #280]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eec:	4b43      	ldr	r3, [pc, #268]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef4:	4a41      	ldr	r2, [pc, #260]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001efc:	4b40      	ldr	r3, [pc, #256]	@ (8002000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2232      	movs	r2, #50	@ 0x32
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	4a3f      	ldr	r2, [pc, #252]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f12:	e002      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1a:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f26:	d102      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f2      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2e:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3a:	d158      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e057      	b.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f40:	4b2e      	ldr	r3, [pc, #184]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f46:	4a2d      	ldr	r2, [pc, #180]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f50:	e04d      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f58:	d141      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5a:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f66:	d131      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6e:	4a23      	ldr	r2, [pc, #140]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f80:	4a1e      	ldr	r2, [pc, #120]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2232      	movs	r2, #50	@ 0x32
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9e:	e002      	b.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d102      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f2      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc6:	d112      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e011      	b.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fdc:	e007      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40007000 	.word	0x40007000
 8002000:	20000000 	.word	0x20000000
 8002004:	431bde83 	.word	0x431bde83

08002008 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002016:	6093      	str	r3, [r2, #8]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40007000 	.word	0x40007000

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e2fe      	b.n	8002638 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002046:	4b97      	ldr	r3, [pc, #604]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002050:	4b94      	ldr	r3, [pc, #592]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d102      	bne.n	8002066 <HAL_RCC_OscConfig+0x3e>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d002      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b8d      	ldr	r3, [pc, #564]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d157      	bne.n	8002130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e2d9      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b85      	ldr	r3, [pc, #532]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a84      	ldr	r2, [pc, #528]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b7f      	ldr	r3, [pc, #508]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b7c      	ldr	r3, [pc, #496]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7b      	ldr	r2, [pc, #492]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b78      	ldr	r3, [pc, #480]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a77      	ldr	r2, [pc, #476]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b75      	ldr	r3, [pc, #468]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a74      	ldr	r2, [pc, #464]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7fe ffea 	bl	80010b8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe ffe6 	bl	80010b8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e29e      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fa:	4b6a      	ldr	r3, [pc, #424]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe ffd6 	bl	80010b8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe ffd2 	bl	80010b8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e28a      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002122:	4b60      	ldr	r3, [pc, #384]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0xe8>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d075      	beq.n	800222a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002148:	4b56      	ldr	r3, [pc, #344]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d102      	bne.n	800215e <HAL_RCC_OscConfig+0x136>
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d002      	beq.n	8002164 <HAL_RCC_OscConfig+0x13c>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d11f      	bne.n	80021a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002164:	4b4f      	ldr	r3, [pc, #316]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x154>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e25d      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	4b49      	ldr	r3, [pc, #292]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	4946      	ldr	r1, [pc, #280]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002190:	4b45      	ldr	r3, [pc, #276]	@ (80022a8 <HAL_RCC_OscConfig+0x280>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fd83 	bl	8000ca0 <HAL_InitTick>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d043      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e249      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d023      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b3d      	ldr	r3, [pc, #244]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3c      	ldr	r2, [pc, #240]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ff7e 	bl	80010b8 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe ff7a 	bl	80010b8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e232      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d2:	4b34      	ldr	r3, [pc, #208]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b31      	ldr	r3, [pc, #196]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	061b      	lsls	r3, r3, #24
 80021ec:	492d      	ldr	r1, [pc, #180]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
 80021f2:	e01a      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 80021fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe ff5a 	bl	80010b8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002208:	f7fe ff56 	bl	80010b8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e20e      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800221a:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x1e0>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d041      	beq.n	80022ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01c      	beq.n	8002278 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002244:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7fe ff33 	bl	80010b8 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe ff2f 	bl	80010b8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e1e7      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ef      	beq.n	8002256 <HAL_RCC_OscConfig+0x22e>
 8002276:	e020      	b.n	80022ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002278:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800227a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227e:	4a09      	ldr	r2, [pc, #36]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe ff16 	bl	80010b8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800228e:	e00d      	b.n	80022ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe ff12 	bl	80010b8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d906      	bls.n	80022ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1ca      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	4b8c      	ldr	r3, [pc, #560]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ea      	bne.n	8002290 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a6 	beq.w	8002414 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022cc:	4b84      	ldr	r3, [pc, #528]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x2b4>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x2b6>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b7f      	ldr	r3, [pc, #508]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	4a7e      	ldr	r2, [pc, #504]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ee:	4b7c      	ldr	r3, [pc, #496]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fe:	4b79      	ldr	r3, [pc, #484]	@ (80024e4 <HAL_RCC_OscConfig+0x4bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230a:	4b76      	ldr	r3, [pc, #472]	@ (80024e4 <HAL_RCC_OscConfig+0x4bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a75      	ldr	r2, [pc, #468]	@ (80024e4 <HAL_RCC_OscConfig+0x4bc>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7fe fecf 	bl	80010b8 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fe fecb 	bl	80010b8 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e183      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002330:	4b6c      	ldr	r3, [pc, #432]	@ (80024e4 <HAL_RCC_OscConfig+0x4bc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d108      	bne.n	8002356 <HAL_RCC_OscConfig+0x32e>
 8002344:	4b66      	ldr	r3, [pc, #408]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	4a65      	ldr	r2, [pc, #404]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002354:	e024      	b.n	80023a0 <HAL_RCC_OscConfig+0x378>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d110      	bne.n	8002380 <HAL_RCC_OscConfig+0x358>
 800235e:	4b60      	ldr	r3, [pc, #384]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002364:	4a5e      	ldr	r2, [pc, #376]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800236e:	4b5c      	ldr	r3, [pc, #368]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002374:	4a5a      	ldr	r2, [pc, #360]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800237e:	e00f      	b.n	80023a0 <HAL_RCC_OscConfig+0x378>
 8002380:	4b57      	ldr	r3, [pc, #348]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002386:	4a56      	ldr	r2, [pc, #344]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002390:	4b53      	ldr	r3, [pc, #332]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	4a52      	ldr	r2, [pc, #328]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d016      	beq.n	80023d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7fe fe86 	bl	80010b8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7fe fe82 	bl	80010b8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e138      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c6:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ed      	beq.n	80023b0 <HAL_RCC_OscConfig+0x388>
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fe6f 	bl	80010b8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe fe6b 	bl	80010b8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e121      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f4:	4b3a      	ldr	r3, [pc, #232]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ed      	bne.n	80023de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002402:	7ffb      	ldrb	r3, [r7, #31]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b35      	ldr	r3, [pc, #212]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240c:	4a34      	ldr	r2, [pc, #208]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002412:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03c      	beq.n	800249a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01c      	beq.n	8002462 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002428:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 800242a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800242e:	4a2c      	ldr	r2, [pc, #176]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe fe3e 	bl	80010b8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002440:	f7fe fe3a 	bl	80010b8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0f2      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002452:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002454:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCC_OscConfig+0x418>
 8002460:	e01b      	b.n	800249a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002462:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 8002464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe fe21 	bl	80010b8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800247a:	f7fe fe1d 	bl	80010b8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0d5      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800248c:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ef      	bne.n	800247a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80c9 	beq.w	8002636 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a4:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	f000 8083 	beq.w	80025b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d15e      	bne.n	8002578 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a08      	ldr	r2, [pc, #32]	@ (80024e0 <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fdf7 	bl	80010b8 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	e00c      	b.n	80024e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fdf3 	bl	80010b8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d905      	bls.n	80024e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0ab      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	4b55      	ldr	r3, [pc, #340]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ec      	bne.n	80024ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b52      	ldr	r3, [pc, #328]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	4b52      	ldr	r3, [pc, #328]	@ (8002644 <HAL_RCC_OscConfig+0x61c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6a11      	ldr	r1, [r2, #32]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002504:	3a01      	subs	r2, #1
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800250e:	0212      	lsls	r2, r2, #8
 8002510:	4311      	orrs	r1, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002516:	0852      	lsrs	r2, r2, #1
 8002518:	3a01      	subs	r2, #1
 800251a:	0552      	lsls	r2, r2, #21
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002522:	0852      	lsrs	r2, r2, #1
 8002524:	3a01      	subs	r2, #1
 8002526:	0652      	lsls	r2, r2, #25
 8002528:	4311      	orrs	r1, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800252e:	06d2      	lsls	r2, r2, #27
 8002530:	430a      	orrs	r2, r1
 8002532:	4943      	ldr	r1, [pc, #268]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 8002534:	4313      	orrs	r3, r2
 8002536:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002538:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a40      	ldr	r2, [pc, #256]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002544:	4b3e      	ldr	r3, [pc, #248]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a3d      	ldr	r2, [pc, #244]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 800254a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800254e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fdb2 	bl	80010b8 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fdae 	bl	80010b8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e066      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x530>
 8002576:	e05e      	b.n	8002636 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b31      	ldr	r3, [pc, #196]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a30      	ldr	r2, [pc, #192]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 800257e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fd98 	bl	80010b8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fd94 	bl	80010b8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e04c      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259e:	4b28      	ldr	r3, [pc, #160]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025aa:	4b25      	ldr	r3, [pc, #148]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4924      	ldr	r1, [pc, #144]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_RCC_OscConfig+0x620>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]
 80025b6:	e03e      	b.n	8002636 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e039      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_RCC_OscConfig+0x618>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d12c      	bne.n	8002632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	3b01      	subs	r3, #1
 80025e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d123      	bne.n	8002632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d11b      	bne.n	8002632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d113      	bne.n	8002632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d109      	bne.n	8002632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	3b01      	subs	r3, #1
 800262c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	019f800c 	.word	0x019f800c
 8002648:	feeefffc 	.word	0xfeeefffc

0800264c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e11e      	b.n	80028a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b91      	ldr	r3, [pc, #580]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d910      	bls.n	8002694 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b8e      	ldr	r3, [pc, #568]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 020f 	bic.w	r2, r3, #15
 800267a:	498c      	ldr	r1, [pc, #560]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b8a      	ldr	r3, [pc, #552]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e106      	b.n	80028a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d073      	beq.n	8002788 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d129      	bne.n	80026fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a8:	4b81      	ldr	r3, [pc, #516]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0f4      	b.n	80028a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026b8:	f000 f9d0 	bl	8002a5c <RCC_GetSysClockFreqFromPLLSource>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4a7c      	ldr	r2, [pc, #496]	@ (80028b4 <HAL_RCC_ClockConfig+0x268>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d93f      	bls.n	8002746 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026c6:	4b7a      	ldr	r3, [pc, #488]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d033      	beq.n	8002746 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d12f      	bne.n	8002746 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026e6:	4b72      	ldr	r3, [pc, #456]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ee:	4a70      	ldr	r2, [pc, #448]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80026f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e024      	b.n	8002746 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d107      	bne.n	8002714 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002704:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0c6      	b.n	80028a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	4b66      	ldr	r3, [pc, #408]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0be      	b.n	80028a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002724:	f000 f8ce 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002728:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4a61      	ldr	r2, [pc, #388]	@ (80028b4 <HAL_RCC_ClockConfig+0x268>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d909      	bls.n	8002746 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002732:	4b5f      	ldr	r3, [pc, #380]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800273a:	4a5d      	ldr	r2, [pc, #372]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 800273c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002740:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b5a      	ldr	r3, [pc, #360]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4957      	ldr	r1, [pc, #348]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002758:	f7fe fcae 	bl	80010b8 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe fcaa 	bl	80010b8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e095      	b.n	80028a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b4e      	ldr	r3, [pc, #312]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d023      	beq.n	80027dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a0:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a42      	ldr	r2, [pc, #264]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027b8:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027c0:	4a3b      	ldr	r2, [pc, #236]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b39      	ldr	r3, [pc, #228]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4936      	ldr	r1, [pc, #216]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
 80027da:	e008      	b.n	80027ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b80      	cmp	r3, #128	@ 0x80
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027e2:	4b33      	ldr	r3, [pc, #204]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4a32      	ldr	r2, [pc, #200]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 80027e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ee:	4b2f      	ldr	r3, [pc, #188]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d21d      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fc:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 020f 	bic.w	r2, r3, #15
 8002804:	4929      	ldr	r1, [pc, #164]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800280c:	f7fe fc54 	bl	80010b8 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7fe fc50 	bl	80010b8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e03b      	b.n	80028a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d1ed      	bne.n	8002814 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4917      	ldr	r1, [pc, #92]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490f      	ldr	r1, [pc, #60]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002876:	f000 f825 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <HAL_RCC_ClockConfig+0x264>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <HAL_RCC_ClockConfig+0x26c>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <HAL_RCC_ClockConfig+0x270>)
 8002894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_RCC_ClockConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fa00 	bl	8000ca0 <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	04c4b400 	.word	0x04c4b400
 80028b8:	080079a0 	.word	0x080079a0
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028ca:	4b2c      	ldr	r3, [pc, #176]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	e047      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028dc:	4b27      	ldr	r3, [pc, #156]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e8:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e03e      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028ee:	4b23      	ldr	r3, [pc, #140]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d136      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028fa:	4b20      	ldr	r3, [pc, #128]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002904:	4b1d      	ldr	r3, [pc, #116]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3301      	adds	r3, #1
 8002910:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002918:	4a1a      	ldr	r2, [pc, #104]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xc0>)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	4a16      	ldr	r2, [pc, #88]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002922:	68d2      	ldr	r2, [r2, #12]
 8002924:	0a12      	lsrs	r2, r2, #8
 8002926:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	617b      	str	r3, [r7, #20]
      break;
 8002930:	e00c      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002932:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	4a10      	ldr	r2, [pc, #64]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 800293c:	68d2      	ldr	r2, [r2, #12]
 800293e:	0a12      	lsrs	r2, r2, #8
 8002940:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
      break;
 800294a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0e5b      	lsrs	r3, r3, #25
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	3301      	adds	r3, #1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e001      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800296c:	693b      	ldr	r3, [r7, #16]
}
 800296e:	4618      	mov	r0, r3
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	00f42400 	.word	0x00f42400
 8002984:	007a1200 	.word	0x007a1200

08002988 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_RCC_GetHCLKFreq+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029a4:	f7ff fff0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4904      	ldr	r1, [pc, #16]	@ (80029c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080079b0 	.word	0x080079b0

080029cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029d0:	f7ff ffda 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0adb      	lsrs	r3, r3, #11
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4904      	ldr	r1, [pc, #16]	@ (80029f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	080079b0 	.word	0x080079b0

080029f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	220f      	movs	r2, #15
 8002a06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <HAL_RCC_GetClockConfig+0x5c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <HAL_RCC_GetClockConfig+0x5c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <HAL_RCC_GetClockConfig+0x60>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 020f 	and.w	r2, r3, #15
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	601a      	str	r2, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40022000 	.word	0x40022000

08002a5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a62:	4b1e      	ldr	r3, [pc, #120]	@ (8002adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d10c      	bne.n	8002a9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a80:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	4a14      	ldr	r2, [pc, #80]	@ (8002adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a8a:	68d2      	ldr	r2, [r2, #12]
 8002a8c:	0a12      	lsrs	r2, r2, #8
 8002a8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	617b      	str	r3, [r7, #20]
    break;
 8002a98:	e00c      	b.n	8002ab4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8002adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	0a12      	lsrs	r2, r2, #8
 8002aa8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]
    break;
 8002ab2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0e5b      	lsrs	r3, r3, #25
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002ace:	687b      	ldr	r3, [r7, #4]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	007a1200 	.word	0x007a1200
 8002ae4:	00f42400 	.word	0x00f42400

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af0:	2300      	movs	r3, #0
 8002af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af4:	2300      	movs	r3, #0
 8002af6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8098 	beq.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10d      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	4b40      	ldr	r3, [pc, #256]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b22:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b32:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a39      	ldr	r2, [pc, #228]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe fabb 	bl	80010b8 <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b44:	e009      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7fe fab7 	bl	80010b8 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d902      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	74fb      	strb	r3, [r7, #19]
        break;
 8002b58:	e005      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b5a:	4b30      	ldr	r3, [pc, #192]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ef      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d159      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01e      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d019      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b88:	4b23      	ldr	r3, [pc, #140]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002baa:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bb4:	4a18      	ldr	r2, [pc, #96]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fa77 	bl	80010b8 <HAL_GetTick>
 8002bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fa73 	bl	80010b8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d902      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	74fb      	strb	r3, [r7, #19]
            break;
 8002be4:	e006      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ec      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfa:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	4903      	ldr	r1, [pc, #12]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c10:	e008      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	74bb      	strb	r3, [r7, #18]
 8002c16:	e005      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c24:	7c7b      	ldrb	r3, [r7, #17]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	4aa5      	ldr	r2, [pc, #660]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c42:	4ba0      	ldr	r3, [pc, #640]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c48:	f023 0203 	bic.w	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	499c      	ldr	r1, [pc, #624]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c64:	4b97      	ldr	r3, [pc, #604]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	f023 020c 	bic.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4994      	ldr	r1, [pc, #592]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c86:	4b8f      	ldr	r3, [pc, #572]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	498b      	ldr	r1, [pc, #556]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ca8:	4b86      	ldr	r3, [pc, #536]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	4983      	ldr	r1, [pc, #524]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cca:	4b7e      	ldr	r3, [pc, #504]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	497a      	ldr	r1, [pc, #488]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cec:	4b75      	ldr	r3, [pc, #468]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	4972      	ldr	r1, [pc, #456]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4969      	ldr	r1, [pc, #420]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d30:	4b64      	ldr	r3, [pc, #400]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4961      	ldr	r1, [pc, #388]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d52:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	4958      	ldr	r1, [pc, #352]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d74:	4b53      	ldr	r3, [pc, #332]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d82:	4950      	ldr	r1, [pc, #320]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dac:	4b45      	ldr	r3, [pc, #276]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	4942      	ldr	r1, [pc, #264]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002de4:	4b37      	ldr	r3, [pc, #220]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4934      	ldr	r1, [pc, #208]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e02:	d105      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e04:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d015      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e1c:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2a:	4926      	ldr	r1, [pc, #152]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a20      	ldr	r2, [pc, #128]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e62:	4918      	ldr	r1, [pc, #96]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	490a      	ldr	r1, [pc, #40]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002eb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e09d      	b.n	8003016 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eea:	d009      	beq.n	8002f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
 8002ef2:	e005      	b.n	8002f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fe54 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f40:	d902      	bls.n	8002f48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e002      	b.n	8002f4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f56:	d007      	beq.n	8002f68 <HAL_SPI_Init+0xa0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	ea42 0103 	orr.w	r1, r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	f003 0204 	and.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003004:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e049      	b.n	80030c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f841 	bl	80030cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f000 fa21 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d001      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04a      	b.n	800318e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a21      	ldr	r2, [pc, #132]	@ (800319c <HAL_TIM_Base_Start_IT+0xbc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d018      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003122:	d013      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x6c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d115      	bne.n	8003178 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d015      	beq.n	800318a <HAL_TIM_Base_Start_IT+0xaa>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003164:	d011      	beq.n	800318a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e008      	b.n	800318a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e000      	b.n	800318c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40013400 	.word	0x40013400
 80031ac:	40014000 	.word	0x40014000
 80031b0:	00010007 	.word	0x00010007

080031b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d020      	beq.n	8003218 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01b      	beq.n	8003218 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0202 	mvn.w	r2, #2
 80031e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f931 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f923 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f934 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d020      	beq.n	8003264 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0204 	mvn.w	r2, #4
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f90b 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8fd 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f90e 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0208 	mvn.w	r2, #8
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8e5 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8d7 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8e8 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d020      	beq.n	80032fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0210 	mvn.w	r2, #16
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2208      	movs	r2, #8
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8bf 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8b1 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8c2 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fbb0 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d104      	bne.n	8003334 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00c      	beq.n	800334e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f951 	bl	80035f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00c      	beq.n	8003372 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f949 	bl	8003604 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00c      	beq.n	8003396 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800338e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f87c 	bl	800348e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00c      	beq.n	80033ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 0220 	mvn.w	r2, #32
 80033b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f911 	bl	80035dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00c      	beq.n	80033de <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f91d 	bl	8003618 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00c      	beq.n	8003402 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f915 	bl	800362c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800341e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f90d 	bl	8003640 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00c      	beq.n	800344a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f905 	bl	8003654 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a42      	ldr	r2, [pc, #264]	@ (80035c0 <TIM_Base_SetConfig+0x11c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00f      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3f      	ldr	r2, [pc, #252]	@ (80035c4 <TIM_Base_SetConfig+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3e      	ldr	r2, [pc, #248]	@ (80035c8 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3d      	ldr	r2, [pc, #244]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <TIM_Base_SetConfig+0x11c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01b      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fc:	d017      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a30      	ldr	r2, [pc, #192]	@ (80035c4 <TIM_Base_SetConfig+0x120>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	@ (80035c8 <TIM_Base_SetConfig+0x124>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2c      	ldr	r2, [pc, #176]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2b      	ldr	r2, [pc, #172]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a16      	ldr	r2, [pc, #88]	@ (80035c0 <TIM_Base_SetConfig+0x11c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00f      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00b      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a16      	ldr	r2, [pc, #88]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0xe8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d105      	bne.n	80035b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]
  }
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40013400 	.word	0x40013400
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40014400 	.word	0x40014400
 80035d8:	40014800 	.word	0x40014800

080035dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e042      	b.n	8003700 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fd fc11 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2224      	movs	r2, #36	@ 0x24
 8003696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 feec 	bl	8004490 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fc1d 	bl	8003ef8 <UART_SetConfig>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e01b      	b.n	8003700 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 ff6b 	bl	80045d4 <UART_CheckIdleState>
 80036fe:	4603      	mov	r3, r0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	2b20      	cmp	r3, #32
 8003720:	d17b      	bne.n	800381a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_UART_Transmit+0x26>
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e074      	b.n	800381c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2221      	movs	r2, #33	@ 0x21
 800373e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003742:	f7fd fcb9 	bl	80010b8 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003760:	d108      	bne.n	8003774 <HAL_UART_Transmit+0x6c>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e003      	b.n	800377c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800377c:	e030      	b.n	80037e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	@ 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 ffcd 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e03d      	b.n	800381c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	3302      	adds	r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	e007      	b.n	80037ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1c8      	bne.n	800377e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2140      	movs	r1, #64	@ 0x40
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 ff96 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e006      	b.n	800381c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800381a:	2302      	movs	r3, #2
  }
}
 800381c:	4618      	mov	r0, r3
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b0ba      	sub	sp, #232	@ 0xe8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800384a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800384e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003852:	4013      	ands	r3, r2
 8003854:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d11b      	bne.n	8003898 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8300 	beq.w	8003e8e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
      }
      return;
 8003896:	e2fa      	b.n	8003e8e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8123 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80038a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80038a6:	4b8d      	ldr	r3, [pc, #564]	@ (8003adc <HAL_UART_IRQHandler+0x2b8>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80038ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038b2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ae0 <HAL_UART_IRQHandler+0x2bc>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8116 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d011      	beq.n	80038ec <HAL_UART_IRQHandler+0xc8>
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d011      	beq.n	800391c <HAL_UART_IRQHandler+0xf8>
 80038f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2202      	movs	r2, #2
 800390a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003912:	f043 0204 	orr.w	r2, r3, #4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d011      	beq.n	800394c <HAL_UART_IRQHandler+0x128>
 8003928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2204      	movs	r2, #4
 800393a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003968:	4b5c      	ldr	r3, [pc, #368]	@ (8003adc <HAL_UART_IRQHandler+0x2b8>)
 800396a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397e:	f043 0208 	orr.w	r2, r3, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <HAL_UART_IRQHandler+0x196>
 8003994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003998:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00c      	beq.n	80039ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8266 	beq.w	8003e92 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d105      	bne.n	80039ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d054      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 ffd7 	bl	80049d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d146      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3308      	adds	r3, #8
 8003a38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1d9      	bne.n	8003a32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d017      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <HAL_UART_IRQHandler+0x2c0>)
 8003a90:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fd75 	bl	8001588 <HAL_DMA_Abort_IT>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d019      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	e00f      	b.n	8003ad8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fa13 	bl	8003ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abe:	e00b      	b.n	8003ad8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa0f 	bl	8003ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac6:	e007      	b.n	8003ad8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fa0b 	bl	8003ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003ad6:	e1dc      	b.n	8003e92 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	bf00      	nop
    return;
 8003ada:	e1da      	b.n	8003e92 <HAL_UART_IRQHandler+0x66e>
 8003adc:	10000001 	.word	0x10000001
 8003ae0:	04000120 	.word	0x04000120
 8003ae4:	08004c89 	.word	0x08004c89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 8170 	bne.w	8003dd2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8169 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8162 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2210      	movs	r2, #16
 8003b14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	f040 80d8 	bne.w	8003cd6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80af 	beq.w	8003c9c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	f080 80a7 	bcs.w	8003c9c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 8087 	bne.w	8003c7a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1da      	bne.n	8003b6c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e1      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3308      	adds	r3, #8
 8003c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e4      	bne.n	8003c38 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fc2e 	bl	80014d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fc fe33 	bl	8000900 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003c9a:	e0fc      	b.n	8003e96 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	f040 80f5 	bne.w	8003e96 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f040 80eb 	bne.w	8003e96 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc fe16 	bl	8000900 <HAL_UARTEx_RxEventCallback>
      return;
 8003cd4:	e0df      	b.n	8003e96 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80d1 	beq.w	8003e9a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80cc 	beq.w	8003e9a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e4      	bne.n	8003d02 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	623b      	str	r3, [r7, #32]
   return(result);
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d60:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e1      	bne.n	8003d38 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	617b      	str	r3, [r7, #20]
   return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e4      	bne.n	8003d88 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fd98 	bl	8000900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dd0:	e063      	b.n	8003e9a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00e      	beq.n	8003dfc <HAL_UART_IRQHandler+0x5d8>
 8003dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003df2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 ff84 	bl	8004d02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dfa:	e051      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d014      	beq.n	8003e32 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d03a      	beq.n	8003e9e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
    }
    return;
 8003e30:	e035      	b.n	8003e9e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_UART_IRQHandler+0x62e>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 ff2e 	bl	8004cac <UART_EndTransmit_IT>
    return;
 8003e50:	e026      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_UART_IRQHandler+0x64e>
 8003e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e62:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 ff5d 	bl	8004d2a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e70:	e016      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
 8003e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da0c      	bge.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 ff45 	bl	8004d16 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e8c:	e008      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003e8e:	bf00      	nop
 8003e90:	e006      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
    return;
 8003e92:	bf00      	nop
 8003e94:	e004      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_UART_IRQHandler+0x67c>
    return;
 8003e9e:	bf00      	nop
  }
}
 8003ea0:	37e8      	adds	r7, #232	@ 0xe8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop

08003ea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b08c      	sub	sp, #48	@ 0x30
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4bab      	ldr	r3, [pc, #684]	@ (80041d4 <UART_SetConfig+0x2dc>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4aa0      	ldr	r2, [pc, #640]	@ (80041d8 <UART_SetConfig+0x2e0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f60:	4313      	orrs	r3, r2
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003f6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	f023 010f 	bic.w	r1, r3, #15
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a91      	ldr	r2, [pc, #580]	@ (80041dc <UART_SetConfig+0x2e4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d125      	bne.n	8003fe8 <UART_SetConfig+0xf0>
 8003f9c:	4b90      	ldr	r3, [pc, #576]	@ (80041e0 <UART_SetConfig+0x2e8>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d81a      	bhi.n	8003fe0 <UART_SetConfig+0xe8>
 8003faa:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <UART_SetConfig+0xb8>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fd1 	.word	0x08003fd1
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc6:	e0d6      	b.n	8004176 <UART_SetConfig+0x27e>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fce:	e0d2      	b.n	8004176 <UART_SetConfig+0x27e>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd6:	e0ce      	b.n	8004176 <UART_SetConfig+0x27e>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fde:	e0ca      	b.n	8004176 <UART_SetConfig+0x27e>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe6:	e0c6      	b.n	8004176 <UART_SetConfig+0x27e>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a7d      	ldr	r2, [pc, #500]	@ (80041e4 <UART_SetConfig+0x2ec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d138      	bne.n	8004064 <UART_SetConfig+0x16c>
 8003ff2:	4b7b      	ldr	r3, [pc, #492]	@ (80041e0 <UART_SetConfig+0x2e8>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d82d      	bhi.n	800405c <UART_SetConfig+0x164>
 8004000:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <UART_SetConfig+0x110>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800403d 	.word	0x0800403d
 800400c:	0800405d 	.word	0x0800405d
 8004010:	0800405d 	.word	0x0800405d
 8004014:	0800405d 	.word	0x0800405d
 8004018:	0800404d 	.word	0x0800404d
 800401c:	0800405d 	.word	0x0800405d
 8004020:	0800405d 	.word	0x0800405d
 8004024:	0800405d 	.word	0x0800405d
 8004028:	08004045 	.word	0x08004045
 800402c:	0800405d 	.word	0x0800405d
 8004030:	0800405d 	.word	0x0800405d
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004055 	.word	0x08004055
 800403c:	2300      	movs	r3, #0
 800403e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004042:	e098      	b.n	8004176 <UART_SetConfig+0x27e>
 8004044:	2302      	movs	r3, #2
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800404a:	e094      	b.n	8004176 <UART_SetConfig+0x27e>
 800404c:	2304      	movs	r3, #4
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004052:	e090      	b.n	8004176 <UART_SetConfig+0x27e>
 8004054:	2308      	movs	r3, #8
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800405a:	e08c      	b.n	8004176 <UART_SetConfig+0x27e>
 800405c:	2310      	movs	r3, #16
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004062:	e088      	b.n	8004176 <UART_SetConfig+0x27e>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5f      	ldr	r2, [pc, #380]	@ (80041e8 <UART_SetConfig+0x2f0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d125      	bne.n	80040ba <UART_SetConfig+0x1c2>
 800406e:	4b5c      	ldr	r3, [pc, #368]	@ (80041e0 <UART_SetConfig+0x2e8>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004074:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004078:	2b30      	cmp	r3, #48	@ 0x30
 800407a:	d016      	beq.n	80040aa <UART_SetConfig+0x1b2>
 800407c:	2b30      	cmp	r3, #48	@ 0x30
 800407e:	d818      	bhi.n	80040b2 <UART_SetConfig+0x1ba>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d00a      	beq.n	800409a <UART_SetConfig+0x1a2>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d814      	bhi.n	80040b2 <UART_SetConfig+0x1ba>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <UART_SetConfig+0x19a>
 800408c:	2b10      	cmp	r3, #16
 800408e:	d008      	beq.n	80040a2 <UART_SetConfig+0x1aa>
 8004090:	e00f      	b.n	80040b2 <UART_SetConfig+0x1ba>
 8004092:	2300      	movs	r3, #0
 8004094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004098:	e06d      	b.n	8004176 <UART_SetConfig+0x27e>
 800409a:	2302      	movs	r3, #2
 800409c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a0:	e069      	b.n	8004176 <UART_SetConfig+0x27e>
 80040a2:	2304      	movs	r3, #4
 80040a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a8:	e065      	b.n	8004176 <UART_SetConfig+0x27e>
 80040aa:	2308      	movs	r3, #8
 80040ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b0:	e061      	b.n	8004176 <UART_SetConfig+0x27e>
 80040b2:	2310      	movs	r3, #16
 80040b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b8:	e05d      	b.n	8004176 <UART_SetConfig+0x27e>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a4b      	ldr	r2, [pc, #300]	@ (80041ec <UART_SetConfig+0x2f4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d125      	bne.n	8004110 <UART_SetConfig+0x218>
 80040c4:	4b46      	ldr	r3, [pc, #280]	@ (80041e0 <UART_SetConfig+0x2e8>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80040d0:	d016      	beq.n	8004100 <UART_SetConfig+0x208>
 80040d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040d4:	d818      	bhi.n	8004108 <UART_SetConfig+0x210>
 80040d6:	2b80      	cmp	r3, #128	@ 0x80
 80040d8:	d00a      	beq.n	80040f0 <UART_SetConfig+0x1f8>
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d814      	bhi.n	8004108 <UART_SetConfig+0x210>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <UART_SetConfig+0x1f0>
 80040e2:	2b40      	cmp	r3, #64	@ 0x40
 80040e4:	d008      	beq.n	80040f8 <UART_SetConfig+0x200>
 80040e6:	e00f      	b.n	8004108 <UART_SetConfig+0x210>
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ee:	e042      	b.n	8004176 <UART_SetConfig+0x27e>
 80040f0:	2302      	movs	r3, #2
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f6:	e03e      	b.n	8004176 <UART_SetConfig+0x27e>
 80040f8:	2304      	movs	r3, #4
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fe:	e03a      	b.n	8004176 <UART_SetConfig+0x27e>
 8004100:	2308      	movs	r3, #8
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004106:	e036      	b.n	8004176 <UART_SetConfig+0x27e>
 8004108:	2310      	movs	r3, #16
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800410e:	e032      	b.n	8004176 <UART_SetConfig+0x27e>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a30      	ldr	r2, [pc, #192]	@ (80041d8 <UART_SetConfig+0x2e0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d12a      	bne.n	8004170 <UART_SetConfig+0x278>
 800411a:	4b31      	ldr	r3, [pc, #196]	@ (80041e0 <UART_SetConfig+0x2e8>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004120:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004124:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004128:	d01a      	beq.n	8004160 <UART_SetConfig+0x268>
 800412a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800412e:	d81b      	bhi.n	8004168 <UART_SetConfig+0x270>
 8004130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004134:	d00c      	beq.n	8004150 <UART_SetConfig+0x258>
 8004136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800413a:	d815      	bhi.n	8004168 <UART_SetConfig+0x270>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <UART_SetConfig+0x250>
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004144:	d008      	beq.n	8004158 <UART_SetConfig+0x260>
 8004146:	e00f      	b.n	8004168 <UART_SetConfig+0x270>
 8004148:	2300      	movs	r3, #0
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800414e:	e012      	b.n	8004176 <UART_SetConfig+0x27e>
 8004150:	2302      	movs	r3, #2
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004156:	e00e      	b.n	8004176 <UART_SetConfig+0x27e>
 8004158:	2304      	movs	r3, #4
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800415e:	e00a      	b.n	8004176 <UART_SetConfig+0x27e>
 8004160:	2308      	movs	r3, #8
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004166:	e006      	b.n	8004176 <UART_SetConfig+0x27e>
 8004168:	2310      	movs	r3, #16
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800416e:	e002      	b.n	8004176 <UART_SetConfig+0x27e>
 8004170:	2310      	movs	r3, #16
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <UART_SetConfig+0x2e0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	f040 80a8 	bne.w	80042d2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004182:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004186:	2b08      	cmp	r3, #8
 8004188:	d834      	bhi.n	80041f4 <UART_SetConfig+0x2fc>
 800418a:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <UART_SetConfig+0x298>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041f5 	.word	0x080041f5
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	080041c3 	.word	0x080041c3
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	080041f5 	.word	0x080041f5
 80041ac:	080041f5 	.word	0x080041f5
 80041b0:	080041cb 	.word	0x080041cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7fe fbf4 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 80041b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ba:	e021      	b.n	8004200 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <UART_SetConfig+0x2f8>)
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041c0:	e01e      	b.n	8004200 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c2:	f7fe fb7f 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 80041c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041c8:	e01a      	b.n	8004200 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041d0:	e016      	b.n	8004200 <UART_SetConfig+0x308>
 80041d2:	bf00      	nop
 80041d4:	cfff69f3 	.word	0xcfff69f3
 80041d8:	40008000 	.word	0x40008000
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40004400 	.word	0x40004400
 80041e8:	40004800 	.word	0x40004800
 80041ec:	40004c00 	.word	0x40004c00
 80041f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 812a 	beq.w	800445c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	4a9e      	ldr	r2, [pc, #632]	@ (8004488 <UART_SetConfig+0x590>)
 800420e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004212:	461a      	mov	r2, r3
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	fbb3 f3f2 	udiv	r3, r3, r2
 800421a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4413      	add	r3, r2
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d305      	bcc.n	8004238 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	429a      	cmp	r2, r3
 8004236:	d903      	bls.n	8004240 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800423e:	e10d      	b.n	800445c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	2200      	movs	r2, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	60fa      	str	r2, [r7, #12]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	4a8e      	ldr	r2, [pc, #568]	@ (8004488 <UART_SetConfig+0x590>)
 800424e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004252:	b29b      	uxth	r3, r3
 8004254:	2200      	movs	r2, #0
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800425e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004262:	f7fb ffe1 	bl	8000228 <__aeabi_uldivmod>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	020b      	lsls	r3, r1, #8
 8004278:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800427c:	0202      	lsls	r2, r0, #8
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	6849      	ldr	r1, [r1, #4]
 8004282:	0849      	lsrs	r1, r1, #1
 8004284:	2000      	movs	r0, #0
 8004286:	460c      	mov	r4, r1
 8004288:	4605      	mov	r5, r0
 800428a:	eb12 0804 	adds.w	r8, r2, r4
 800428e:	eb43 0905 	adc.w	r9, r3, r5
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	469a      	mov	sl, r3
 800429a:	4693      	mov	fp, r2
 800429c:	4652      	mov	r2, sl
 800429e:	465b      	mov	r3, fp
 80042a0:	4640      	mov	r0, r8
 80042a2:	4649      	mov	r1, r9
 80042a4:	f7fb ffc0 	bl	8000228 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b6:	d308      	bcc.n	80042ca <UART_SetConfig+0x3d2>
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042be:	d204      	bcs.n	80042ca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	e0c8      	b.n	800445c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042d0:	e0c4      	b.n	800445c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042da:	d167      	bne.n	80043ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80042dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d828      	bhi.n	8004336 <UART_SetConfig+0x43e>
 80042e4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ec <UART_SetConfig+0x3f4>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004311 	.word	0x08004311
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004321 	.word	0x08004321
 80042f8:	08004337 	.word	0x08004337
 80042fc:	08004327 	.word	0x08004327
 8004300:	08004337 	.word	0x08004337
 8004304:	08004337 	.word	0x08004337
 8004308:	08004337 	.word	0x08004337
 800430c:	0800432f 	.word	0x0800432f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe fb46 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8004314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004316:	e014      	b.n	8004342 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7fe fb58 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 800431c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800431e:	e010      	b.n	8004342 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004320:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <UART_SetConfig+0x594>)
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004324:	e00d      	b.n	8004342 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004326:	f7fe facd 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800432a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800432c:	e009      	b.n	8004342 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004334:	e005      	b.n	8004342 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004340:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8089 	beq.w	800445c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	4a4e      	ldr	r2, [pc, #312]	@ (8004488 <UART_SetConfig+0x590>)
 8004350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004354:	461a      	mov	r2, r3
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	fbb3 f3f2 	udiv	r3, r3, r2
 800435c:	005a      	lsls	r2, r3, #1
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	441a      	add	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	d916      	bls.n	80043a4 <UART_SetConfig+0x4ac>
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437c:	d212      	bcs.n	80043a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f023 030f 	bic.w	r3, r3, #15
 8004386:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	b29b      	uxth	r3, r3
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	b29a      	uxth	r2, r3
 8004394:	8bfb      	ldrh	r3, [r7, #30]
 8004396:	4313      	orrs	r3, r2
 8004398:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	8bfa      	ldrh	r2, [r7, #30]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	e05b      	b.n	800445c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043aa:	e057      	b.n	800445c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d828      	bhi.n	8004406 <UART_SetConfig+0x50e>
 80043b4:	a201      	add	r2, pc, #4	@ (adr r2, 80043bc <UART_SetConfig+0x4c4>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080043e9 	.word	0x080043e9
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	08004407 	.word	0x08004407
 80043cc:	080043f7 	.word	0x080043f7
 80043d0:	08004407 	.word	0x08004407
 80043d4:	08004407 	.word	0x08004407
 80043d8:	08004407 	.word	0x08004407
 80043dc:	080043ff 	.word	0x080043ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7fe fade 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 80043e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043e6:	e014      	b.n	8004412 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e8:	f7fe faf0 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 80043ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043ee:	e010      	b.n	8004412 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f0:	4b26      	ldr	r3, [pc, #152]	@ (800448c <UART_SetConfig+0x594>)
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043f4:	e00d      	b.n	8004412 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f6:	f7fe fa65 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 80043fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043fc:	e009      	b.n	8004412 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004404:	e005      	b.n	8004412 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004410:	bf00      	nop
    }

    if (pclk != 0U)
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d021      	beq.n	800445c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	4a1a      	ldr	r2, [pc, #104]	@ (8004488 <UART_SetConfig+0x590>)
 800441e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004422:	461a      	mov	r2, r3
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	fbb3 f2f2 	udiv	r2, r3, r2
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	441a      	add	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d909      	bls.n	8004456 <UART_SetConfig+0x55e>
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d205      	bcs.n	8004456 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	b29a      	uxth	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60da      	str	r2, [r3, #12]
 8004454:	e002      	b.n	800445c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2201      	movs	r2, #1
 8004460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2201      	movs	r2, #1
 8004468:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2200      	movs	r2, #0
 8004470:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004478:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800447c:	4618      	mov	r0, r3
 800447e:	3730      	adds	r7, #48	@ 0x30
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004486:	bf00      	nop
 8004488:	080079b8 	.word	0x080079b8
 800448c:	00f42400 	.word	0x00f42400

08004490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01a      	beq.n	80045a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458e:	d10a      	bne.n	80045a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b098      	sub	sp, #96	@ 0x60
 80045d8:	af02      	add	r7, sp, #8
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e4:	f7fc fd68 	bl	80010b8 <HAL_GetTick>
 80045e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d12f      	bne.n	8004658 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004600:	2200      	movs	r2, #0
 8004602:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f88e 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d022      	beq.n	8004658 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004626:	653b      	str	r3, [r7, #80]	@ 0x50
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004630:	647b      	str	r3, [r7, #68]	@ 0x44
 8004632:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800463e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e6      	bne.n	8004612 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e063      	b.n	8004720 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b04      	cmp	r3, #4
 8004664:	d149      	bne.n	80046fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004666:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466e:	2200      	movs	r2, #0
 8004670:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f857 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d03c      	beq.n	80046fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	623b      	str	r3, [r7, #32]
   return(result);
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469e:	633b      	str	r3, [r7, #48]	@ 0x30
 80046a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3308      	adds	r3, #8
 80046d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046d2:	61fa      	str	r2, [r7, #28]
 80046d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	69b9      	ldr	r1, [r7, #24]
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	617b      	str	r3, [r7, #20]
   return(result);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e5      	bne.n	80046b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e012      	b.n	8004720 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3758      	adds	r7, #88	@ 0x58
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004738:	e04f      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d04b      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fc fcb9 	bl	80010b8 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <UART_WaitOnFlagUntilTimeout+0x30>
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e04e      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d037      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0xb2>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b80      	cmp	r3, #128	@ 0x80
 800476e:	d034      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	d031      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d110      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2208      	movs	r2, #8
 800478a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f920 	bl	80049d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2208      	movs	r2, #8
 8004796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e029      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b4:	d111      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f906 	bl	80049d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e00f      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4013      	ands	r3, r2
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d0a0      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b096      	sub	sp, #88	@ 0x58
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2222      	movs	r2, #34	@ 0x22
 800482c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02d      	beq.n	8004896 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004840:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <UART_Start_Receive_DMA+0x140>)
 8004842:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484a:	4a3f      	ldr	r2, [pc, #252]	@ (8004948 <UART_Start_Receive_DMA+0x144>)
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004854:	4a3d      	ldr	r2, [pc, #244]	@ (800494c <UART_Start_Receive_DMA+0x148>)
 8004856:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485e:	2200      	movs	r2, #0
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3324      	adds	r3, #36	@ 0x24
 800486e:	4619      	mov	r1, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	461a      	mov	r2, r3
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	f7fc fdb2 	bl	80013e0 <HAL_DMA_Start_IT>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2210      	movs	r2, #16
 8004886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e051      	b.n	800493a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048be:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80048ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e6      	bne.n	800489e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e5      	bne.n	80048d0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	613b      	str	r3, [r7, #16]
   return(result);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3308      	adds	r3, #8
 8004922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004924:	623a      	str	r2, [r7, #32]
 8004926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	69f9      	ldr	r1, [r7, #28]
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	61bb      	str	r3, [r7, #24]
   return(result);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e5      	bne.n	8004904 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3758      	adds	r7, #88	@ 0x58
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	08004a9f 	.word	0x08004a9f
 8004948:	08004bcb 	.word	0x08004bcb
 800494c:	08004c09 	.word	0x08004c09

08004950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b08f      	sub	sp, #60	@ 0x3c
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	61fb      	str	r3, [r7, #28]
   return(result);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004978:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800497c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	60bb      	str	r3, [r7, #8]
   return(result);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049aa:	61ba      	str	r2, [r7, #24]
 80049ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6979      	ldr	r1, [r7, #20]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	613b      	str	r3, [r7, #16]
   return(result);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80049c6:	bf00      	nop
 80049c8:	373c      	adds	r7, #60	@ 0x3c
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b095      	sub	sp, #84	@ 0x54
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e6      	bne.n	80049da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3308      	adds	r3, #8
 8004a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e3      	bne.n	8004a0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d118      	bne.n	8004a7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f023 0310 	bic.w	r3, r3, #16
 8004a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	613b      	str	r3, [r7, #16]
   return(result);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a92:	bf00      	nop
 8004a94:	3754      	adds	r7, #84	@ 0x54
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b09c      	sub	sp, #112	@ 0x70
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d171      	bne.n	8004b9e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ad2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ae2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b14:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b16:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e5      	bne.n	8004af4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	623b      	str	r3, [r7, #32]
   return(result);
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b48:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e5      	bne.n	8004b28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d118      	bne.n	8004b9e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	69b9      	ldr	r1, [r7, #24]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	617b      	str	r3, [r7, #20]
   return(result);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e6      	bne.n	8004b6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bb6:	f7fb fea3 	bl	8000900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bba:	e002      	b.n	8004bc2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004bbc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bbe:	f7ff f97d 	bl	8003ebc <HAL_UART_RxCpltCallback>
}
 8004bc2:	bf00      	nop
 8004bc4:	3770      	adds	r7, #112	@ 0x70
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d109      	bne.n	8004bfa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7fb fe84 	bl	8000900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bf8:	e002      	b.n	8004c00 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff f968 	bl	8003ed0 <HAL_UART_RxHalfCpltCallback>
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c30:	2b80      	cmp	r3, #128	@ 0x80
 8004c32:	d109      	bne.n	8004c48 <UART_DMAError+0x40>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b21      	cmp	r3, #33	@ 0x21
 8004c38:	d106      	bne.n	8004c48 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004c42:	6978      	ldr	r0, [r7, #20]
 8004c44:	f7ff fe84 	bl	8004950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d109      	bne.n	8004c6a <UART_DMAError+0x62>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b22      	cmp	r3, #34	@ 0x22
 8004c5a:	d106      	bne.n	8004c6a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004c64:	6978      	ldr	r0, [r7, #20]
 8004c66:	f7ff feb4 	bl	80049d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c70:	f043 0210 	orr.w	r2, r3, #16
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c7a:	6978      	ldr	r0, [r7, #20]
 8004c7c:	f7ff f932 	bl	8003ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c80:	bf00      	nop
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff f920 	bl	8003ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e6      	bne.n	8004cb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff f8d7 	bl	8003ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfa:	bf00      	nop
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e027      	b.n	8004da4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2224      	movs	r2, #36	@ 0x24
 8004d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e02d      	b.n	8004e24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2224      	movs	r2, #36	@ 0x24
 8004dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8a3 	bl	8004f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e02d      	b.n	8004ea0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	@ 0x24
 8004e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f865 	bl	8004f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08c      	sub	sp, #48	@ 0x30
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d142      	bne.n	8004f46 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e03b      	b.n	8004f48 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff fc8e 	bl	8004804 <UART_Start_Receive_DMA>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004eee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d124      	bne.n	8004f40 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d11d      	bne.n	8004f3a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2210      	movs	r2, #16
 8004f04:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	617b      	str	r3, [r7, #20]
   return(result);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f043 0310 	orr.w	r3, r3, #16
 8004f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f26:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6a39      	ldr	r1, [r7, #32]
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e6      	bne.n	8004f06 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004f38:	e002      	b.n	8004f40 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004f40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f44:	e000      	b.n	8004f48 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	@ 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d108      	bne.n	8004f72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f70:	e031      	b.n	8004fd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f72:	2308      	movs	r3, #8
 8004f74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f76:	2308      	movs	r3, #8
 8004f78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	0e5b      	lsrs	r3, r3, #25
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	0f5b      	lsrs	r3, r3, #29
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
 8004f9c:	7b3a      	ldrb	r2, [r7, #12]
 8004f9e:	4911      	ldr	r1, [pc, #68]	@ (8004fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8004fa0:	5c8a      	ldrb	r2, [r1, r2]
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fa6:	7b3a      	ldrb	r2, [r7, #12]
 8004fa8:	490f      	ldr	r1, [pc, #60]	@ (8004fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8004faa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	7b7a      	ldrb	r2, [r7, #13]
 8004fbc:	4909      	ldr	r1, [pc, #36]	@ (8004fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8004fbe:	5c8a      	ldrb	r2, [r1, r2]
 8004fc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fc4:	7b7a      	ldrb	r2, [r7, #13]
 8004fc6:	4908      	ldr	r1, [pc, #32]	@ (8004fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8004fc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fca:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	080079d0 	.word	0x080079d0
 8004fe8:	080079d8 	.word	0x080079d8

08004fec <OS_StartOS>:
/// \param  OsAppModeType Mode
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
void OS_StartOS(OsAppModeType Mode)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  (void) Mode;
  
  if(TRUE == OsIsInterruptContext())
 8004ff4:	f000 fbd8 	bl	80057a8 <OsIsInterruptContext>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	f000 8082 	beq.w	8005104 <OS_StartOS+0x118>
  }

  if(NB_OF_TASKS > 0)
  {    
    /* INIT TCBs */
    for(int tcbIdx = 0; tcbIdx < NB_OF_TASKS; tcbIdx++)
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	e038      	b.n	8005078 <OS_StartOS+0x8c>
    {
      /* Init all stacks with marker 0xAA */
      const uint32 stack_size = OCB_Cfg.pTcb[tcbIdx]->pstack_top - OCB_Cfg.pTcb[tcbIdx]->pstack_bot + sizeof(uint32);
 8005006:	4b41      	ldr	r3, [pc, #260]	@ (800510c <OS_StartOS+0x120>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	4b3d      	ldr	r3, [pc, #244]	@ (800510c <OS_StartOS+0x120>)
 8005016:	6819      	ldr	r1, [r3, #0]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	3304      	adds	r3, #4
 8005026:	60bb      	str	r3, [r7, #8]
      for(uint32 Idx=0u;Idx < stack_size;Idx++)
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	e00f      	b.n	800504e <OS_StartOS+0x62>
      {
        *(uint32*)((OCB_Cfg.pTcb[tcbIdx]->pstack_bot) + Idx) = (uint32)0xAAAAAAAAu;
 800502e:	4b37      	ldr	r3, [pc, #220]	@ (800510c <OS_StartOS+0x120>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	461a      	mov	r2, r3
 8005042:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005046:	6013      	str	r3, [r2, #0]
      for(uint32 Idx=0u;Idx < stack_size;Idx++)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	3301      	adds	r3, #1
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d3eb      	bcc.n	800502e <OS_StartOS+0x42>
      }

      /* Set default tasks priorities */
      OCB_Cfg.pTcb[tcbIdx]->Prio = OCB_Cfg.pTcb[tcbIdx]->FixedPrio;
 8005056:	4b2d      	ldr	r3, [pc, #180]	@ (800510c <OS_StartOS+0x120>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <OS_StartOS+0x120>)
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6852      	ldr	r2, [r2, #4]
 8005070:	61da      	str	r2, [r3, #28]
    for(int tcbIdx = 0; tcbIdx < NB_OF_TASKS; tcbIdx++)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3301      	adds	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b01      	cmp	r3, #1
 800507c:	ddc3      	ble.n	8005006 <OS_StartOS+0x1a>
    }

    /* Init system tick timer */
    OS_InitTimer();
 800507e:	f000 f91f 	bl	80052c0 <OS_InitTimer>

    /* Start all autostart task */
    for(int tcbIdx = 0; tcbIdx < NB_OF_TASKS; tcbIdx++)
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e025      	b.n	80050d4 <OS_StartOS+0xe8>
    {
      if(OCB_Cfg.pTcb[tcbIdx]->Autostart == OS_AUTOSTART && OCB_Cfg.pTcb[tcbIdx]->TaskStatus == SUSPENDED)
 8005088:	4b20      	ldr	r3, [pc, #128]	@ (800510c <OS_StartOS+0x120>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d119      	bne.n	80050ce <OS_StartOS+0xe2>
 800509a:	4b1c      	ldr	r3, [pc, #112]	@ (800510c <OS_StartOS+0x120>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	7e1b      	ldrb	r3, [r3, #24]
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d110      	bne.n	80050ce <OS_StartOS+0xe2>
      {
        /* Switch to PRE_READY state*/
        OCB_Cfg.pTcb[tcbIdx]->TaskStatus = PRE_READY;
 80050ac:	4b17      	ldr	r3, [pc, #92]	@ (800510c <OS_StartOS+0x120>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2200      	movs	r2, #0
 80050ba:	761a      	strb	r2, [r3, #24]

        /* Update number of activation */
        OCB_Cfg.pTcb[tcbIdx]->NbOfActiv--;
 80050bc:	4b13      	ldr	r3, [pc, #76]	@ (800510c <OS_StartOS+0x120>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ca:	3a01      	subs	r2, #1
 80050cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    for(int tcbIdx = 0; tcbIdx < NB_OF_TASKS; tcbIdx++)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	ddd6      	ble.n	8005088 <OS_StartOS+0x9c>
    #if(STARTUPHOOK)
    StartupHook();
    #endif

    /* Start system tick timer */
    OS_StartTimer();
 80050da:	f000 f8f7 	bl	80052cc <OS_StartTimer>

    /* Lock the dispatcher */
    OCB_Cfg.OsLockDispatcher = 1;
 80050de:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <OS_StartOS+0x120>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Scheduler */
    (void)OS_Schedule();
 80050e4:	f000 f818 	bl	8005118 <OS_Schedule>

    /* Unlock the dispatcher */
    OCB_Cfg.OsLockDispatcher = 0;
 80050e8:	4b08      	ldr	r3, [pc, #32]	@ (800510c <OS_StartOS+0x120>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Save the system stack ptr */
    OsGetCurrentSP(&OCB_Cfg.OsSystemStackPtr);    
 80050ee:	4808      	ldr	r0, [pc, #32]	@ (8005110 <OS_StartOS+0x124>)
 80050f0:	f000 fc38 	bl	8005964 <OsGetCurrentSP>

    /* Call the dispatcher */
    OS_DISPATCH();
 80050f4:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <OS_StartOS+0x128>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a06      	ldr	r2, [pc, #24]	@ (8005114 <OS_StartOS+0x128>)
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	6013      	str	r3, [r2, #0]
  }

  /* Infinite loop */
  for(;;);
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <OS_StartOS+0x114>
    return;
 8005104:	bf00      	nop
}
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000108 	.word	0x20000108
 8005110:	20000134 	.word	0x20000134
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <OS_Schedule>:
/// \param  void
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_Schedule(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
  if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS && 
 800511e:	4b66      	ldr	r3, [pc, #408]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d822      	bhi.n	800516c <OS_Schedule+0x54>
     OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->CeilingPrio != 0 &&
 8005126:	4b64      	ldr	r3, [pc, #400]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b63      	ldr	r3, [pc, #396]	@ (80052b8 <OS_Schedule+0x1a0>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6a1b      	ldr	r3, [r3, #32]
  if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS && 
 8005136:	2b00      	cmp	r3, #0
 8005138:	d018      	beq.n	800516c <OS_Schedule+0x54>
     OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio != OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->FixedPrio &&
 800513a:	4b5f      	ldr	r3, [pc, #380]	@ (80052b8 <OS_Schedule+0x1a0>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b5e      	ldr	r3, [pc, #376]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	4b5b      	ldr	r3, [pc, #364]	@ (80052b8 <OS_Schedule+0x1a0>)
 800514c:	6819      	ldr	r1, [r3, #0]
 800514e:	4b5a      	ldr	r3, [pc, #360]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
     OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->CeilingPrio != 0 &&
 800515a:	429a      	cmp	r2, r3
 800515c:	d006      	beq.n	800516c <OS_Schedule+0x54>
     FALSE == OsIsCat2IntContext())
 800515e:	f000 fb39 	bl	80057d4 <OsIsCat2IntContext>
 8005162:	4603      	mov	r3, r0
     OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio != OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->FixedPrio &&
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <OS_Schedule+0x54>
  {
    return(E_OS_RESOURCE);
 8005168:	2306      	movs	r3, #6
 800516a:	e0a1      	b.n	80052b0 <OS_Schedule+0x198>
  }
  else if(TRUE == OsIsInterruptContext() && FALSE == OsIsCat2IntContext()) /* Cat1 Interrupt */
 800516c:	f000 fb1c 	bl	80057a8 <OsIsInterruptContext>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d106      	bne.n	8005184 <OS_Schedule+0x6c>
 8005176:	f000 fb2d 	bl	80057d4 <OsIsCat2IntContext>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <OS_Schedule+0x6c>
  {
    return(E_OS_CALLEVEL);
 8005180:	2302      	movs	r3, #2
 8005182:	e095      	b.n	80052b0 <OS_Schedule+0x198>
  }
  else
  {
    sint32 HighPrio = -1;
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	607b      	str	r3, [r7, #4]
    OCB_Cfg.HighPrioReadyTaskIdx = INVALID_TASK;
 800518a:	4b4b      	ldr	r3, [pc, #300]	@ (80052b8 <OS_Schedule+0x1a0>)
 800518c:	2202      	movs	r2, #2
 800518e:	60da      	str	r2, [r3, #12]

    /* Starting a critical section */
    DISABLE_INTERRUPTS();
 8005190:	b672      	cpsid	i

    for(int tcbIdx = 0; tcbIdx < NB_OF_TASKS; tcbIdx++)
 8005192:	2300      	movs	r3, #0
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	e033      	b.n	8005200 <OS_Schedule+0xe8>
    {
      if(OCB_Cfg.pTcb[tcbIdx]->TaskStatus == PRE_READY || 
 8005198:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <OS_Schedule+0x1a0>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	7e1b      	ldrb	r3, [r3, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d011      	beq.n	80051ce <OS_Schedule+0xb6>
         OCB_Cfg.pTcb[tcbIdx]->TaskStatus == READY     || 
 80051aa:	4b43      	ldr	r3, [pc, #268]	@ (80052b8 <OS_Schedule+0x1a0>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	7e1b      	ldrb	r3, [r3, #24]
      if(OCB_Cfg.pTcb[tcbIdx]->TaskStatus == PRE_READY || 
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d008      	beq.n	80051ce <OS_Schedule+0xb6>
         OCB_Cfg.pTcb[tcbIdx]->TaskStatus == RUNNING)
 80051bc:	4b3e      	ldr	r3, [pc, #248]	@ (80052b8 <OS_Schedule+0x1a0>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	7e1b      	ldrb	r3, [r3, #24]
         OCB_Cfg.pTcb[tcbIdx]->TaskStatus == READY     || 
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d115      	bne.n	80051fa <OS_Schedule+0xe2>
      {
        if((sint32)OCB_Cfg.pTcb[tcbIdx]->Prio > HighPrio)
 80051ce:	4b3a      	ldr	r3, [pc, #232]	@ (80052b8 <OS_Schedule+0x1a0>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	461a      	mov	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4293      	cmp	r3, r2
 80051e2:	da0a      	bge.n	80051fa <OS_Schedule+0xe2>
        {
          HighPrio = (sint32) OCB_Cfg.pTcb[tcbIdx]->Prio;
 80051e4:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <OS_Schedule+0x1a0>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	607b      	str	r3, [r7, #4]
          OCB_Cfg.HighPrioReadyTaskIdx = (uint32) tcbIdx;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4a30      	ldr	r2, [pc, #192]	@ (80052b8 <OS_Schedule+0x1a0>)
 80051f8:	60d3      	str	r3, [r2, #12]
    for(int tcbIdx = 0; tcbIdx < NB_OF_TASKS; tcbIdx++)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b01      	cmp	r3, #1
 8005204:	ddc8      	ble.n	8005198 <OS_Schedule+0x80>
        }
      }
    }

    /* Ending the critical section */
    ENABLE_INTERRUPTS();
 8005206:	b662      	cpsie	i

    if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS && OCB_Cfg.HighPrioReadyTaskIdx < NB_OF_TASKS)
 8005208:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <OS_Schedule+0x1a0>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d83c      	bhi.n	800528a <OS_Schedule+0x172>
 8005210:	4b29      	ldr	r3, [pc, #164]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d838      	bhi.n	800528a <OS_Schedule+0x172>
    {
      if(HighPrio > (sint32)(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio) ||
 8005218:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <OS_Schedule+0x1a0>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4b26      	ldr	r3, [pc, #152]	@ (80052b8 <OS_Schedule+0x1a0>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	461a      	mov	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4293      	cmp	r3, r2
 800522e:	dc13      	bgt.n	8005258 <OS_Schedule+0x140>
         OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus == WAITING             ||
 8005230:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b20      	ldr	r3, [pc, #128]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	7e1b      	ldrb	r3, [r3, #24]
      if(HighPrio > (sint32)(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio) ||
 8005240:	2b02      	cmp	r3, #2
 8005242:	d009      	beq.n	8005258 <OS_Schedule+0x140>
         OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus == SUSPENDED
 8005244:	4b1c      	ldr	r3, [pc, #112]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <OS_Schedule+0x1a0>)
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	7e1b      	ldrb	r3, [r3, #24]
         OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus == WAITING             ||
 8005254:	2b04      	cmp	r3, #4
 8005256:	d129      	bne.n	80052ac <OS_Schedule+0x194>
        /* Call PostTaskHook */
        #if(POSTTASKHOOK)
        PostTaskHook();
        #endif

        if(OCB_Cfg.OsIsrInterruptLevel == 0 && OCB_Cfg.OsLockDispatcher == 0)
 8005258:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <OS_Schedule+0x1a0>)
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <OS_Schedule+0x15e>
 8005260:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <OS_Schedule+0x15e>
        {
          /* Call the dispatcher */
          OS_DISPATCH();
 8005268:	4b14      	ldr	r3, [pc, #80]	@ (80052bc <OS_Schedule+0x1a4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <OS_Schedule+0x1a4>)
 800526e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005272:	6013      	str	r3, [r2, #0]
      if(HighPrio > (sint32)(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio) ||
 8005274:	e01a      	b.n	80052ac <OS_Schedule+0x194>
        }
        else if(OCB_Cfg.OsLockDispatcher == 1)
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <OS_Schedule+0x16a>
        {
          return(E_OK);
 800527e:	2300      	movs	r3, #0
 8005280:	e016      	b.n	80052b0 <OS_Schedule+0x198>
        else
        {
          /*  OS_Schedule is called in interrupt context  */
          /*  the Dispatcher will be executed later after */
          /*  the execution of the ISR                    */
          OCB_Cfg.OsIsrCallDispatcher = 1;
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005284:	2201      	movs	r2, #1
 8005286:	621a      	str	r2, [r3, #32]
      if(HighPrio > (sint32)(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio) ||
 8005288:	e010      	b.n	80052ac <OS_Schedule+0x194>
    {
      /* No task is active or ready */
      /* Kernel will switch to system stack and run OS_IdleLoop */

      /* Call PostTaskHook */
      if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 800528a:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <OS_Schedule+0x1a0>)
 800528c:	691b      	ldr	r3, [r3, #16]
        #if(POSTTASKHOOK)
        PostTaskHook();
        #endif
      }

      if(OCB_Cfg.OsIsrInterruptLevel == 0)
 800528e:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <OS_Schedule+0x1a0>)
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <OS_Schedule+0x18c>
      {
        /* OS_Schedule is called outside an interrupt context */
        /* Call the dispatcher */
        OS_DISPATCH();
 8005296:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <OS_Schedule+0x1a4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a08      	ldr	r2, [pc, #32]	@ (80052bc <OS_Schedule+0x1a4>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e004      	b.n	80052ae <OS_Schedule+0x196>
      else
      {
        /*  OS_Schedule is called in interrupt context  */
        /*  the Dispatcher will be executed later after */
        /*  the execution of the ISR                    */
        OCB_Cfg.OsIsrCallDispatcher = 1;
 80052a4:	4b04      	ldr	r3, [pc, #16]	@ (80052b8 <OS_Schedule+0x1a0>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	621a      	str	r2, [r3, #32]
 80052aa:	e000      	b.n	80052ae <OS_Schedule+0x196>
      if(HighPrio > (sint32)(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio) ||
 80052ac:	bf00      	nop
      }
    }
    return(E_OK);
 80052ae:	2300      	movs	r3, #0
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000108 	.word	0x20000108
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <OS_InitTimer>:
/// \param  void
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
static void OS_InitTimer(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  SysTickTimer_Init();
 80052c4:	f000 fd18 	bl	8005cf8 <SysTickTimer_Init>
}
 80052c8:	bf00      	nop
 80052ca:	bd80      	pop	{r7, pc}

080052cc <OS_StartTimer>:
/// \param  void
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
static void OS_StartTimer(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  SysTickTimer_Start();
 80052d0:	f000 fd38 	bl	8005d44 <SysTickTimer_Start>
}
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <OS_Dispatcher>:
/// \param  uint32 StackPtr: Current stack pointer of the active task
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
uint32 OS_Dispatcher(uint32 StackPtr)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Save the current stack pointer of the running task before switching the context */
  if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 80052e0:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <OS_Dispatcher+0x100>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d808      	bhi.n	80052fa <OS_Dispatcher+0x22>
  {
    OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pCurrentStackPointer = StackPtr;
 80052e8:	4b3b      	ldr	r3, [pc, #236]	@ (80053d8 <OS_Dispatcher+0x100>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <OS_Dispatcher+0x100>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	615a      	str	r2, [r3, #20]
  }

  /* Set the new current task */
  OCB_Cfg.CurrentTaskIdx = OCB_Cfg.HighPrioReadyTaskIdx;
 80052fa:	4b37      	ldr	r3, [pc, #220]	@ (80053d8 <OS_Dispatcher+0x100>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	4a36      	ldr	r2, [pc, #216]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005300:	6113      	str	r3, [r2, #16]

  if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 8005302:	4b35      	ldr	r3, [pc, #212]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d850      	bhi.n	80053ac <OS_Dispatcher+0xd4>
  {
    /* check if we need to create a new stack frame for the new task */
    if(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus == PRE_READY)
 800530a:	4b33      	ldr	r3, [pc, #204]	@ (80053d8 <OS_Dispatcher+0x100>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b32      	ldr	r3, [pc, #200]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	7e1b      	ldrb	r3, [r3, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d132      	bne.n	8005384 <OS_Dispatcher+0xac>
    {

      /* cupdate the current task state */
      OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus = RUNNING;
 800531e:	4b2e      	ldr	r3, [pc, #184]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b2d      	ldr	r3, [pc, #180]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2203      	movs	r2, #3
 800532e:	761a      	strb	r2, [r3, #24]
      #if(PRETASKHOOK)
      PreTaskHook();
      #endif

      /* Create Stack Frame for the 1st execution */
      uint32 NewStackFramePtr = OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pstack_top;
 8005330:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4b28      	ldr	r3, [pc, #160]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	60fb      	str	r3, [r7, #12]
      pFunc   NewThread = OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->function;
 8005342:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60bb      	str	r3, [r7, #8]

      /* CREATE NEW CONTEXT */
      OsCreateNewContext(NewStackFramePtr, NewThread);
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f842 	bl	80053e0 <OsCreateNewContext>

      /* Calculate the new stack ptr */
      NewStackFramePtr = (uint32)((uint32)(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pstack_top) - (uint32)0x40);  
 800535c:	4b1e      	ldr	r3, [pc, #120]	@ (80053d8 <OS_Dispatcher+0x100>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	3b40      	subs	r3, #64	@ 0x40
 800536e:	60fb      	str	r3, [r7, #12]

      /* Save the new stack ptr */    
      OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pCurrentStackPointer = NewStackFramePtr;
 8005370:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b18      	ldr	r3, [pc, #96]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	615a      	str	r2, [r3, #20]
 8005382:	e01d      	b.n	80053c0 <OS_Dispatcher+0xe8>
    }
    else if(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus == READY)
 8005384:	4b14      	ldr	r3, [pc, #80]	@ (80053d8 <OS_Dispatcher+0x100>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b13      	ldr	r3, [pc, #76]	@ (80053d8 <OS_Dispatcher+0x100>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	7e1b      	ldrb	r3, [r3, #24]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d113      	bne.n	80053c0 <OS_Dispatcher+0xe8>
    {
      OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus = RUNNING;
 8005398:	4b0f      	ldr	r3, [pc, #60]	@ (80053d8 <OS_Dispatcher+0x100>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <OS_Dispatcher+0x100>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2203      	movs	r2, #3
 80053a8:	761a      	strb	r2, [r3, #24]
 80053aa:	e009      	b.n	80053c0 <OS_Dispatcher+0xe8>
    }
  }
  else
  {
    /* Create new context for os Idle loop and switch to it using the system stack */
    OsCreateNewContext((uint32)OCB_Cfg.OsSystemStackPtr, OS_IdleLoop);
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <OS_Dispatcher+0x100>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	490a      	ldr	r1, [pc, #40]	@ (80053dc <OS_Dispatcher+0x104>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f814 	bl	80053e0 <OsCreateNewContext>

    return(OCB_Cfg.OsSystemStackPtr - 0x40);
 80053b8:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <OS_Dispatcher+0x100>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	3b40      	subs	r3, #64	@ 0x40
 80053be:	e007      	b.n	80053d0 <OS_Dispatcher+0xf8>
  }

  return(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pCurrentStackPointer);
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <OS_Dispatcher+0x100>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <OS_Dispatcher+0x100>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000108 	.word	0x20000108
 80053dc:	08005751 	.word	0x08005751

080053e0 <OsCreateNewContext>:
///            pFunc TaskFuncPtr: task function pointer
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
static void OsCreateNewContext(uint32 StackFramePtr, pFunc TaskFuncPtr)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  *(volatile uint32*)(StackFramePtr - 0x00) = (uint32)0x01000000;   //xPSR
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053f0:	601a      	str	r2, [r3, #0]
  *(volatile uint32*)(StackFramePtr - 0x04) = (uint32)TaskFuncPtr;  //PC
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3b04      	subs	r3, #4
 80053f6:	461a      	mov	r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x08) = (uint32)TaskFuncPtr;  //LR
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3b08      	subs	r3, #8
 8005400:	461a      	mov	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x0C) = (uint32)0x00;          //r12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3b0c      	subs	r3, #12
 800540a:	461a      	mov	r2, r3
 800540c:	2300      	movs	r3, #0
 800540e:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x10) = (uint32)0x00;         //r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3b10      	subs	r3, #16
 8005414:	461a      	mov	r2, r3
 8005416:	2300      	movs	r3, #0
 8005418:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x14) = (uint32)0x00;         //r2
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3b14      	subs	r3, #20
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x18) = (uint32)0x00;         //r1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3b18      	subs	r3, #24
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x1C) = (uint32)0x00;         //r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3b1c      	subs	r3, #28
 8005432:	461a      	mov	r2, r3
 8005434:	2300      	movs	r3, #0
 8005436:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x20) = (uint32)0xFFFFFFF9;   //LR --> Return from TRAP  
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3b20      	subs	r3, #32
 800543c:	461a      	mov	r2, r3
 800543e:	f06f 0306 	mvn.w	r3, #6
 8005442:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x24) = (uint32)0x00;         //r11
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3b24      	subs	r3, #36	@ 0x24
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x28) = (uint32)0x00;         //r10
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3b28      	subs	r3, #40	@ 0x28
 8005452:	461a      	mov	r2, r3
 8005454:	2300      	movs	r3, #0
 8005456:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x2C) = (uint32)0x00;         //r9
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3b2c      	subs	r3, #44	@ 0x2c
 800545c:	461a      	mov	r2, r3
 800545e:	2300      	movs	r3, #0
 8005460:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x30) = (uint32)0x00;         //r8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3b30      	subs	r3, #48	@ 0x30
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x34) = (uint32)0x00;         //r7
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3b34      	subs	r3, #52	@ 0x34
 8005470:	461a      	mov	r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x38) = (uint32)0x00;         //r6
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3b38      	subs	r3, #56	@ 0x38
 800547a:	461a      	mov	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x3C) = (uint32)0x00;         //r5
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3b3c      	subs	r3, #60	@ 0x3c
 8005484:	461a      	mov	r2, r3
 8005486:	2300      	movs	r3, #0
 8005488:	6013      	str	r3, [r2, #0]
  *(volatile uint32*)(StackFramePtr - 0x40) = (uint32)0x00;         //r4      
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3b40      	subs	r3, #64	@ 0x40
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6013      	str	r3, [r2, #0]
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <OsSysTickTimerIsr>:
/// \param  void
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
ISR(SysTickTimer)  
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
  OCB_Cfg.OsSysTickCounter++;
 80054a6:	4b79      	ldr	r3, [pc, #484]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80054a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80054ac:	1c50      	adds	r0, r2, #1
 80054ae:	f143 0100 	adc.w	r1, r3, #0
 80054b2:	4b76      	ldr	r3, [pc, #472]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80054b4:	e9c3 0106 	strd	r0, r1, [r3, #24]

  for(int AlarmID =0; AlarmID < NB_OF_ALARMS; AlarmID++)
 80054b8:	2300      	movs	r3, #0
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	e0dd      	b.n	800567a <OsSysTickTimerIsr+0x1da>
  {
    if(OCB_Cfg.pAlarm[AlarmID]->AlarmCheckPoint <= (uint32)OCB_Cfg.OsSysTickCounter)
 80054be:	4b73      	ldr	r3, [pc, #460]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69d9      	ldr	r1, [r3, #28]
 80054cc:	4b6f      	ldr	r3, [pc, #444]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80054ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80054d2:	4613      	mov	r3, r2
 80054d4:	4299      	cmp	r1, r3
 80054d6:	f200 80cd 	bhi.w	8005674 <OsSysTickTimerIsr+0x1d4>
    {
      /* Update Timers */
      if(OCB_Cfg.pAlarm[AlarmID]->AlarmCategory == ALARM_RELATIVE &&  OCB_Cfg.pAlarm[AlarmID]->Alarmtype == ALARM_ONE_SHOT)
 80054da:	4b6c      	ldr	r3, [pc, #432]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	7e9b      	ldrb	r3, [r3, #26]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d111      	bne.n	8005510 <OsSysTickTimerIsr+0x70>
 80054ec:	4b67      	ldr	r3, [pc, #412]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	7e5b      	ldrb	r3, [r3, #25]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d108      	bne.n	8005510 <OsSysTickTimerIsr+0x70>
      {
        OCB_Cfg.pAlarm[AlarmID]->AlarmCheckPoint = 0;
 80054fe:	4b63      	ldr	r3, [pc, #396]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	61da      	str	r2, [r3, #28]
 800550e:	e068      	b.n	80055e2 <OsSysTickTimerIsr+0x142>
      }
      else if(OCB_Cfg.pAlarm[AlarmID]->AlarmCategory == ALARM_RELATIVE &&  OCB_Cfg.pAlarm[AlarmID]->Alarmtype == ALARM_CYCLIC)
 8005510:	4b5e      	ldr	r3, [pc, #376]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	7e9b      	ldrb	r3, [r3, #26]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d124      	bne.n	800556c <OsSysTickTimerIsr+0xcc>
 8005522:	4b5a      	ldr	r3, [pc, #360]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	7e5b      	ldrb	r3, [r3, #25]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d11b      	bne.n	800556c <OsSysTickTimerIsr+0xcc>
      {
        OCB_Cfg.pAlarm[AlarmID]->AlarmCheckPoint = OCB_Cfg.pAlarm[AlarmID]->InitTicks + OCB_Cfg.pAlarm[AlarmID]->InitCycles + (uint32)OCB_Cfg.OsSysTickCounter;
 8005534:	4b55      	ldr	r3, [pc, #340]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b52      	ldr	r3, [pc, #328]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005544:	6859      	ldr	r1, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	18d1      	adds	r1, r2, r3
 8005552:	4b4e      	ldr	r3, [pc, #312]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005554:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005558:	4610      	mov	r0, r2
 800555a:	4b4c      	ldr	r3, [pc, #304]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	180a      	adds	r2, r1, r0
 8005568:	61da      	str	r2, [r3, #28]
 800556a:	e03a      	b.n	80055e2 <OsSysTickTimerIsr+0x142>
      }
      else if(OCB_Cfg.pAlarm[AlarmID]->AlarmCategory == ALARM_ABSOLUTE &&  OCB_Cfg.pAlarm[AlarmID]->Alarmtype == ALARM_ONE_SHOT)
 800556c:	4b47      	ldr	r3, [pc, #284]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	7e9b      	ldrb	r3, [r3, #26]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d111      	bne.n	80055a2 <OsSysTickTimerIsr+0x102>
 800557e:	4b43      	ldr	r3, [pc, #268]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	7e5b      	ldrb	r3, [r3, #25]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <OsSysTickTimerIsr+0x102>
      {
        OCB_Cfg.pAlarm[AlarmID]->AlarmCheckPoint = 0;
 8005590:	4b3e      	ldr	r3, [pc, #248]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2200      	movs	r2, #0
 800559e:	61da      	str	r2, [r3, #28]
 80055a0:	e01f      	b.n	80055e2 <OsSysTickTimerIsr+0x142>
      }
      else if(OCB_Cfg.pAlarm[AlarmID]->AlarmCategory == ALARM_ABSOLUTE &&  OCB_Cfg.pAlarm[AlarmID]->Alarmtype == ALARM_CYCLIC)
 80055a2:	4b3a      	ldr	r3, [pc, #232]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	7e9b      	ldrb	r3, [r3, #26]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d116      	bne.n	80055e2 <OsSysTickTimerIsr+0x142>
 80055b4:	4b35      	ldr	r3, [pc, #212]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	7e5b      	ldrb	r3, [r3, #25]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d10d      	bne.n	80055e2 <OsSysTickTimerIsr+0x142>
      {
        OCB_Cfg.pAlarm[AlarmID]->AlarmCheckPoint = OCB_Cfg.pAlarm[AlarmID]->InitCycles;
 80055c6:	4b31      	ldr	r3, [pc, #196]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b2e      	ldr	r3, [pc, #184]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6852      	ldr	r2, [r2, #4]
 80055e0:	61da      	str	r2, [r3, #28]
      {
        /* Do Nothing */
      }

      /* Execute Action */
      if(OCB_Cfg.pAlarm[AlarmID]->Action == ALARM_SET_EVENT)
 80055e2:	4b2a      	ldr	r3, [pc, #168]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	7c1b      	ldrb	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d111      	bne.n	8005618 <OsSysTickTimerIsr+0x178>
      {
        OS_SetEvent((OsTaskType)OCB_Cfg.pAlarm[AlarmID]->TaskId, (OsEventMaskType)OCB_Cfg.pAlarm[AlarmID]->Event);
 80055f4:	4b25      	ldr	r3, [pc, #148]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68d8      	ldr	r0, [r3, #12]
 8005602:	4b22      	ldr	r3, [pc, #136]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4619      	mov	r1, r3
 8005612:	f000 f9c3 	bl	800599c <OS_SetEvent>
 8005616:	e02d      	b.n	8005674 <OsSysTickTimerIsr+0x1d4>
      }
      else if(OCB_Cfg.pAlarm[AlarmID]->Action == ALARM_ACTIVE_TASK)
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	7c1b      	ldrb	r3, [r3, #16]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10a      	bne.n	8005640 <OsSysTickTimerIsr+0x1a0>
      {
        OS_ActivateTask((OsTaskType)OCB_Cfg.pAlarm[AlarmID]->TaskId);
 800562a:	4b18      	ldr	r3, [pc, #96]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fadb 	bl	8005bf4 <OS_ActivateTask>
 800563e:	e019      	b.n	8005674 <OsSysTickTimerIsr+0x1d4>
      }
      else if(OCB_Cfg.pAlarm[AlarmID]->Action == ALARM_CALLBACK)
 8005640:	4b12      	ldr	r3, [pc, #72]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	7c1b      	ldrb	r3, [r3, #16]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d110      	bne.n	8005674 <OsSysTickTimerIsr+0x1d4>
      {
        if(OCB_Cfg.pAlarm[AlarmID]->CallBackFunc != (void*)0)
 8005652:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <OsSysTickTimerIsr+0x1d4>
        {
          OCB_Cfg.pAlarm[AlarmID]->CallBackFunc();
 8005664:	4b09      	ldr	r3, [pc, #36]	@ (800568c <OsSysTickTimerIsr+0x1ec>)
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4798      	blx	r3
  for(int AlarmID =0; AlarmID < NB_OF_ALARMS; AlarmID++)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3301      	adds	r3, #1
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b01      	cmp	r3, #1
 800567e:	f77f af1e 	ble.w	80054be <OsSysTickTimerIsr+0x1e>
      {
        /* Do nothing */
      }
    }
  }
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000108 	.word	0x20000108

08005690 <OsStoreStackPointer>:
/// \param  uint32 StackPtrValue: Current stack pointer
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
void OsStoreStackPointer(uint32 StackPtrValue)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  OCB_Cfg.OsIsrInterruptLevel = 1;
 8005698:	4b0c      	ldr	r3, [pc, #48]	@ (80056cc <OsStoreStackPointer+0x3c>)
 800569a:	2201      	movs	r2, #1
 800569c:	629a      	str	r2, [r3, #40]	@ 0x28

  if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 800569e:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <OsStoreStackPointer+0x3c>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d809      	bhi.n	80056ba <OsStoreStackPointer+0x2a>
  {
    OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pCurrentStackPointer = StackPtrValue;
 80056a6:	4b09      	ldr	r3, [pc, #36]	@ (80056cc <OsStoreStackPointer+0x3c>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b08      	ldr	r3, [pc, #32]	@ (80056cc <OsStoreStackPointer+0x3c>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	615a      	str	r2, [r3, #20]
  }
  else
  {
    OCB_Cfg.OsCurrentSystemStackPtr = StackPtrValue;
  }
}
 80056b8:	e002      	b.n	80056c0 <OsStoreStackPointer+0x30>
    OCB_Cfg.OsCurrentSystemStackPtr = StackPtrValue;
 80056ba:	4a04      	ldr	r2, [pc, #16]	@ (80056cc <OsStoreStackPointer+0x3c>)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000108 	.word	0x20000108

080056d0 <OsGetSavedStackPointer>:
/// \param  void
///
/// \return uint32 : saved stack pointer
//------------------------------------------------------------------------------------------------------------------
uint32 OsGetSavedStackPointer(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  OCB_Cfg.OsIsrInterruptLevel = 0;
 80056d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <OsGetSavedStackPointer+0x34>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 80056da:	4b0a      	ldr	r3, [pc, #40]	@ (8005704 <OsGetSavedStackPointer+0x34>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d808      	bhi.n	80056f4 <OsGetSavedStackPointer+0x24>
  {
    return(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pCurrentStackPointer);
 80056e2:	4b08      	ldr	r3, [pc, #32]	@ (8005704 <OsGetSavedStackPointer+0x34>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b07      	ldr	r3, [pc, #28]	@ (8005704 <OsGetSavedStackPointer+0x34>)
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	e001      	b.n	80056f8 <OsGetSavedStackPointer+0x28>
  }
  else
  {
    return(OCB_Cfg.OsCurrentSystemStackPtr);
 80056f4:	4b03      	ldr	r3, [pc, #12]	@ (8005704 <OsGetSavedStackPointer+0x34>)
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000108 	.word	0x20000108

08005708 <OsIsrCallDispatch>:
/// \param  uint32 StackPtr: Current stack pointer
///
/// \return uint32 : The new stack pointer after switching the context otherwise the last saved stack pointer
//------------------------------------------------------------------------------------------------------------------
uint32 OsIsrCallDispatch(uint32 StackPtr)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  if(OCB_Cfg.OsIsrCallDispatcher == 1)
 8005710:	4b0e      	ldr	r3, [pc, #56]	@ (800574c <OsIsrCallDispatch+0x44>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <OsIsrCallDispatch+0x20>
  {
    OCB_Cfg.OsIsrCallDispatcher = 0;
 8005718:	4b0c      	ldr	r3, [pc, #48]	@ (800574c <OsIsrCallDispatch+0x44>)
 800571a:	2200      	movs	r2, #0
 800571c:	621a      	str	r2, [r3, #32]

    return(OS_Dispatcher(StackPtr));
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fdda 	bl	80052d8 <OS_Dispatcher>
 8005724:	4603      	mov	r3, r0
 8005726:	e00d      	b.n	8005744 <OsIsrCallDispatch+0x3c>
  }
  if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 8005728:	4b08      	ldr	r3, [pc, #32]	@ (800574c <OsIsrCallDispatch+0x44>)
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d808      	bhi.n	8005742 <OsIsrCallDispatch+0x3a>
  {
    return(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->pCurrentStackPointer);
 8005730:	4b06      	ldr	r3, [pc, #24]	@ (800574c <OsIsrCallDispatch+0x44>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b05      	ldr	r3, [pc, #20]	@ (800574c <OsIsrCallDispatch+0x44>)
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	e000      	b.n	8005744 <OsIsrCallDispatch+0x3c>
  }
  else
  {
    return(StackPtr);
 8005742:	687b      	ldr	r3, [r7, #4]
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000108 	.word	0x20000108

08005750 <OS_IdleLoop>:
/// \param  void
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
static void OS_IdleLoop(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* No active task found */
  for(;;);
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <OS_IdleLoop+0x4>

08005758 <OsRunCat2Isr>:
/// \param  void
///
/// \return void
//------------------------------------------------------------------------------------------------------------------
void OsRunCat2Isr(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
  uint32 CurrentPsr = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	603b      	str	r3, [r7, #0]

  /* Get program status register */
  OsGetPSR(&CurrentPsr);
 8005762:	463b      	mov	r3, r7
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f901 	bl	800596c <OsGetPSR>

  for(uint32 IsrIdx=0; IsrIdx < NB_OF_ISR; IsrIdx++)
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	e012      	b.n	8005796 <OsRunCat2Isr+0x3e>
  {
    if(IsrLookupTable[IsrIdx].IsrNum == (uint32)(CurrentPsr & EXCEPTION_CODE_MASK))
 8005770:	4a0c      	ldr	r2, [pc, #48]	@ (80057a4 <OsRunCat2Isr+0x4c>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	429a      	cmp	r2, r3
 8005780:	d106      	bne.n	8005790 <OsRunCat2Isr+0x38>
    {
      IsrLookupTable[IsrIdx].IsrFunc();
 8005782:	4a08      	ldr	r2, [pc, #32]	@ (80057a4 <OsRunCat2Isr+0x4c>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4798      	blx	r3
 800578e:	e005      	b.n	800579c <OsRunCat2Isr+0x44>
  for(uint32 IsrIdx=0; IsrIdx < NB_OF_ISR; IsrIdx++)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3301      	adds	r3, #1
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0e9      	beq.n	8005770 <OsRunCat2Isr+0x18>

      return;
    }
  }
}
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200000d4 	.word	0x200000d4

080057a8 <OsIsInterruptContext>:
/// \param  void
///
/// \return boolean: TRUE -> Cpu in interrupt context, FALSE -> Cpu not in interrupt context
//------------------------------------------------------------------------------------------------------------------
boolean OsIsInterruptContext(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
  uint32 CurrentPsr = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	607b      	str	r3, [r7, #4]

  OsGetPSR(&CurrentPsr);
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f8d9 	bl	800596c <OsGetPSR>

  return((CurrentPsr & EXCEPTION_CODE_MASK) == 0 ? FALSE : TRUE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <OsIsCat2IntContext>:
/// \param  void
///
/// \return boolean: TRUE -> Category 2 interrupt context, FALSE -> none category 2 interrupt context
//------------------------------------------------------------------------------------------------------------------
boolean OsIsCat2IntContext(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return((boolean)OCB_Cfg.OsIsrInterruptLevel);
 80057d8:	4b03      	ldr	r3, [pc, #12]	@ (80057e8 <OsIsCat2IntContext+0x14>)
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	b2db      	uxtb	r3, r3
}
 80057de:	4618      	mov	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20000108 	.word	0x20000108

080057ec <OS_SetRelAlarm>:
///          OsTickType cycle     : Cycle value in case of cyclic alarm. In case of single alarms, it shall be zero.
///
/// \return OsStatusType
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_SetRelAlarm(OsAlarmType AlarmID, OsTickType increment, OsTickType cycle)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  if(AlarmID < NB_OF_ALARMS)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	f200 809c 	bhi.w	8005938 <OS_SetRelAlarm+0x14c>
  {
    if(cycle == 0 && increment > 0 && OCB_Cfg.pAlarm[AlarmID]->Status == ALARM_FREE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d142      	bne.n	800588c <OS_SetRelAlarm+0xa0>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d03f      	beq.n	800588c <OS_SetRelAlarm+0xa0>
 800580c:	4b4e      	ldr	r3, [pc, #312]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	7e1b      	ldrb	r3, [r3, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d136      	bne.n	800588c <OS_SetRelAlarm+0xa0>
    {
      /* One shot alarm */
      OCB_Cfg.pAlarm[AlarmID]->Alarmtype       = ALARM_ONE_SHOT;
 800581e:	4b4a      	ldr	r3, [pc, #296]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2200      	movs	r2, #0
 800582c:	765a      	strb	r2, [r3, #25]
      OCB_Cfg.pAlarm[AlarmID]->AlarmCategory   = ALARM_RELATIVE;
 800582e:	4b46      	ldr	r3, [pc, #280]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	769a      	strb	r2, [r3, #26]
      OCB_Cfg.pAlarm[AlarmID]->InitCycles      = 0;
 800583e:	4b42      	ldr	r3, [pc, #264]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	605a      	str	r2, [r3, #4]
      OCB_Cfg.pAlarm[AlarmID]->InitTicks       = increment;
 800584e:	4b3e      	ldr	r3, [pc, #248]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	601a      	str	r2, [r3, #0]
      OCB_Cfg.pAlarm[AlarmID]->Status          = ALARM_BUSY;
 800585e:	4b3a      	ldr	r3, [pc, #232]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2201      	movs	r2, #1
 800586c:	761a      	strb	r2, [r3, #24]
      OCB_Cfg.pAlarm[AlarmID]->AlarmCheckPoint = increment + (uint32)OCB_Cfg.OsSysTickCounter;
 800586e:	4b36      	ldr	r3, [pc, #216]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005870:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005874:	4611      	mov	r1, r2
 8005876:	4b34      	ldr	r3, [pc, #208]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	440a      	add	r2, r1
 8005886:	61da      	str	r2, [r3, #28]
      return(E_OK);
 8005888:	2300      	movs	r3, #0
 800588a:	e056      	b.n	800593a <OS_SetRelAlarm+0x14e>
    }
    else if (cycle != 0 &&  cycle >= increment && OCB_Cfg.pAlarm[AlarmID]->Status == ALARM_FREE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d045      	beq.n	800591e <OS_SetRelAlarm+0x132>
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	429a      	cmp	r2, r3
 8005898:	d341      	bcc.n	800591e <OS_SetRelAlarm+0x132>
 800589a:	4b2b      	ldr	r3, [pc, #172]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	7e1b      	ldrb	r3, [r3, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d138      	bne.n	800591e <OS_SetRelAlarm+0x132>
    {
      /* Cyclic alarm */
      OCB_Cfg.pAlarm[AlarmID]->Alarmtype       = ALARM_CYCLIC;
 80058ac:	4b26      	ldr	r3, [pc, #152]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2201      	movs	r2, #1
 80058ba:	765a      	strb	r2, [r3, #25]
      OCB_Cfg.pAlarm[AlarmID]->AlarmCategory   = ALARM_RELATIVE;      
 80058bc:	4b22      	ldr	r3, [pc, #136]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	769a      	strb	r2, [r3, #26]
      OCB_Cfg.pAlarm[AlarmID]->InitCycles      = cycle;
 80058cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	605a      	str	r2, [r3, #4]
      OCB_Cfg.pAlarm[AlarmID]->InitTicks       = increment;
 80058dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	601a      	str	r2, [r3, #0]
      OCB_Cfg.pAlarm[AlarmID]->Status          = ALARM_BUSY;
 80058ec:	4b16      	ldr	r3, [pc, #88]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2201      	movs	r2, #1
 80058fa:	761a      	strb	r2, [r3, #24]
      OCB_Cfg.pAlarm[AlarmID]->AlarmCheckPoint = increment + cycle + (uint32)OCB_Cfg.OsSysTickCounter;
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	18d1      	adds	r1, r2, r3
 8005902:	4b11      	ldr	r3, [pc, #68]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005904:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005908:	4610      	mov	r0, r2
 800590a:	4b0f      	ldr	r3, [pc, #60]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	180a      	adds	r2, r1, r0
 8005918:	61da      	str	r2, [r3, #28]
      return(E_OK);
 800591a:	2300      	movs	r3, #0
 800591c:	e00d      	b.n	800593a <OS_SetRelAlarm+0x14e>
    }
    else if(OCB_Cfg.pAlarm[AlarmID]->Status == ALARM_BUSY)
 800591e:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <OS_SetRelAlarm+0x15c>)
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	7e1b      	ldrb	r3, [r3, #24]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <OS_SetRelAlarm+0x148>
    {
      return(E_OS_STATE);
 8005930:	2307      	movs	r3, #7
 8005932:	e002      	b.n	800593a <OS_SetRelAlarm+0x14e>
    }
    else
    {
      return(E_OS_VALUE);
 8005934:	2308      	movs	r3, #8
 8005936:	e000      	b.n	800593a <OS_SetRelAlarm+0x14e>
    }
  }
  else
  {
    return(E_OS_ID);
 8005938:	2303      	movs	r3, #3
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000108 	.word	0x20000108

0800594c <PendSV_Handler>:
#endif
{

#if defined(__GNUC__) && !defined(__CC_ARM)
  extern uint32 OS_Dispatcher(uint32);
  __asm("cpsid i");              /* Lock the dispatcher                       */
 800594c:	b672      	cpsid	i
  __asm("push {r4 - r11, lr}");  /* Store the current context into the stack  */
 800594e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __asm("mov r0,r13");           /* Store the current stack pointer           */
 8005952:	4668      	mov	r0, sp
  __asm("bl.w OS_Dispatcher");   /* Call the dispatcher to switch the context */
 8005954:	f7ff fcc0 	bl	80052d8 <OS_Dispatcher>
  __asm("mov r13,r0");           /* Setup the new stack pointer               */
 8005958:	4685      	mov	sp, r0
  __asm("pop {r4 - r11, lr}");   /* Restore the saved context                 */
 800595a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __asm("cpsie i");              /* Unlock the dispatcher                     */
 800595e:	b662      	cpsie	i
  __asm("bx lr");
 8005960:	4770      	bx	lr
  cpsie i              /* Unlock the dispatcher                     */
  bx lr
#else
#error Error: Compiler inline assembly dialect is not supported
#endif
}
 8005962:	bf00      	nop

08005964 <OsGetCurrentSP>:
#error Error: Compiler inline assembly dialect is not supported
#endif
{
#if defined(__GNUC__) && !defined(__CC_ARM)
  (void) CurrentSpPtr;
  __asm("str r13,[r0]");
 8005964:	f8c0 d000 	str.w	sp, [r0]
  __asm("bx lr");
 8005968:	4770      	bx	lr
  str r13,[r0]
  bx lr
#else
#error Error: Compiler inline assembly dialect is not supported
#endif
}
 800596a:	bf00      	nop

0800596c <OsGetPSR>:
#error Error: Compiler inline assembly dialect is not supported
#endif
{
#if defined(__GNUC__) && !defined(__CC_ARM)
  (void) CurrentPsr;
  __asm ("mrs r1, psr");
 800596c:	f3ef 8103 	mrs	r1, PSR
  __asm ("str r1,[r0]");
 8005970:	6001      	str	r1, [r0, #0]
  __asm ("bx lr");
 8005972:	4770      	bx	lr
  str r1,[r0]
  bx lr
#else
#error Error: Compiler inline assembly dialect is not supported
#endif
}
 8005974:	bf00      	nop

08005976 <SysTick_Handler>:
  extern uint32 OsGetSavedStackPointer(void);
  extern uint32 OsIsrCallDispatch(uint32);
  extern void OsRunCat2Isr(void);

  #ifndef OS_NESTED_INT
  __asm("cpsid i");
 8005976:	b672      	cpsid	i
  #endif
  __asm("push {r4 - r11, lr}");          /* Save the context in the stack of the current task                */
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __asm("mov r0,r13");                   /* prepare the input parameter for the function OsStoreStackPointer */
 800597c:	4668      	mov	r0, sp
  __asm("bl.w OsStoreStackPointer");     /* Save the stack pointer of the current task                       */
 800597e:	f7ff fe87 	bl	8005690 <OsStoreStackPointer>
  __asm("bl.w OsRunCat2Isr");            /* Call the ISR (lookup table)                                      */
 8005982:	f7ff fee9 	bl	8005758 <OsRunCat2Isr>
  __asm("bl.w OsGetSavedStackPointer");  /* Restore the stack pointer of the current task                    */
 8005986:	f7ff fea3 	bl	80056d0 <OsGetSavedStackPointer>
  __asm("bl.w OsIsrCallDispatch");       /* Call dispatcher if needed                                        */
 800598a:	f7ff febd 	bl	8005708 <OsIsrCallDispatch>
  __asm("mov r13,r0");                   /* Set the new stack pointer of the active task                     */
 800598e:	4685      	mov	sp, r0
  __asm("pop {r4 - r11, lr}");           /* Restore the context from the active task                         */
 8005990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  #ifndef OS_NESTED_INT
  __asm("cpsie i");
 8005994:	b662      	cpsie	i
  #endif
  __asm("bx lr");
 8005996:	4770      	bx	lr
  #endif
  bx lr
#else
#error Error: Compiler inline assembly dialect is not supported
#endif
}
 8005998:	bf00      	nop
	...

0800599c <OS_SetEvent>:
///         OsEventMaskType Mask : Mask of the events to be set
///
/// \return OsStatusType
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_SetEvent(OsTaskType TaskID, OsEventMaskType Mask)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  if(OCB_Cfg.pTcb[TaskID]->TaskType == BASIC)
 80059a6:	4b30      	ldr	r3, [pc, #192]	@ (8005a68 <OS_SetEvent+0xcc>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <OS_SetEvent+0x22>
  {
    return(E_OS_ACCESS);
 80059ba:	2301      	movs	r3, #1
 80059bc:	e050      	b.n	8005a60 <OS_SetEvent+0xc4>
  }
  else if(TaskID >= NB_OF_TASKS)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d901      	bls.n	80059c8 <OS_SetEvent+0x2c>
  {
    return(E_OS_ID);
 80059c4:	2303      	movs	r3, #3
 80059c6:	e04b      	b.n	8005a60 <OS_SetEvent+0xc4>
  }
  else if(OCB_Cfg.pTcb[TaskID]->TaskStatus == SUSPENDED)
 80059c8:	4b27      	ldr	r3, [pc, #156]	@ (8005a68 <OS_SetEvent+0xcc>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	7e1b      	ldrb	r3, [r3, #24]
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d101      	bne.n	80059de <OS_SetEvent+0x42>
  {
    return(E_OS_STATE);
 80059da:	2307      	movs	r3, #7
 80059dc:	e040      	b.n	8005a60 <OS_SetEvent+0xc4>
  }
  else
  {
    OCB_Cfg.pTcb[TaskID]->SetEvtMask |= Mask;
 80059de:	4b22      	ldr	r3, [pc, #136]	@ (8005a68 <OS_SetEvent+0xcc>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if(OCB_Cfg.pTcb[TaskID]->TaskStatus == WAITING)
 80059f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a68 <OS_SetEvent+0xcc>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	7e1b      	ldrb	r3, [r3, #24]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d12c      	bne.n	8005a5e <OS_SetEvent+0xc2>
    {
      if((OCB_Cfg.pTcb[TaskID]->SetEvtMask & OCB_Cfg.pTcb[TaskID]->WaitEvtMask) != 0)
 8005a04:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <OS_SetEvent+0xcc>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a12:	4b15      	ldr	r3, [pc, #84]	@ (8005a68 <OS_SetEvent+0xcc>)
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01b      	beq.n	8005a5e <OS_SetEvent+0xc2>
      {
        /* Switch state to Ready */
        OCB_Cfg.pTcb[TaskID]->TaskStatus = READY;
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <OS_SetEvent+0xcc>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2201      	movs	r2, #1
 8005a34:	761a      	strb	r2, [r3, #24]

        if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <OS_SetEvent+0xcc>)
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d80d      	bhi.n	8005a5a <OS_SetEvent+0xbe>
        {
          if(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskSchedType == FULL_PREEMPT)
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <OS_SetEvent+0xcc>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <OS_SetEvent+0xcc>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d104      	bne.n	8005a5e <OS_SetEvent+0xc2>
          {
            /* Call the scheduler */
            (void)OS_Schedule();
 8005a54:	f7ff fb60 	bl	8005118 <OS_Schedule>
 8005a58:	e001      	b.n	8005a5e <OS_SetEvent+0xc2>
        }
        else
        {
          /* No active task, system in Idle state (OS_IdleLoop) */
          /* Call the scheduler */
          (void)OS_Schedule();
 8005a5a:	f7ff fb5d 	bl	8005118 <OS_Schedule>
        }
      }
    }

    return(E_OK);
 8005a5e:	2300      	movs	r3, #0
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000108 	.word	0x20000108

08005a6c <OS_ClearEvent>:
/// \param  OsEventMaskType Mask : Mask of the events to be clear
///
/// \return OsStatusType
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_ClearEvent(OsEventMaskType Mask)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskType == BASIC)
 8005a74:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <OS_ClearEvent+0x54>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <OS_ClearEvent+0x54>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <OS_ClearEvent+0x22>
  {
    return(E_OS_ACCESS);
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e013      	b.n	8005ab6 <OS_ClearEvent+0x4a>
  }
  else if(TRUE == OsIsInterruptContext())
 8005a8e:	f7ff fe8b 	bl	80057a8 <OsIsInterruptContext>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <OS_ClearEvent+0x30>
  {
    return(E_OS_CALLEVEL);
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e00c      	b.n	8005ab6 <OS_ClearEvent+0x4a>
  }
  else
  {
    OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->SetEvtMask &=(OsEventMaskType)(~Mask);
 8005a9c:	4b08      	ldr	r3, [pc, #32]	@ (8005ac0 <OS_ClearEvent+0x54>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b07      	ldr	r3, [pc, #28]	@ (8005ac0 <OS_ClearEvent+0x54>)
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	43d2      	mvns	r2, r2
 8005ab0:	400a      	ands	r2, r1
 8005ab2:	625a      	str	r2, [r3, #36]	@ 0x24

    return(E_OK);
 8005ab4:	2300      	movs	r3, #0
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000108 	.word	0x20000108

08005ac4 <OS_GetEvent>:
///         OsEventMaskRefType Event (out): Reference to the memory of the return data
///
/// \return OsStatusType
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_GetEvent(OsTaskType TaskID, OsEventMaskRefType Event)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  if(OCB_Cfg.pTcb[TaskID]->TaskType == BASIC)
 8005ace:	4b16      	ldr	r3, [pc, #88]	@ (8005b28 <OS_GetEvent+0x64>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <OS_GetEvent+0x22>
  {
    return(E_OS_ACCESS);
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e019      	b.n	8005b1a <OS_GetEvent+0x56>
  }
  else if(TaskID >= NB_OF_TASKS)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d901      	bls.n	8005af0 <OS_GetEvent+0x2c>
  {
    return(E_OS_ID);
 8005aec:	2303      	movs	r3, #3
 8005aee:	e014      	b.n	8005b1a <OS_GetEvent+0x56>
  }
  else if(OCB_Cfg.pTcb[TaskID]->TaskStatus == SUSPENDED)
 8005af0:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <OS_GetEvent+0x64>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	7e1b      	ldrb	r3, [r3, #24]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d101      	bne.n	8005b06 <OS_GetEvent+0x42>
  {
    return(E_OS_STATE);
 8005b02:	2307      	movs	r3, #7
 8005b04:	e009      	b.n	8005b1a <OS_GetEvent+0x56>
  }
  else
  {
    *Event = OCB_Cfg.pTcb[TaskID]->SetEvtMask;
 8005b06:	4b08      	ldr	r3, [pc, #32]	@ (8005b28 <OS_GetEvent+0x64>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	601a      	str	r2, [r3, #0]
    return(E_OK);
 8005b18:	2300      	movs	r3, #0
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000108 	.word	0x20000108

08005b2c <OS_WaitEvent>:
/// \param  OsEventMaskType Mask : Mask of the events waited for
///
/// \return OsStatusType
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_WaitEvent(OsEventMaskType Mask)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  if(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->CeilingPrio != 0 || OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio != OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->FixedPrio)
 8005b34:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d111      	bne.n	8005b6c <OS_WaitEvent+0x40>
 8005b48:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b28      	ldr	r3, [pc, #160]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	4b24      	ldr	r3, [pc, #144]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <OS_WaitEvent+0x44>
  {
  #if(ERRORHOOK)
    ErrorHook(E_OS_RESOURCE);
  #endif
    return(E_OS_RESOURCE);
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	e03b      	b.n	8005be8 <OS_WaitEvent+0xbc>
  }
  else if(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskType == BASIC)
 8005b70:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <OS_WaitEvent+0x5e>
  {
  #if(ERRORHOOK)
    ErrorHook(E_OS_ACCESS);
  #endif
    return(E_OS_ACCESS);
 8005b86:	2301      	movs	r3, #1
 8005b88:	e02e      	b.n	8005be8 <OS_WaitEvent+0xbc>
  }
  else if(TRUE == OsIsInterruptContext())
 8005b8a:	f7ff fe0d 	bl	80057a8 <OsIsInterruptContext>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <OS_WaitEvent+0x6c>
  {
  #if(ERRORHOOK)
    ErrorHook(E_OS_CALLEVEL);
  #endif
    return(E_OS_CALLEVEL);
 8005b94:	2302      	movs	r3, #2
 8005b96:	e027      	b.n	8005be8 <OS_WaitEvent+0xbc>
  }
  else
  {
    /* Store the new event mask*/
    OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->WaitEvtMask = Mask;
 8005b98:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4b14      	ldr	r3, [pc, #80]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Check if the event waiting for is already set */
    if((OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->SetEvtMask & OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->WaitEvtMask) == 0)
 8005baa:	4b11      	ldr	r3, [pc, #68]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005bbc:	6819      	ldr	r1, [r3, #0]
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <OS_WaitEvent+0xba>
    {
      /* event not present -> set current task to waiting */
      OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus = WAITING;
 8005bd0:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <OS_WaitEvent+0xc4>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2202      	movs	r2, #2
 8005be0:	761a      	strb	r2, [r3, #24]

      /* Call the scheduler */
      (void)OS_Schedule();
 8005be2:	f7ff fa99 	bl	8005118 <OS_Schedule>
    }

    return(E_OK);
 8005be6:	2300      	movs	r3, #0
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000108 	.word	0x20000108

08005bf4 <OS_ActivateTask>:
/// \param  OsTaskType TaskID : Task reference
///
/// \return OsStatusType
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_ActivateTask(OsTaskType TaskID)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  if(TaskID < NB_OF_TASKS)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d83a      	bhi.n	8005c78 <OS_ActivateTask+0x84>
  {
    if(OCB_Cfg.pTcb[TaskID]->TaskStatus == SUSPENDED && OCB_Cfg.pTcb[TaskID]->NbOfActiv > 0)
 8005c02:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <OS_ActivateTask+0x90>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	7e1b      	ldrb	r3, [r3, #24]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d12f      	bne.n	8005c74 <OS_ActivateTask+0x80>
 8005c14:	4b1b      	ldr	r3, [pc, #108]	@ (8005c84 <OS_ActivateTask+0x90>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d026      	beq.n	8005c74 <OS_ActivateTask+0x80>
    {
      OCB_Cfg.pTcb[TaskID]->TaskStatus = PRE_READY;
 8005c26:	4b17      	ldr	r3, [pc, #92]	@ (8005c84 <OS_ActivateTask+0x90>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	761a      	strb	r2, [r3, #24]

      OCB_Cfg.pTcb[TaskID]->NbOfActiv--;
 8005c36:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <OS_ActivateTask+0x90>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c44:	3a01      	subs	r2, #1
 8005c46:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(OCB_Cfg.CurrentTaskIdx < NB_OF_TASKS)
 8005c48:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <OS_ActivateTask+0x90>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d80d      	bhi.n	8005c6c <OS_ActivateTask+0x78>
      {
        if(OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskSchedType == FULL_PREEMPT)
 8005c50:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <OS_ActivateTask+0x90>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <OS_ActivateTask+0x90>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d104      	bne.n	8005c70 <OS_ActivateTask+0x7c>
        {
          /* Call the scheduler */
          (void)OS_Schedule();
 8005c66:	f7ff fa57 	bl	8005118 <OS_Schedule>
 8005c6a:	e001      	b.n	8005c70 <OS_ActivateTask+0x7c>
      }
      else
      {
        /* No active task, CPU will execute the function OS_IdleLoop */
        /* Call the scheduler to switch the context to OS_IdleLoop   */
        (void)OS_Schedule();
 8005c6c:	f7ff fa54 	bl	8005118 <OS_Schedule>
      }

      return(E_OK);
 8005c70:	2300      	movs	r3, #0
 8005c72:	e002      	b.n	8005c7a <OS_ActivateTask+0x86>
    }
    else
    {
      return(E_OS_LIMIT);
 8005c74:	2304      	movs	r3, #4
 8005c76:	e000      	b.n	8005c7a <OS_ActivateTask+0x86>
    }
  }
  else
  {
    return(E_OS_ID);
 8005c78:	2303      	movs	r3, #3
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000108 	.word	0x20000108

08005c88 <OS_TerminateTask>:
/// \param  void
///
/// \return OsStatusType
//------------------------------------------------------------------------------------------------------------------
OsStatusType OS_TerminateTask(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  if(  OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->CeilingPrio != 0 &&
 8005c8c:	4b19      	ldr	r3, [pc, #100]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b18      	ldr	r3, [pc, #96]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d013      	beq.n	8005cc8 <OS_TerminateTask+0x40>
      OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->Prio != OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->FixedPrio)
 8005ca0:	4b14      	ldr	r3, [pc, #80]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005cb2:	6819      	ldr	r1, [r3, #0]
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
  if(  OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->CeilingPrio != 0 &&
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <OS_TerminateTask+0x40>
  {
    return(E_OS_RESOURCE);
 8005cc4:	2306      	movs	r3, #6
 8005cc6:	e012      	b.n	8005cee <OS_TerminateTask+0x66>
  }
  else if(TRUE == OsIsInterruptContext())
 8005cc8:	f7ff fd6e 	bl	80057a8 <OsIsInterruptContext>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <OS_TerminateTask+0x4e>
  {
    return(E_OS_CALLEVEL);
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e00b      	b.n	8005cee <OS_TerminateTask+0x66>
  }
  else
  {
    /* Set the new task state */
    OCB_Cfg.pTcb[OCB_Cfg.CurrentTaskIdx]->TaskStatus = SUSPENDED;
 8005cd6:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <OS_TerminateTask+0x6c>)
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	761a      	strb	r2, [r3, #24]

    /* Call the scheduler */
    (void)OS_Schedule();
 8005ce8:	f7ff fa16 	bl	8005118 <OS_Schedule>

    return(E_OK);
 8005cec:	2300      	movs	r3, #0
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000108 	.word	0x20000108

08005cf8 <SysTickTimer_Init>:

stStkCtrl* StkCtrl = (stStkCtrl*)STK_CTRL_PTR;


void SysTickTimer_Init(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d30 <SysTickTimer_Init+0x38>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
	STK_LOAD = SYS_TICK_1MS;
 8005d02:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <SysTickTimer_Init+0x3c>)
 8005d04:	4a0c      	ldr	r2, [pc, #48]	@ (8005d38 <SysTickTimer_Init+0x40>)
 8005d06:	601a      	str	r2, [r3, #0]
	STK_VAL  = 0;
 8005d08:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <SysTickTimer_Init+0x44>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
	StkCtrl->ClockSrc = SYS_TICK_CLKSRC_AHB;
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <SysTickTimer_Init+0x48>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	7813      	ldrb	r3, [r2, #0]
 8005d14:	f043 0304 	orr.w	r3, r3, #4
 8005d18:	7013      	strb	r3, [r2, #0]
	StkCtrl->TickInt = SYS_TICK_ENABLE_INT;	
 8005d1a:	4b09      	ldr	r3, [pc, #36]	@ (8005d40 <SysTickTimer_Init+0x48>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	7813      	ldrb	r3, [r2, #0]
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	7013      	strb	r3, [r2, #0]
}
 8005d26:	bf00      	nop
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	e000e010 	.word	0xe000e010
 8005d34:	e000e014 	.word	0xe000e014
 8005d38:	0002980f 	.word	0x0002980f
 8005d3c:	e000e018 	.word	0xe000e018
 8005d40:	2000000c 	.word	0x2000000c

08005d44 <SysTickTimer_Start>:

void SysTickTimer_Start(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
	StkCtrl->Enable = SYS_TICK_ENABLE_TIMER;
 8005d48:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <SysTickTimer_Start+0x1c>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	7813      	ldrb	r3, [r2, #0]
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	7013      	strb	r3, [r2, #0]
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	2000000c 	.word	0x2000000c

08005d64 <prv_out_fn_print>:
 * \param[in]       ptr: LwPRINTF internal instance
 * \param[in]       chr: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* lwi, const char chr) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
    if (lwi->is_print_cancelled) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	7e1b      	ldrb	r3, [r3, #24]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <prv_out_fn_print+0x18>
        return 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e01a      	b.n	8005db2 <prv_out_fn_print+0x4e>
    }

    /* Send character to output */
    if (!lwi->lwobj->out_fn(chr, lwi->lwobj)) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	78f8      	ldrb	r0, [r7, #3]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <prv_out_fn_print+0x34>
        lwi->is_print_cancelled = 1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	761a      	strb	r2, [r3, #24]
    }
    if (chr != '\0' && !lwi->is_print_cancelled) {
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <prv_out_fn_print+0x4c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	7e1b      	ldrb	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <prv_out_fn_print+0x4c>
        ++lwi->n_len;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	611a      	str	r2, [r3, #16]
    }
    return 1;
 8005db0:	2301      	movs	r3, #1
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
    int num = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]

    for (; CHARISNUM(**format); ++(*format)) {
 8005dc6:	e010      	b.n	8005dea <prv_parse_num+0x30>
        num = (int)10 * num + CHARTONUM(**format);
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	3b30      	subs	r3, #48	@ 0x30
 8005ddc:	4413      	add	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
    for (; CHARISNUM(**format); ++(*format)) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005df2:	d904      	bls.n	8005dfe <prv_parse_num+0x44>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b39      	cmp	r3, #57	@ 0x39
 8005dfc:	d9e4      	bls.n	8005dc8 <prv_parse_num+0xe>
    }
    return num;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <prv_out_str_before>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* lwi, size_t buff_size) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (lwi->m.width > 0
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dd12      	ble.n	8005e44 <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (lwi->m.flags.is_negative || lwi->m.flags.plus)) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	7f5b      	ldrb	r3, [r3, #29]
 8005e22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <prv_out_str_before+0x2e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7f1b      	ldrb	r3, [r3, #28]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <prv_out_str_before+0x38>
        --lwi->m.width;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	1e5a      	subs	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Check for alternate mode */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7f1b      	ldrb	r3, [r3, #28]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d02c      	beq.n	8005eac <prv_out_str_before+0xa0>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7f9b      	ldrb	r3, [r3, #30]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d125      	bne.n	8005eac <prv_out_str_before+0xa0>
        if (lwi->m.base == 8) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d109      	bne.n	8005e7e <prv_out_str_before+0x72>
            if (lwi->m.width > 0) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dd1c      	ble.n	8005eac <prv_out_str_before+0xa0>
                --lwi->m.width;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e7c:	e016      	b.n	8005eac <prv_out_str_before+0xa0>
            }
        } else if (lwi->m.base == 16 || lwi->m.base == 2) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d004      	beq.n	8005e92 <prv_out_str_before+0x86>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d10c      	bne.n	8005eac <prv_out_str_before+0xa0>
            if (lwi->m.width >= 2) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	dd05      	ble.n	8005ea6 <prv_out_str_before+0x9a>
                lwi->m.width -= 2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	1e9a      	subs	r2, r3, #2
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ea4:	e002      	b.n	8005eac <prv_out_str_before+0xa0>
            } else {
                lwi->m.width = 0;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	625a      	str	r2, [r3, #36]	@ 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (lwi->m.flags.zero) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	7f1b      	ldrb	r3, [r3, #28]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d025      	beq.n	8005f06 <prv_out_str_before+0xfa>
        if (lwi->m.flags.is_negative) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7f5b      	ldrb	r3, [r3, #29]
 8005ebe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <prv_out_str_before+0xc8>
            lwi->out_fn(lwi, '-');
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	212d      	movs	r1, #45	@ 0x2d
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
 8005ed2:	e018      	b.n	8005f06 <prv_out_str_before+0xfa>
        } else if (lwi->m.flags.plus) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	7f1b      	ldrb	r3, [r3, #28]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <prv_out_str_before+0xe2>
            lwi->out_fn(lwi, '+');
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	212b      	movs	r1, #43	@ 0x2b
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
 8005eec:	e00b      	b.n	8005f06 <prv_out_str_before+0xfa>
        } else if (lwi->m.flags.space) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7f1b      	ldrb	r3, [r3, #28]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <prv_out_str_before+0xfa>
            lwi->out_fn(lwi, ' ');
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	2120      	movs	r1, #32
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (lwi->m.flags.alt && !lwi->m.flags.is_num_zero) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7f1b      	ldrb	r3, [r3, #28]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d044      	beq.n	8005f9e <prv_out_str_before+0x192>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7f9b      	ldrb	r3, [r3, #30]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d13d      	bne.n	8005f9e <prv_out_str_before+0x192>
        if (lwi->m.base == 8) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d105      	bne.n	8005f38 <prv_out_str_before+0x12c>
            lwi->out_fn(lwi, '0');
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	2130      	movs	r1, #48	@ 0x30
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
 8005f36:	e032      	b.n	8005f9e <prv_out_str_before+0x192>
        } else if (lwi->m.base == 16) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d114      	bne.n	8005f6c <prv_out_str_before+0x160>
            lwi->out_fn(lwi, '0');
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2130      	movs	r1, #48	@ 0x30
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'X' : 'x');
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	7f52      	ldrb	r2, [r2, #29]
 8005f54:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d001      	beq.n	8005f62 <prv_out_str_before+0x156>
 8005f5e:	2258      	movs	r2, #88	@ 0x58
 8005f60:	e000      	b.n	8005f64 <prv_out_str_before+0x158>
 8005f62:	2278      	movs	r2, #120	@ 0x78
 8005f64:	4611      	mov	r1, r2
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
 8005f6a:	e018      	b.n	8005f9e <prv_out_str_before+0x192>
        } else if (lwi->m.base == 2) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d113      	bne.n	8005f9e <prv_out_str_before+0x192>
            lwi->out_fn(lwi, '0');
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	2130      	movs	r1, #48	@ 0x30
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
            lwi->out_fn(lwi, lwi->m.flags.uc ? 'B' : 'b');
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	7f52      	ldrb	r2, [r2, #29]
 8005f88:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	d001      	beq.n	8005f96 <prv_out_str_before+0x18a>
 8005f92:	2242      	movs	r2, #66	@ 0x42
 8005f94:	e000      	b.n	8005f98 <prv_out_str_before+0x18c>
 8005f96:	2262      	movs	r2, #98	@ 0x62
 8005f98:	4611      	mov	r1, r2
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!lwi->m.flags.left_align && lwi->m.width > 0) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7f1b      	ldrb	r3, [r3, #28]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d125      	bne.n	8005ff8 <prv_out_str_before+0x1ec>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dd21      	ble.n	8005ff8 <prv_out_str_before+0x1ec>
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e011      	b.n	8005fde <prv_out_str_before+0x1d2>
            lwi->out_fn(lwi, lwi->m.flags.zero ? '0' : ' ');
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	7f12      	ldrb	r2, [r2, #28]
 8005fc2:	f002 0208 	and.w	r2, r2, #8
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	d001      	beq.n	8005fd0 <prv_out_str_before+0x1c4>
 8005fcc:	2230      	movs	r2, #48	@ 0x30
 8005fce:	e000      	b.n	8005fd2 <prv_out_str_before+0x1c6>
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
        for (size_t idx = buff_size; !lwi->m.flags.left_align && idx < (size_t)lwi->m.width; ++idx) {
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	7f1b      	ldrb	r3, [r3, #28]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d105      	bne.n	8005ff8 <prv_out_str_before+0x1ec>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d3e0      	bcc.n	8005fba <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!lwi->m.flags.zero) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7f1b      	ldrb	r3, [r3, #28]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d12b      	bne.n	800605e <prv_out_str_before+0x252>
        if (lwi->m.flags.is_negative) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	7f5b      	ldrb	r3, [r3, #29]
 800600a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <prv_out_str_before+0x214>
            lwi->out_fn(lwi, '-');
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	212d      	movs	r1, #45	@ 0x2d
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
 800601e:	e01e      	b.n	800605e <prv_out_str_before+0x252>
        } else if (lwi->m.flags.plus) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	7f1b      	ldrb	r3, [r3, #28]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <prv_out_str_before+0x22e>
            lwi->out_fn(lwi, '+');
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	212b      	movs	r1, #43	@ 0x2b
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
 8006038:	e011      	b.n	800605e <prv_out_str_before+0x252>
        } else if (lwi->m.flags.space && buff_size >= (size_t)lwi->m.width) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	7f1b      	ldrb	r3, [r3, #28]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <prv_out_str_before+0x252>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	461a      	mov	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	4293      	cmp	r3, r2
 8006052:	d304      	bcc.n	800605e <prv_out_str_before+0x252>
            lwi->out_fn(lwi, ' ');
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2120      	movs	r1, #32
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
        }
    }

    return 1;
 800605e:	2301      	movs	r3, #1
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prv_out_str_after>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* lwi, size_t buff_size) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (lwi->m.flags.left_align) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	7f1b      	ldrb	r3, [r3, #28]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <prv_out_str_after+0x3a>
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e007      	b.n	8006096 <prv_out_str_after+0x2e>
            lwi->out_fn(lwi, ' ');
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	2120      	movs	r1, #32
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
        for (size_t idx = buff_size; idx < (size_t)lwi->m.width; ++idx) {
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	461a      	mov	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4293      	cmp	r3, r2
 80060a0:	d3f1      	bcc.n	8006086 <prv_out_str_after+0x1e>
        }
    }
    return 1;
 80060a2:	2301      	movs	r3, #1
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
    for (size_t idx = 0; idx < buff_size; ++idx) {
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e00b      	b.n	80060d6 <prv_out_str_raw+0x2a>
        lwi->out_fn(lwi, buff[idx]);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	440a      	add	r2, r1
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	4611      	mov	r1, r2
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	4798      	blx	r3
    for (size_t idx = 0; idx < buff_size; ++idx) {
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	3301      	adds	r3, #1
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d3ef      	bcc.n	80060be <prv_out_str_raw+0x12>
    }
    return 1;
 80060de:	2301      	movs	r3, #1
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* lwi, const char* buff, size_t buff_size) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
    prv_out_str_before(lwi, buff_size);    /* Implement pre-format */
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fe88 	bl	8005e0c <prv_out_str_before>
    prv_out_str_raw(lwi, buff, buff_size); /* Print actual string */
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff ffd3 	bl	80060ac <prv_out_str_raw>
    prv_out_str_after(lwi, buff_size);     /* Implement post-format */
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ffad 	bl	8006068 <prv_out_str_after>

    return 1;
 800610e:	2301      	movs	r3, #1
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <prv_longest_unsigned_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_unsigned_int_to_str(lwprintf_int_t* lwi, uint_maxtype_t num) {
 8006118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800611c:	b092      	sub	sp, #72	@ 0x48
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	e9c7 2300 	strd	r2, r3, [r7]
    /* Start with digits length, support binary with int, that is 32-bits maximum width */
    char num_buf[33], *num_buf_ptr = &num_buf[sizeof(num_buf)];
 8006126:	f107 0314 	add.w	r3, r7, #20
 800612a:	3321      	adds	r3, #33	@ 0x21
 800612c:	647b      	str	r3, [r7, #68]	@ 0x44
    char adder_ch = (lwi->m.flags.uc ? 'A' : 'a') - 10;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	7f5b      	ldrb	r3, [r3, #29]
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <prv_longest_unsigned_int_to_str+0x28>
 800613c:	2337      	movs	r3, #55	@ 0x37
 800613e:	e000      	b.n	8006142 <prv_longest_unsigned_int_to_str+0x2a>
 8006140:	2357      	movs	r3, #87	@ 0x57
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    size_t len = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if number is zero */
    lwi->m.flags.is_num_zero = num == 0;
 800614a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800614e:	4313      	orrs	r3, r2
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2d9      	uxtb	r1, r3
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	7f93      	ldrb	r3, [r2, #30]
 800615c:	f361 0300 	bfi	r3, r1, #0, #1
 8006160:	7793      	strb	r3, [r2, #30]

    /* Fill the buffer backward */
    *--num_buf_ptr = '\0';
 8006162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006164:	3b01      	subs	r3, #1
 8006166:	647b      	str	r3, [r7, #68]	@ 0x44
 8006168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
    do {
        int digit = num % lwi->m.base;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2200      	movs	r2, #0
 8006178:	461c      	mov	r4, r3
 800617a:	4615      	mov	r5, r2
 800617c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006180:	4622      	mov	r2, r4
 8006182:	462b      	mov	r3, r5
 8006184:	f7fa f850 	bl	8000228 <__aeabi_uldivmod>
 8006188:	4613      	mov	r3, r2
 800618a:	63bb      	str	r3, [r7, #56]	@ 0x38
        num /= lwi->m.base;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2200      	movs	r2, #0
 8006196:	4698      	mov	r8, r3
 8006198:	4691      	mov	r9, r2
 800619a:	4642      	mov	r2, r8
 800619c:	464b      	mov	r3, r9
 800619e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a2:	f7fa f841 	bl	8000228 <__aeabi_uldivmod>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	e9c7 2300 	strd	r2, r3, [r7]
        *--num_buf_ptr = (char)digit + (char)(digit >= 10 ? adder_ch : '0');
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b4:	2b09      	cmp	r3, #9
 80061b6:	dd02      	ble.n	80061be <prv_longest_unsigned_int_to_str+0xa6>
 80061b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061bc:	e000      	b.n	80061c0 <prv_longest_unsigned_int_to_str+0xa8>
 80061be:	2330      	movs	r3, #48	@ 0x30
 80061c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061c2:	3901      	subs	r1, #1
 80061c4:	6479      	str	r1, [r7, #68]	@ 0x44
 80061c6:	4413      	add	r3, r2
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061cc:	701a      	strb	r2, [r3, #0]
    } while (num > 0);
 80061ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	d1cb      	bne.n	800616e <prv_longest_unsigned_int_to_str+0x56>

    /* Calculate and generate the output */
    len = sizeof(num_buf) - (size_t)((uintptr_t)num_buf_ptr - (uintptr_t)num_buf) - 1;
 80061d6:	f107 0214 	add.w	r2, r7, #20
 80061da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	3320      	adds	r3, #32
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    prv_out_str_before(lwi, len);
 80061e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff fe11 	bl	8005e0c <prv_out_str_before>
    for (; *num_buf_ptr;) {
 80061ea:	e008      	b.n	80061fe <prv_longest_unsigned_int_to_str+0xe6>
        lwi->out_fn(lwi, *num_buf_ptr++);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	695a      	ldr	r2, [r3, #20]
 80061f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	6479      	str	r1, [r7, #68]	@ 0x44
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	4790      	blx	r2
    for (; *num_buf_ptr;) {
 80061fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f2      	bne.n	80061ec <prv_longest_unsigned_int_to_str+0xd4>
    }
    prv_out_str_after(lwi, len);
 8006206:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff ff2d 	bl	8006068 <prv_out_str_after>
    return 1;
 800620e:	2301      	movs	r3, #1
}
 8006210:	4618      	mov	r0, r3
 8006212:	3748      	adds	r7, #72	@ 0x48
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800621a <prv_longest_signed_int_to_str>:
 * \param[in,out]   lwi: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_longest_signed_int_to_str(lwprintf_int_t* lwi, int_maxtype_t num) {
 800621a:	b5b0      	push	{r4, r5, r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(lwi, num);
 8006226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622a:	2b00      	cmp	r3, #0
 800622c:	da0c      	bge.n	8006248 <prv_longest_signed_int_to_str+0x2e>
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	7f53      	ldrb	r3, [r2, #29]
 8006232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006236:	7753      	strb	r3, [r2, #29]
 8006238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623c:	2100      	movs	r1, #0
 800623e:	4254      	negs	r4, r2
 8006240:	eb61 0503 	sbc.w	r5, r1, r3
 8006244:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)num);
 8006248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff ff63 	bl	8006118 <prv_longest_unsigned_int_to_str>
 8006252:	4603      	mov	r3, r0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bdb0      	pop	{r4, r5, r7, pc}

0800625c <prv_strnlen>:
 * \param           str: String to calculate
 * \param           max_n: Max number of bytes at which length is cut
 * \return          String length in bytes
 */
size_t
prv_strnlen(const char* str, size_t max_n) {
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]

    for (; *str != '\0' && length < max_n; ++length, ++str) {}
 800626a:	e005      	b.n	8006278 <prv_strnlen+0x1c>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3301      	adds	r3, #1
 8006276:	607b      	str	r3, [r7, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <prv_strnlen+0x2c>
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d3f1      	bcc.n	800626c <prv_strnlen+0x10>
    return length;
 8006288:	68fb      	ldr	r3, [r7, #12]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <prv_format>:
 * \param[in,out]   lwi: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* lwi, va_list arg) {
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	b09d      	sub	sp, #116	@ 0x74
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80062a2:	6339      	str	r1, [r7, #48]	@ 0x30
    uint8_t detected = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    const char* fmt = lwi->fmt;
 80062aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
         || !lwprintf_sys_mutex_wait(&lwi->lwobj->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 80062b0:	f000 bc80 	b.w	8006bb4 <prv_format+0x91c>
        /* Check if we should stop processing */
        if (lwi->is_print_cancelled) {
 80062b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b6:	7e1b      	ldrb	r3, [r3, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f040 8484 	bne.w	8006bc6 <prv_format+0x92e>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 80062be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b25      	cmp	r3, #37	@ 0x25
 80062c4:	d00b      	beq.n	80062de <prv_format+0x46>
            lwi->out_fn(lwi, *fmt); /* Output character */
 80062c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80062d2:	4790      	blx	r2
            ++fmt;
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	3301      	adds	r3, #1
 80062d8:	63bb      	str	r3, [r7, #56]	@ 0x38
            continue;
 80062da:	f000 bc6b 	b.w	8006bb4 <prv_format+0x91c>
        }
        ++fmt;
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	3301      	adds	r3, #1
 80062e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        memset(&lwi->m, 0x00, sizeof(lwi->m)); /* Reset structure */
 80062e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e6:	331c      	adds	r3, #28
 80062e8:	2210      	movs	r2, #16
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fa3d 	bl	800776c <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        do {
            switch (*fmt) {
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	3b20      	subs	r3, #32
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d848      	bhi.n	8006394 <prv_format+0xfc>
 8006302:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <prv_format+0x70>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	08006365 	.word	0x08006365
 800630c:	08006395 	.word	0x08006395
 8006310:	08006395 	.word	0x08006395
 8006314:	08006389 	.word	0x08006389
 8006318:	08006395 	.word	0x08006395
 800631c:	08006395 	.word	0x08006395
 8006320:	08006395 	.word	0x08006395
 8006324:	0800637d 	.word	0x0800637d
 8006328:	08006395 	.word	0x08006395
 800632c:	08006395 	.word	0x08006395
 8006330:	08006395 	.word	0x08006395
 8006334:	08006359 	.word	0x08006359
 8006338:	08006395 	.word	0x08006395
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006395 	.word	0x08006395
 8006344:	08006395 	.word	0x08006395
 8006348:	08006371 	.word	0x08006371
                case '-': lwi->m.flags.left_align = 1; break;
 800634c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800634e:	7f13      	ldrb	r3, [r2, #28]
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	7713      	strb	r3, [r2, #28]
 8006356:	e021      	b.n	800639c <prv_format+0x104>
                case '+': lwi->m.flags.plus = 1; break;
 8006358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800635a:	7f13      	ldrb	r3, [r2, #28]
 800635c:	f043 0302 	orr.w	r3, r3, #2
 8006360:	7713      	strb	r3, [r2, #28]
 8006362:	e01b      	b.n	800639c <prv_format+0x104>
                case ' ': lwi->m.flags.space = 1; break;
 8006364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006366:	7f13      	ldrb	r3, [r2, #28]
 8006368:	f043 0304 	orr.w	r3, r3, #4
 800636c:	7713      	strb	r3, [r2, #28]
 800636e:	e015      	b.n	800639c <prv_format+0x104>
                case '0': lwi->m.flags.zero = 1; break;
 8006370:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006372:	7f13      	ldrb	r3, [r2, #28]
 8006374:	f043 0308 	orr.w	r3, r3, #8
 8006378:	7713      	strb	r3, [r2, #28]
 800637a:	e00f      	b.n	800639c <prv_format+0x104>
                case '\'': lwi->m.flags.thousands = 1; break;
 800637c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800637e:	7f13      	ldrb	r3, [r2, #28]
 8006380:	f043 0310 	orr.w	r3, r3, #16
 8006384:	7713      	strb	r3, [r2, #28]
 8006386:	e009      	b.n	800639c <prv_format+0x104>
                case '#': lwi->m.flags.alt = 1; break;
 8006388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800638a:	7f13      	ldrb	r3, [r2, #28]
 800638c:	f043 0320 	orr.w	r3, r3, #32
 8006390:	7713      	strb	r3, [r2, #28]
 8006392:	e003      	b.n	800639c <prv_format+0x104>
                default: detected = 0; break;
 8006394:	2300      	movs	r3, #0
 8006396:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800639a:	bf00      	nop
            }
            if (detected) {
 800639c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <prv_format+0x112>
                ++fmt;
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	3301      	adds	r3, #1
 80063a8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        } while (detected);
 80063aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1a2      	bne.n	80062f8 <prv_format+0x60>

        /* Check [width] */
        lwi->m.width = 0;
 80063b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063b4:	2300      	movs	r3, #0
 80063b6:	6253      	str	r3, [r2, #36]	@ 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80063be:	d90c      	bls.n	80063da <prv_format+0x142>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b39      	cmp	r3, #57	@ 0x39
 80063c6:	d808      	bhi.n	80063da <prv_format+0x142>
            /* If number is negative, it has been captured from previous step (left align) */
            lwi->m.width = prv_parse_num(&fmt); /* Number from string directly */
 80063c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fcf4 	bl	8005dba <prv_parse_num>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80063d8:	e01b      	b.n	8006412 <prv_format+0x17a>
        } else if (*fmt == '*') {               /* Or variable check */
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e0:	d117      	bne.n	8006412 <prv_format+0x17a>
            const int w = (int)va_arg(arg, int);
 80063e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e4:	1d13      	adds	r3, r2, #4
 80063e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e8:	6813      	ldr	r3, [r2, #0]
 80063ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (w < 0) {
 80063ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da09      	bge.n	8006406 <prv_format+0x16e>
                lwi->m.flags.left_align = 1; /* Negative width means left aligned */
 80063f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063f4:	7f13      	ldrb	r3, [r2, #28]
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	7713      	strb	r3, [r2, #28]
                lwi->m.width = -w;
 80063fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fe:	425a      	negs	r2, r3
 8006400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006402:	625a      	str	r2, [r3, #36]	@ 0x24
 8006404:	e002      	b.n	800640c <prv_format+0x174>
            } else {
                lwi->m.width = w;
 8006406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800640a:	6253      	str	r3, [r2, #36]	@ 0x24
            }
            ++fmt;
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	3301      	adds	r3, #1
 8006410:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* Check [.precision] */
        lwi->m.precision = 0;
 8006412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006414:	2300      	movs	r3, #0
 8006416:	6213      	str	r3, [r2, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b2e      	cmp	r3, #46	@ 0x2e
 800641e:	d129      	bne.n	8006474 <prv_format+0x1dc>
            lwi->m.flags.precision = 1;
 8006420:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006422:	7f13      	ldrb	r3, [r2, #28]
 8006424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006428:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	3301      	adds	r3, #1
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b2a      	cmp	r3, #42	@ 0x2a
 8006436:	d10d      	bne.n	8006454 <prv_format+0x1bc>
                const int pr = (int)va_arg(arg, int);
 8006438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800643a:	1d13      	adds	r3, r2, #4
 800643c:	633b      	str	r3, [r7, #48]	@ 0x30
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	64bb      	str	r3, [r7, #72]	@ 0x48
                lwi->m.precision = pr > 0 ? pr : 0;
 8006442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006444:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8006448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644a:	621a      	str	r2, [r3, #32]
                ++fmt;
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	3301      	adds	r3, #1
 8006450:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006452:	e00f      	b.n	8006474 <prv_format+0x1dc>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b2f      	cmp	r3, #47	@ 0x2f
 800645a:	d90b      	bls.n	8006474 <prv_format+0x1dc>
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b39      	cmp	r3, #57	@ 0x39
 8006462:	d807      	bhi.n	8006474 <prv_format+0x1dc>
                lwi->m.precision = prv_parse_num(&fmt);
 8006464:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fca6 	bl	8005dba <prv_parse_num>
 800646e:	4602      	mov	r2, r0
 8006470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006472:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        switch (*fmt) {
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	3b4c      	subs	r3, #76	@ 0x4c
 8006480:	2b2e      	cmp	r3, #46	@ 0x2e
 8006482:	f200 80a1 	bhi.w	80065c8 <prv_format+0x330>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <prv_format+0x1f4>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080065d1 	.word	0x080065d1
 8006490:	080065c9 	.word	0x080065c9
 8006494:	080065c9 	.word	0x080065c9
 8006498:	080065c9 	.word	0x080065c9
 800649c:	080065c9 	.word	0x080065c9
 80064a0:	080065c9 	.word	0x080065c9
 80064a4:	080065c9 	.word	0x080065c9
 80064a8:	080065c9 	.word	0x080065c9
 80064ac:	080065c9 	.word	0x080065c9
 80064b0:	080065c9 	.word	0x080065c9
 80064b4:	080065c9 	.word	0x080065c9
 80064b8:	080065c9 	.word	0x080065c9
 80064bc:	080065c9 	.word	0x080065c9
 80064c0:	080065c9 	.word	0x080065c9
 80064c4:	080065c9 	.word	0x080065c9
 80064c8:	080065c9 	.word	0x080065c9
 80064cc:	080065c9 	.word	0x080065c9
 80064d0:	080065c9 	.word	0x080065c9
 80064d4:	080065c9 	.word	0x080065c9
 80064d8:	080065c9 	.word	0x080065c9
 80064dc:	080065c9 	.word	0x080065c9
 80064e0:	080065c9 	.word	0x080065c9
 80064e4:	080065c9 	.word	0x080065c9
 80064e8:	080065c9 	.word	0x080065c9
 80064ec:	080065c9 	.word	0x080065c9
 80064f0:	080065c9 	.word	0x080065c9
 80064f4:	080065c9 	.word	0x080065c9
 80064f8:	080065c9 	.word	0x080065c9
 80064fc:	08006549 	.word	0x08006549
 8006500:	080065c9 	.word	0x080065c9
 8006504:	080065b7 	.word	0x080065b7
 8006508:	080065c9 	.word	0x080065c9
 800650c:	08006577 	.word	0x08006577
 8006510:	080065c9 	.word	0x080065c9
 8006514:	080065c9 	.word	0x080065c9
 8006518:	080065c9 	.word	0x080065c9
 800651c:	080065c9 	.word	0x080065c9
 8006520:	080065c9 	.word	0x080065c9
 8006524:	080065c9 	.word	0x080065c9
 8006528:	080065c9 	.word	0x080065c9
 800652c:	080065d1 	.word	0x080065d1
 8006530:	080065c9 	.word	0x080065c9
 8006534:	080065c9 	.word	0x080065c9
 8006538:	080065c9 	.word	0x080065c9
 800653c:	080065c9 	.word	0x080065c9
 8006540:	080065c9 	.word	0x080065c9
 8006544:	080065a5 	.word	0x080065a5
            case 'h':
                lwi->m.flags.char_short = 1;     /* Single h detected */
 8006548:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800654a:	7f4b      	ldrb	r3, [r1, #29]
 800654c:	2201      	movs	r2, #1
 800654e:	f362 0383 	bfi	r3, r2, #2, #2
 8006552:	774b      	strb	r3, [r1, #29]
                if (*++fmt == 'h') {             /* Does it follow by another h? */
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	3301      	adds	r3, #1
 8006558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b68      	cmp	r3, #104	@ 0x68
 8006560:	d138      	bne.n	80065d4 <prv_format+0x33c>
                    lwi->m.flags.char_short = 2; /* Second h detected */
 8006562:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006564:	7f4b      	ldrb	r3, [r1, #29]
 8006566:	2202      	movs	r2, #2
 8006568:	f362 0383 	bfi	r3, r2, #2, #2
 800656c:	774b      	strb	r3, [r1, #29]
                    ++fmt;
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	3301      	adds	r3, #1
 8006572:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                break;
 8006574:	e02e      	b.n	80065d4 <prv_format+0x33c>
            case 'l':
                lwi->m.flags.longlong = 1;     /* Single l detected */
 8006576:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006578:	7f4b      	ldrb	r3, [r1, #29]
 800657a:	2201      	movs	r2, #1
 800657c:	f362 0301 	bfi	r3, r2, #0, #2
 8006580:	774b      	strb	r3, [r1, #29]
                if (*++fmt == 'l') {           /* Does it follow by another l? */
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	3301      	adds	r3, #1
 8006586:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b6c      	cmp	r3, #108	@ 0x6c
 800658e:	d123      	bne.n	80065d8 <prv_format+0x340>
                    lwi->m.flags.longlong = 2; /* Second l detected */
 8006590:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006592:	7f4b      	ldrb	r3, [r1, #29]
 8006594:	2202      	movs	r2, #2
 8006596:	f362 0301 	bfi	r3, r2, #0, #2
 800659a:	774b      	strb	r3, [r1, #29]
                    ++fmt;
 800659c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659e:	3301      	adds	r3, #1
 80065a0:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                break;
 80065a2:	e019      	b.n	80065d8 <prv_format+0x340>
            case 'L': break;
            case 'z':
                lwi->m.flags.sz_t = 1; /* Size T flag */
 80065a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065a6:	7f53      	ldrb	r3, [r2, #29]
 80065a8:	f043 0310 	orr.w	r3, r3, #16
 80065ac:	7753      	strb	r3, [r2, #29]
                ++fmt;
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	3301      	adds	r3, #1
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38
                break;
 80065b4:	e011      	b.n	80065da <prv_format+0x342>
            case 'j':
                lwi->m.flags.umax_t = 1; /* uintmax_t flag */
 80065b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065b8:	7f53      	ldrb	r3, [r2, #29]
 80065ba:	f043 0320 	orr.w	r3, r3, #32
 80065be:	7753      	strb	r3, [r2, #29]
                ++fmt;
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	3301      	adds	r3, #1
 80065c4:	63bb      	str	r3, [r7, #56]	@ 0x38
                break;
 80065c6:	e008      	b.n	80065da <prv_format+0x342>
            case 't': break;
            default: detected = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80065ce:	e004      	b.n	80065da <prv_format+0x342>
            case 'L': break;
 80065d0:	bf00      	nop
 80065d2:	e002      	b.n	80065da <prv_format+0x342>
                break;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <prv_format+0x342>
                break;
 80065d8:	bf00      	nop
        }

        /* Check type */
        lwi->m.type = *fmt + (char)((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	781a      	ldrb	r2, [r3, #0]
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d905      	bls.n	80065f2 <prv_format+0x35a>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b5a      	cmp	r3, #90	@ 0x5a
 80065ec:	d801      	bhi.n	80065f2 <prv_format+0x35a>
 80065ee:	2320      	movs	r3, #32
 80065f0:	e000      	b.n	80065f4 <prv_format+0x35c>
 80065f2:	2300      	movs	r3, #0
 80065f4:	4413      	add	r3, r2
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065fa:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 80065fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b40      	cmp	r3, #64	@ 0x40
 8006604:	d908      	bls.n	8006618 <prv_format+0x380>
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b5a      	cmp	r3, #90	@ 0x5a
 800660c:	d804      	bhi.n	8006618 <prv_format+0x380>
            lwi->m.flags.uc = 1;
 800660e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006610:	7f53      	ldrb	r3, [r2, #29]
 8006612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006616:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	3b25      	subs	r3, #37	@ 0x25
 800661e:	2b53      	cmp	r3, #83	@ 0x53
 8006620:	f200 82ba 	bhi.w	8006b98 <prv_format+0x900>
 8006624:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <prv_format+0x394>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006a4b 	.word	0x08006a4b
 8006630:	08006b99 	.word	0x08006b99
 8006634:	08006b99 	.word	0x08006b99
 8006638:	08006b99 	.word	0x08006b99
 800663c:	08006b99 	.word	0x08006b99
 8006640:	08006b99 	.word	0x08006b99
 8006644:	08006b99 	.word	0x08006b99
 8006648:	08006b99 	.word	0x08006b99
 800664c:	08006b99 	.word	0x08006b99
 8006650:	08006b99 	.word	0x08006b99
 8006654:	08006b99 	.word	0x08006b99
 8006658:	08006b99 	.word	0x08006b99
 800665c:	08006b99 	.word	0x08006b99
 8006660:	08006b99 	.word	0x08006b99
 8006664:	08006b99 	.word	0x08006b99
 8006668:	08006b99 	.word	0x08006b99
 800666c:	08006b99 	.word	0x08006b99
 8006670:	08006b99 	.word	0x08006b99
 8006674:	08006b99 	.word	0x08006b99
 8006678:	08006b99 	.word	0x08006b99
 800667c:	08006b99 	.word	0x08006b99
 8006680:	08006b99 	.word	0x08006b99
 8006684:	08006b99 	.word	0x08006b99
 8006688:	08006b99 	.word	0x08006b99
 800668c:	08006b99 	.word	0x08006b99
 8006690:	08006b99 	.word	0x08006b99
 8006694:	08006b99 	.word	0x08006b99
 8006698:	08006b99 	.word	0x08006b99
 800669c:	0800677d 	.word	0x0800677d
 80066a0:	0800682d 	.word	0x0800682d
 80066a4:	08006b99 	.word	0x08006b99
 80066a8:	08006b99 	.word	0x08006b99
 80066ac:	08006b99 	.word	0x08006b99
 80066b0:	08006b99 	.word	0x08006b99
 80066b4:	08006b99 	.word	0x08006b99
 80066b8:	08006b99 	.word	0x08006b99
 80066bc:	08006b99 	.word	0x08006b99
 80066c0:	08006b99 	.word	0x08006b99
 80066c4:	08006a57 	.word	0x08006a57
 80066c8:	08006b99 	.word	0x08006b99
 80066cc:	08006b99 	.word	0x08006b99
 80066d0:	08006b99 	.word	0x08006b99
 80066d4:	08006b99 	.word	0x08006b99
 80066d8:	08006b99 	.word	0x08006b99
 80066dc:	08006b99 	.word	0x08006b99
 80066e0:	08006b99 	.word	0x08006b99
 80066e4:	08006b99 	.word	0x08006b99
 80066e8:	08006b99 	.word	0x08006b99
 80066ec:	08006b99 	.word	0x08006b99
 80066f0:	08006b99 	.word	0x08006b99
 80066f4:	08006b99 	.word	0x08006b99
 80066f8:	0800682d 	.word	0x0800682d
 80066fc:	08006b99 	.word	0x08006b99
 8006700:	08006b99 	.word	0x08006b99
 8006704:	08006b99 	.word	0x08006b99
 8006708:	08006b99 	.word	0x08006b99
 800670c:	08006b99 	.word	0x08006b99
 8006710:	08006b99 	.word	0x08006b99
 8006714:	08006b99 	.word	0x08006b99
 8006718:	08006b99 	.word	0x08006b99
 800671c:	0800677d 	.word	0x0800677d
 8006720:	0800682d 	.word	0x0800682d
 8006724:	08006795 	.word	0x08006795
 8006728:	080067ab 	.word	0x080067ab
 800672c:	08006b99 	.word	0x08006b99
 8006730:	08006b99 	.word	0x08006b99
 8006734:	08006b99 	.word	0x08006b99
 8006738:	08006b99 	.word	0x08006b99
 800673c:	080067ab 	.word	0x080067ab
 8006740:	08006b99 	.word	0x08006b99
 8006744:	08006a57 	.word	0x08006a57
 8006748:	08006b99 	.word	0x08006b99
 800674c:	08006b99 	.word	0x08006b99
 8006750:	08006a35 	.word	0x08006a35
 8006754:	0800682d 	.word	0x0800682d
 8006758:	080069f9 	.word	0x080069f9
 800675c:	08006b99 	.word	0x08006b99
 8006760:	08006b99 	.word	0x08006b99
 8006764:	080069af 	.word	0x080069af
 8006768:	08006b99 	.word	0x08006b99
 800676c:	0800682d 	.word	0x0800682d
 8006770:	08006b99 	.word	0x08006b99
 8006774:	08006b99 	.word	0x08006b99
 8006778:	0800682d 	.word	0x0800682d
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);      /* Read argument to ignore it and move to next one */
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	3307      	adds	r3, #7
 8006780:	f023 0307 	bic.w	r3, r3, #7
 8006784:	3308      	adds	r3, #8
 8006786:	633b      	str	r3, [r7, #48]	@ 0x30
                prv_out_str_raw(lwi, "NaN", 3); /* Print string */
 8006788:	2203      	movs	r2, #3
 800678a:	4999      	ldr	r1, [pc, #612]	@ (80069f0 <prv_format+0x758>)
 800678c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800678e:	f7ff fc8d 	bl	80060ac <prv_out_str_raw>
                break;
 8006792:	e20c      	b.n	8006bae <prv_format+0x916>
            case 'c': lwi->out_fn(lwi, (char)va_arg(arg, int)); break;
 8006794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006796:	695c      	ldr	r4, [r3, #20]
 8006798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800679a:	1d13      	adds	r3, r2, #4
 800679c:	633b      	str	r3, [r7, #48]	@ 0x30
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	4619      	mov	r1, r3
 80067a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80067a6:	47a0      	blx	r4
 80067a8:	e201      	b.n	8006bae <prv_format+0x916>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                lwi->m.base = 10;
 80067aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067ac:	230a      	movs	r3, #10
 80067ae:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                if (lwi->m.flags.longlong == 0) {
 80067b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b4:	7f5b      	ldrb	r3, [r3, #29]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <prv_format+0x542>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed int));
 80067c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c2:	1d13      	adds	r3, r2, #4
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c6:	6813      	ldr	r3, [r2, #0]
 80067c8:	17da      	asrs	r2, r3, #31
 80067ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067d2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80067d4:	f7ff fd21 	bl	800621a <prv_longest_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (lwi->m.flags.longlong == 2) {
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 80067d8:	e1e6      	b.n	8006ba8 <prv_format+0x910>
                } else if (lwi->m.flags.longlong == 1) {
 80067da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067dc:	7f5b      	ldrb	r3, [r3, #29]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d10c      	bne.n	8006802 <prv_format+0x56a>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long int));
 80067e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ea:	1d13      	adds	r3, r2, #4
 80067ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	17da      	asrs	r2, r3, #31
 80067f2:	623b      	str	r3, [r7, #32]
 80067f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80067f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80067fc:	f7ff fd0d 	bl	800621a <prv_longest_signed_int_to_str>
                break;
 8006800:	e1d2      	b.n	8006ba8 <prv_format+0x910>
                } else if (lwi->m.flags.longlong == 2) {
 8006802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006804:	7f5b      	ldrb	r3, [r3, #29]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	f040 81cb 	bne.w	8006ba8 <prv_format+0x910>
                    prv_longest_signed_int_to_str(lwi, (int_maxtype_t)va_arg(arg, signed long long int));
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	3307      	adds	r3, #7
 8006816:	f023 0207 	bic.w	r2, r3, #7
 800681a:	f102 0308 	add.w	r3, r2, #8
 800681e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006820:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006824:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006826:	f7ff fcf8 	bl	800621a <prv_longest_signed_int_to_str>
                break;
 800682a:	e1bd      	b.n	8006ba8 <prv_format+0x910>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b62      	cmp	r3, #98	@ 0x62
 8006832:	d003      	beq.n	800683c <prv_format+0x5a4>
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b42      	cmp	r3, #66	@ 0x42
 800683a:	d104      	bne.n	8006846 <prv_format+0x5ae>
                    lwi->m.base = 2;
 800683c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800683e:	2302      	movs	r3, #2
 8006840:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8006844:	e01d      	b.n	8006882 <prv_format+0x5ea>
                } else if (*fmt == 'o') {
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b6f      	cmp	r3, #111	@ 0x6f
 800684c:	d104      	bne.n	8006858 <prv_format+0x5c0>
                    lwi->m.base = 8;
 800684e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006850:	2308      	movs	r3, #8
 8006852:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8006856:	e014      	b.n	8006882 <prv_format+0x5ea>
                } else if (*fmt == 'u') {
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b75      	cmp	r3, #117	@ 0x75
 800685e:	d104      	bne.n	800686a <prv_format+0x5d2>
                    lwi->m.base = 10;
 8006860:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006862:	230a      	movs	r3, #10
 8006864:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8006868:	e00b      	b.n	8006882 <prv_format+0x5ea>
                } else if (*fmt == 'x' || *fmt == 'X') {
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b78      	cmp	r3, #120	@ 0x78
 8006870:	d003      	beq.n	800687a <prv_format+0x5e2>
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b58      	cmp	r3, #88	@ 0x58
 8006878:	d103      	bne.n	8006882 <prv_format+0x5ea>
                    lwi->m.base = 16;
 800687a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800687c:	2310      	movs	r3, #16
 800687e:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                }
                lwi->m.flags.space = 0; /* Space flag has no meaning here */
 8006882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006884:	7f13      	ldrb	r3, [r2, #28]
 8006886:	f023 0304 	bic.w	r3, r3, #4
 800688a:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (lwi->m.flags.sz_t) {
 800688c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688e:	7f5b      	ldrb	r3, [r3, #29]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <prv_format+0x61c>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, size_t));
 800689a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800689c:	1d13      	adds	r3, r2, #4
 800689e:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a0:	6813      	ldr	r3, [r2, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	61fa      	str	r2, [r7, #28]
 80068a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80068ae:	f7ff fc33 	bl	8006118 <prv_longest_unsigned_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (lwi->m.flags.longlong == 2) {
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 80068b2:	e17b      	b.n	8006bac <prv_format+0x914>
                } else if (lwi->m.flags.umax_t) {
 80068b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b6:	7f5b      	ldrb	r3, [r3, #29]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00c      	beq.n	80068dc <prv_format+0x644>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintmax_t));
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	3307      	adds	r3, #7
 80068c6:	f023 0207 	bic.w	r2, r3, #7
 80068ca:	f102 0308 	add.w	r3, r2, #8
 80068ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80068d0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80068d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80068d6:	f7ff fc1f 	bl	8006118 <prv_longest_unsigned_int_to_str>
                break;
 80068da:	e167      	b.n	8006bac <prv_format+0x914>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 80068dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068de:	7f5b      	ldrb	r3, [r3, #29]
 80068e0:	f003 0303 	and.w	r3, r3, #3
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <prv_format+0x65c>
 80068ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d133      	bne.n	800695c <prv_format+0x6c4>
                    uint_maxtype_t v = va_arg(arg, unsigned int);
 80068f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f6:	1d13      	adds	r3, r2, #4
 80068f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068fa:	6813      	ldr	r3, [r2, #0]
 80068fc:	2200      	movs	r2, #0
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	607a      	str	r2, [r7, #4]
 8006902:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006906:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
                    switch (lwi->m.flags.char_short) {
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	7f5b      	ldrb	r3, [r3, #29]
 800690e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d00a      	beq.n	800692e <prv_format+0x696>
 8006918:	2b02      	cmp	r3, #2
 800691a:	d111      	bne.n	8006940 <prv_format+0x6a8>
                        case 2: v = (uint_maxtype_t)((unsigned char)v); break;
 800691c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2200      	movs	r2, #0
 8006924:	469a      	mov	sl, r3
 8006926:	4693      	mov	fp, r2
 8006928:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 800692c:	e00f      	b.n	800694e <prv_format+0x6b6>
                        case 1: v = (uint_maxtype_t)((unsigned short int)v); break;
 800692e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006932:	b29b      	uxth	r3, r3
 8006934:	2200      	movs	r2, #0
 8006936:	461d      	mov	r5, r3
 8006938:	4616      	mov	r6, r2
 800693a:	e9c7 5618 	strd	r5, r6, [r7, #96]	@ 0x60
 800693e:	e006      	b.n	800694e <prv_format+0x6b6>
                        default: v = (uint_maxtype_t)((unsigned int)v); break;
 8006940:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006942:	2200      	movs	r2, #0
 8006944:	4698      	mov	r8, r3
 8006946:	4691      	mov	r9, r2
 8006948:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
 800694c:	bf00      	nop
                    prv_longest_unsigned_int_to_str(lwi, v);
 800694e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006952:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006954:	f7ff fbe0 	bl	8006118 <prv_longest_unsigned_int_to_str>
                } else if (lwi->m.flags.longlong == 0 || lwi->m.base == 2) {
 8006958:	bf00      	nop
                break;
 800695a:	e127      	b.n	8006bac <prv_format+0x914>
                } else if (lwi->m.flags.longlong == 1) {
 800695c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695e:	7f5b      	ldrb	r3, [r3, #29]
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d10c      	bne.n	8006984 <prv_format+0x6ec>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long int));
 800696a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696c:	1d13      	adds	r3, r2, #4
 800696e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006970:	6813      	ldr	r3, [r2, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	617a      	str	r2, [r7, #20]
 8006978:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800697c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800697e:	f7ff fbcb 	bl	8006118 <prv_longest_unsigned_int_to_str>
                break;
 8006982:	e113      	b.n	8006bac <prv_format+0x914>
                } else if (lwi->m.flags.longlong == 2) {
 8006984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006986:	7f5b      	ldrb	r3, [r3, #29]
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	f040 810c 	bne.w	8006bac <prv_format+0x914>
                    prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, unsigned long long int));
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	3307      	adds	r3, #7
 8006998:	f023 0207 	bic.w	r2, r3, #7
 800699c:	f102 0308 	add.w	r3, r2, #8
 80069a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a2:	e9d2 2300 	ldrd	r2, r3, [r2]
 80069a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80069a8:	f7ff fbb6 	bl	8006118 <prv_longest_unsigned_int_to_str>
                break;
 80069ac:	e0fe      	b.n	8006bac <prv_format+0x914>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 80069ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b0:	1d13      	adds	r3, r2, #4
 80069b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b4:	6813      	ldr	r3, [r2, #0]
 80069b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                if (b == NULL) {
 80069b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <prv_format+0x72a>
                    b = "(null)";
 80069be:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <prv_format+0x75c>)
 80069c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }

                /* Output string up to maximum buffer. If user provides lower buffer size, write will not write to it
                    but it will still calculate "would be" length */
                prv_out_str(lwi, b, prv_strnlen(b, lwi->m.flags.precision ? (size_t)lwi->m.precision : (SIZE_MAX)));
 80069c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c4:	7f1b      	ldrb	r3, [r3, #28]
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <prv_format+0x73e>
 80069d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	e001      	b.n	80069da <prv_format+0x742>
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295
 80069da:	4619      	mov	r1, r3
 80069dc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80069de:	f7ff fc3d 	bl	800625c <prv_strnlen>
 80069e2:	4603      	mov	r3, r0
 80069e4:	461a      	mov	r2, r3
 80069e6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80069e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80069ea:	f7ff fb7d 	bl	80060e8 <prv_out_str>
                break;
 80069ee:	e0de      	b.n	8006bae <prv_format+0x916>
 80069f0:	080078d8 	.word	0x080078d8
 80069f4:	080078dc 	.word	0x080078dc
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_STRING */
#if LWPRINTF_CFG_SUPPORT_TYPE_POINTER
            case 'p': {
                lwi->m.base = 16;      /* Go to hex format */
 80069f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069fa:	2310      	movs	r3, #16
 80069fc:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                lwi->m.flags.uc = 0;   /* Uppercase characters */
 8006a00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a02:	7f53      	ldrb	r3, [r2, #29]
 8006a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a08:	7753      	strb	r3, [r2, #29]
                lwi->m.flags.zero = 1; /* Zero padding */
 8006a0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a0c:	7f13      	ldrb	r3, [r2, #28]
 8006a0e:	f043 0308 	orr.w	r3, r3, #8
 8006a12:	7713      	strb	r3, [r2, #28]
                lwi->m.width =
 8006a14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a16:	2308      	movs	r3, #8
 8006a18:	6253      	str	r3, [r2, #36]	@ 0x24
                    sizeof(uintptr_t) * 2; /* Number is in hex format and byte is represented with 2 letters */

                prv_longest_unsigned_int_to_str(lwi, (uint_maxtype_t)va_arg(arg, uintptr_t));
 8006a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a1c:	1d13      	adds	r3, r2, #4
 8006a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a20:	6813      	ldr	r3, [r2, #0]
 8006a22:	2200      	movs	r2, #0
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	60fa      	str	r2, [r7, #12]
 8006a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006a2e:	f7ff fb73 	bl	8006118 <prv_longest_unsigned_int_to_str>
                break;
 8006a32:	e0bc      	b.n	8006bae <prv_format+0x916>
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(lwi, (double)va_arg(arg, double));
                break;
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 8006a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a36:	1d13      	adds	r3, r2, #4
 8006a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	647b      	str	r3, [r7, #68]	@ 0x44
                *ptr = (int)lwi->n_len; /* Write current length */
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a46:	601a      	str	r2, [r3, #0]

                break;
 8006a48:	e0b1      	b.n	8006bae <prv_format+0x916>
            }
            case '%': lwi->out_fn(lwi, '%'); break;
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2125      	movs	r1, #37	@ 0x25
 8006a50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006a52:	4798      	blx	r3
 8006a54:	e0ab      	b.n	8006bae <prv_format+0x916>
             * char arr[] = {0, 1, 2, 3, 255};
             * "%5K" would produce 00010203FF
             */
            case 'k':
            case 'K': {
                unsigned char* ptr =
 8006a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a58:	1d13      	adds	r3, r2, #4
 8006a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a5c:	6813      	ldr	r3, [r2, #0]
 8006a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
                    (void*)va_arg(arg, unsigned char*); /* Get input parameter as unsigned char pointer */
                int len = lwi->m.width, full_width;
 8006a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	643b      	str	r3, [r7, #64]	@ 0x40
                uint8_t is_space = lwi->m.flags.space == 1;
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a68:	7f1b      	ldrb	r3, [r3, #28]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	bf14      	ite	ne
 8006a74:	2301      	movne	r3, #1
 8006a76:	2300      	moveq	r3, #0
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

                if (ptr == NULL || len == 0) {
 8006a7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8094 	beq.w	8006bae <prv_format+0x916>
 8006a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8090 	beq.w	8006bae <prv_format+0x916>
                    break;
                }

                lwi->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 8006a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a90:	7f13      	ldrb	r3, [r2, #28]
 8006a92:	f043 0308 	orr.w	r3, r3, #8
 8006a96:	7713      	strb	r3, [r2, #28]
                lwi->m.width = 0;       /* No width parameter */
 8006a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6253      	str	r3, [r2, #36]	@ 0x24
                lwi->m.base = 16;       /* Hex format */
 8006a9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                lwi->m.flags.space = 0; /* Delete any flag for space */
 8006aa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006aa8:	7f13      	ldrb	r3, [r2, #28]
 8006aaa:	f023 0304 	bic.w	r3, r3, #4
 8006aae:	7713      	strb	r3, [r2, #28]

                /* Full width of digits to print */
                full_width = len * (2 + (int)is_space);
 8006ab0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab8:	fb02 f303 	mul.w	r3, r2, r3
 8006abc:	657b      	str	r3, [r7, #84]	@ 0x54
                if (is_space && full_width > 0) {
 8006abe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <prv_format+0x83a>
 8006ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dd02      	ble.n	8006ad2 <prv_format+0x83a>
                    --full_width; /* Remove space after last number */
 8006acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	657b      	str	r3, [r7, #84]	@ 0x54
                }

                /* Output byte by byte w/o hex prefix */
                prv_out_str_before(lwi, full_width);
 8006ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006ad8:	f7ff f998 	bl	8005e0c <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 8006adc:	2300      	movs	r3, #0
 8006ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ae0:	e050      	b.n	8006b84 <prv_format+0x8ec>
                    uint8_t d;

                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 8006ae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	695c      	ldr	r4, [r3, #20]
 8006af0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	d90a      	bls.n	8006b0e <prv_format+0x876>
 8006af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afa:	7f5b      	ldrb	r3, [r3, #29]
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <prv_format+0x872>
 8006b06:	2237      	movs	r2, #55	@ 0x37
 8006b08:	e002      	b.n	8006b10 <prv_format+0x878>
 8006b0a:	2257      	movs	r2, #87	@ 0x57
 8006b0c:	e000      	b.n	8006b10 <prv_format+0x878>
 8006b0e:	2230      	movs	r2, #48	@ 0x30
 8006b10:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006b14:	4413      	add	r3, r2
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b1c:	47a0      	blx	r4
                    d = *ptr & 0x0F; /* Print LSB */
 8006b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    lwi->out_fn(lwi, (char)(d) + (char)(d >= 10 ? ((lwi->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2c:	695c      	ldr	r4, [r3, #20]
 8006b2e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d90a      	bls.n	8006b4c <prv_format+0x8b4>
 8006b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b38:	7f5b      	ldrb	r3, [r3, #29]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <prv_format+0x8b0>
 8006b44:	2237      	movs	r2, #55	@ 0x37
 8006b46:	e002      	b.n	8006b4e <prv_format+0x8b6>
 8006b48:	2257      	movs	r2, #87	@ 0x57
 8006b4a:	e000      	b.n	8006b4e <prv_format+0x8b6>
 8006b4c:	2230      	movs	r2, #48	@ 0x30
 8006b4e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006b52:	4413      	add	r3, r2
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	4619      	mov	r1, r3
 8006b58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b5a:	47a0      	blx	r4

                    if (is_space && i < (len - 1)) {
 8006b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d009      	beq.n	8006b78 <prv_format+0x8e0>
 8006b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b66:	1e5a      	subs	r2, r3, #1
 8006b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	da04      	bge.n	8006b78 <prv_format+0x8e0>
                        lwi->out_fn(lwi, ' '); /* Generate space between numbers */
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2120      	movs	r1, #32
 8006b74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b76:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 8006b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b80:	3301      	adds	r3, #1
 8006b82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	dbaa      	blt.n	8006ae2 <prv_format+0x84a>
                    }
                }
                prv_out_str_after(lwi, full_width);
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b92:	f7ff fa69 	bl	8006068 <prv_out_str_after>
                break;
 8006b96:	e00a      	b.n	8006bae <prv_format+0x916>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default: lwi->out_fn(lwi, *fmt);
 8006b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006ba4:	4790      	blx	r2
 8006ba6:	e002      	b.n	8006bae <prv_format+0x916>
                break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <prv_format+0x916>
                break;
 8006bac:	bf00      	nop
        }
        ++fmt;
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (fmt != NULL && *fmt != '\0') {
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d006      	beq.n	8006bc8 <prv_format+0x930>
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f47f ab78 	bne.w	80062b4 <prv_format+0x1c>
 8006bc4:	e000      	b.n	8006bc8 <prv_format+0x930>
            break;
 8006bc6:	bf00      	nop
    }
    lwi->out_fn(lwi, '\0'); /* Output last zero number */
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006bd0:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(lwi)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&lwi->lwobj->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 8006bd2:	2301      	movs	r3, #1
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3774      	adds	r7, #116	@ 0x74
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	bf00      	nop

08006be0 <lwprintf_init_ex>:
 *                      as system mutex isn't needed. All formatting functions (with print being an exception)
 *                      are thread safe. Library utilizes stack-based variables
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lwobj, lwprintf_output_fn out_fn) {
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <lwprintf_init_ex+0x14>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	e000      	b.n	8006bf6 <lwprintf_init_ex+0x16>
 8006bf4:	4b04      	ldr	r3, [pc, #16]	@ (8006c08 <lwprintf_init_ex+0x28>)
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
        && (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LWOBJ(lwobj)->mutex)
            || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LWOBJ(lwobj)->mutex))) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 8006bfa:	2301      	movs	r3, #1
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	2000087c 	.word	0x2000087c

08006c0c <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lwobj, const char* format, va_list arg) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b090      	sub	sp, #64	@ 0x40
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
    lwprintf_int_t fobj = {
 8006c18:	f107 0314 	add.w	r3, r7, #20
 8006c1c:	222c      	movs	r2, #44	@ 0x2c
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fda3 	bl	800776c <memset>
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <lwprintf_vprintf_ex+0x24>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	e000      	b.n	8006c32 <lwprintf_vprintf_ex+0x26>
 8006c30:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <lwprintf_vprintf_ex+0x5c>)
    lwprintf_int_t fobj = {
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	4b0c      	ldr	r3, [pc, #48]	@ (8006c6c <lwprintf_vprintf_ex+0x60>)
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
        .fmt = format,
        .buff = NULL,
        .buff_size = 0,
    };
    /* For direct print, output function must be set by user */
    if (fobj.lwobj->out_fn == NULL) {
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <lwprintf_vprintf_ex+0x3c>
        return 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e00b      	b.n	8006c60 <lwprintf_vprintf_ex+0x54>
    }
    if (prv_format(&fobj, arg)) {
 8006c48:	f107 0314 	add.w	r3, r7, #20
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fb22 	bl	8006298 <prv_format>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <lwprintf_vprintf_ex+0x52>
        return (int)fobj.n_len;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	e000      	b.n	8006c60 <lwprintf_vprintf_ex+0x54>
    }
    return 0;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3740      	adds	r7, #64	@ 0x40
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	2000087c 	.word	0x2000087c
 8006c6c:	08005d65 	.word	0x08005d65

08006c70 <lwprintf_printf_ex>:
 * \param[in]       ...: Optional arguments for format string
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_printf_ex(lwprintf_t* const lwobj, const char* format, ...) {
 8006c70:	b40e      	push	{r1, r2, r3}
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
    va_list valist;
    int n_len;

    va_start(valist, format);
 8006c7a:	f107 0320 	add.w	r3, r7, #32
 8006c7e:	60bb      	str	r3, [r7, #8]
    n_len = lwprintf_vprintf_ex(lwobj, format, valist);
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ffc1 	bl	8006c0c <lwprintf_vprintf_ex>
 8006c8a:	60f8      	str	r0, [r7, #12]
    va_end(valist);

    return n_len;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr

08006c9c <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, lwrb_sz_t size) {
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	@ 0x24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <lwrb_init+0x1e>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <lwrb_init+0x1e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <lwrb_init+0x22>
        return 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e019      	b.n	8006cf2 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	611a      	str	r2, [r3, #16]
    buff->size = size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w_ptr, 0);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r_ptr, 0);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	601a      	str	r2, [r3, #0]
    return 1;
 8006cf0:	2301      	movs	r3, #1
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3724      	adds	r7, #36	@ 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array.
 */
lwrb_sz_t
lwrb_write(lwrb_t* buff, const void* data, lwrb_sz_t btw) {
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b088      	sub	sp, #32
 8006d02:	af02      	add	r7, sp, #8
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
    lwrb_sz_t written = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]

    if (lwrb_write_ex(buff, data, btw, &written, 0)) {
 8006d0e:	f107 0314 	add.w	r3, r7, #20
 8006d12:	2200      	movs	r2, #0
 8006d14:	9200      	str	r2, [sp, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f80a 	bl	8006d34 <lwrb_write_ex>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <lwrb_write+0x2c>
        return written;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	e000      	b.n	8006d2c <lwrb_write+0x2e>
    }
    return 0;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <lwrb_write_ex>:
 *                      \ref LWRB_FLAG_WRITE_ALL: Request to write all data (up to btw).
 *                          Will early return if no memory available
 * \return          `1` if write operation OK, `0` otherwise
 */
uint8_t
lwrb_write_ex(lwrb_t* buff, const void* data, lwrb_sz_t btw, lwrb_sz_t* bwritten, uint16_t flags) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	@ 0x30
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy = 0, free = 0, w_ptr = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint8_t* d_ptr = data;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	623b      	str	r3, [r7, #32]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <lwrb_write_ex+0x40>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <lwrb_write_ex+0x40>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <lwrb_write_ex+0x40>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <lwrb_write_ex+0x40>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <lwrb_write_ex+0x44>
        return 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e071      	b.n	8006e5c <lwrb_write_ex+0x128>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f873 	bl	8006e64 <lwrb_get_free>
 8006d7e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* If no memory, or if user wants to write ALL data but no enough space, exit early */
    if (free == 0 || (free < btw && (flags & LWRB_FLAG_WRITE_ALL))) {
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <lwrb_write_ex+0x64>
 8006d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d206      	bcs.n	8006d9c <lwrb_write_ex+0x68>
 8006d8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <lwrb_write_ex+0x68>
        return 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e05f      	b.n	8006e5c <lwrb_write_ex+0x128>
    }
    btw = BUF_MIN(free, btw);
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	4293      	cmp	r3, r2
 8006da2:	bf28      	it	cs
 8006da4:	4613      	movcs	r3, r2
 8006da6:	607b      	str	r3, [r7, #4]
    w_ptr = LWRB_LOAD(buff->w_ptr, memory_order_acquire);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	330c      	adds	r3, #12
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f3bf 8f5b 	dmb	ish
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - w_ptr, btw);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	bf28      	it	cs
 8006dca:	4613      	movcs	r3, r2
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    BUF_MEMCPY(&buff->buff[w_ptr], d_ptr, tocopy);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	4413      	add	r3, r2
 8006dd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dd8:	6a39      	ldr	r1, [r7, #32]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fd04 	bl	80077e8 <memcpy>
    d_ptr += tocopy;
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de4:	4413      	add	r3, r2
 8006de6:	623b      	str	r3, [r7, #32]
    w_ptr += tocopy;
 8006de8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dec:	4413      	add	r3, r2
 8006dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    btw -= tocopy;
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <lwrb_write_ex+0xdc>
        BUF_MEMCPY(buff->buff, d_ptr, btw);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6a39      	ldr	r1, [r7, #32]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fcee 	bl	80077e8 <memcpy>
        w_ptr = btw;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Step 3: Check end of buffer */
    if (w_ptr >= buff->size) {
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d301      	bcc.n	8006e1e <lwrb_write_ex+0xea>
        w_ptr = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w_ptr, w_ptr, memory_order_release);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	330c      	adds	r3, #12
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	f3bf 8f5b 	dmb	ish
 8006e30:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <lwrb_write_ex+0x116>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	440a      	add	r2, r1
 8006e44:	2101      	movs	r1, #1
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	4798      	blx	r3
    if (bwritten != NULL) {
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <lwrb_write_ex+0x126>
        *bwritten = tocopy + btw;
 8006e50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	441a      	add	r2, r3
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8006e5a:	2301      	movs	r3, #1
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3730      	adds	r7, #48	@ 0x30
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Ring buffer instance
 * \return          Number of free bytes in memory
 */
lwrb_sz_t
lwrb_get_free(const lwrb_t* buff) {
 8006e64:	b480      	push	{r7}
 8006e66:	b08b      	sub	sp, #44	@ 0x2c
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size = 0, w_ptr = 0, r_ptr = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e70:	2300      	movs	r3, #0
 8006e72:	623b      	str	r3, [r7, #32]
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff)) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <lwrb_get_free+0x2a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <lwrb_get_free+0x2a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <lwrb_get_free+0x2e>
        return 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e021      	b.n	8006ed6 <lwrb_get_free+0x72>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w_ptr = LWRB_LOAD(buff->w_ptr, memory_order_relaxed);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	330c      	adds	r3, #12
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	623b      	str	r3, [r7, #32]
    r_ptr = LWRB_LOAD(buff->r_ptr, memory_order_relaxed);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	61fb      	str	r3, [r7, #28]

    if (w_ptr >= r_ptr) {
 8006eb2:	6a3a      	ldr	r2, [r7, #32]
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d307      	bcc.n	8006eca <lwrb_get_free+0x66>
        size = buff->size - (w_ptr - r_ptr);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	69f9      	ldr	r1, [r7, #28]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	1acb      	subs	r3, r1, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec8:	e003      	b.n	8006ed2 <lwrb_get_free+0x6e>
    } else {
        size = r_ptr - w_ptr;
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	3b01      	subs	r3, #1
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	372c      	adds	r7, #44	@ 0x2c
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Ring buffer instance
 * \return          Number of bytes ready to be read
 */
lwrb_sz_t
lwrb_get_full(const lwrb_t* buff) {
 8006ee2:	b480      	push	{r7}
 8006ee4:	b08b      	sub	sp, #44	@ 0x2c
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size = 0, w_ptr = 0, r_ptr = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eee:	2300      	movs	r3, #0
 8006ef0:	623b      	str	r3, [r7, #32]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff)) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <lwrb_get_full+0x2a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <lwrb_get_full+0x2a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <lwrb_get_full+0x2e>
        return 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e020      	b.n	8006f52 <lwrb_get_full+0x70>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w_ptr = LWRB_LOAD(buff->w_ptr, memory_order_relaxed);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	330c      	adds	r3, #12
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	613b      	str	r3, [r7, #16]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	623b      	str	r3, [r7, #32]
    r_ptr = LWRB_LOAD(buff->r_ptr, memory_order_relaxed);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3308      	adds	r3, #8
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	61fb      	str	r3, [r7, #28]

    if (w_ptr >= r_ptr) {
 8006f30:	6a3a      	ldr	r2, [r7, #32]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d304      	bcc.n	8006f42 <lwrb_get_full+0x60>
        size = w_ptr - r_ptr;
 8006f38:	6a3a      	ldr	r2, [r7, #32]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f40:	e006      	b.n	8006f50 <lwrb_get_full+0x6e>
    } else {
        size = buff->size - (r_ptr - w_ptr);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	6a39      	ldr	r1, [r7, #32]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	1acb      	subs	r3, r1, r3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    return size;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	372c      	adds	r7, #44	@ 0x2c
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(const lwrb_t* buff) {
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
    lwrb_sz_t ptr = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]

    if (!BUF_IS_VALID(buff)) {
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <lwrb_get_linear_block_read_address+0x22>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <lwrb_get_linear_block_read_address+0x22>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <lwrb_get_linear_block_read_address+0x26>
        return NULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e00b      	b.n	8006f9c <lwrb_get_linear_block_read_address+0x3e>
    }
    ptr = LWRB_LOAD(buff->r_ptr, memory_order_relaxed);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3308      	adds	r3, #8
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	617b      	str	r3, [r7, #20]
    return &buff->buff[ptr];
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	4413      	add	r3, r2
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer size in units of bytes for read operation
 */
lwrb_sz_t
lwrb_get_linear_block_read_length(const lwrb_t* buff) {
 8006fa8:	b480      	push	{r7}
 8006faa:	b08b      	sub	sp, #44	@ 0x2c
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
    lwrb_sz_t len = 0, w_ptr = 0, r_ptr = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	623b      	str	r3, [r7, #32]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff)) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d007      	beq.n	8006fd2 <lwrb_get_linear_block_read_length+0x2a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <lwrb_get_linear_block_read_length+0x2a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <lwrb_get_linear_block_read_length+0x2e>
        return 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e025      	b.n	8007022 <lwrb_get_linear_block_read_length+0x7a>

    /*
     * Use temporary values in case they are changed during operations.
     * See lwrb_buff_free or lwrb_buff_full functions for more information why this is OK.
     */
    w_ptr = LWRB_LOAD(buff->w_ptr, memory_order_relaxed);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	623b      	str	r3, [r7, #32]
    r_ptr = LWRB_LOAD(buff->r_ptr, memory_order_relaxed);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	61fb      	str	r3, [r7, #28]

    if (w_ptr > r_ptr) {
 8006ff6:	6a3a      	ldr	r2, [r7, #32]
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d904      	bls.n	8007008 <lwrb_get_linear_block_read_length+0x60>
        len = w_ptr - r_ptr;
 8006ffe:	6a3a      	ldr	r2, [r7, #32]
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
 8007006:	e00b      	b.n	8007020 <lwrb_get_linear_block_read_length+0x78>
    } else if (r_ptr > w_ptr) {
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	429a      	cmp	r2, r3
 800700e:	d905      	bls.n	800701c <lwrb_get_linear_block_read_length+0x74>
        len = buff->size - r_ptr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	627b      	str	r3, [r7, #36]	@ 0x24
 800701a:	e001      	b.n	8007020 <lwrb_get_linear_block_read_length+0x78>
    } else {
        len = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    return len;
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007022:	4618      	mov	r0, r3
 8007024:	372c      	adds	r7, #44	@ 0x2c
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <lwrb_skip>:
 * \param[in]       buff: Ring buffer instance
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
lwrb_sz_t
lwrb_skip(lwrb_t* buff, lwrb_sz_t len) {
 800702e:	b580      	push	{r7, lr}
 8007030:	b088      	sub	sp, #32
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
    lwrb_sz_t full = 0, r_ptr = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	2300      	movs	r3, #0
 800703e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || len == 0) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <lwrb_skip+0x2e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d006      	beq.n	800705c <lwrb_skip+0x2e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <lwrb_skip+0x2e>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <lwrb_skip+0x32>
        return 0;
 800705c:	2300      	movs	r3, #0
 800705e:	e036      	b.n	80070ce <lwrb_skip+0xa0>
    }

    full = lwrb_get_full(buff);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff ff3e 	bl	8006ee2 <lwrb_get_full>
 8007066:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	4293      	cmp	r3, r2
 800706e:	bf28      	it	cs
 8007070:	4613      	movcs	r3, r2
 8007072:	603b      	str	r3, [r7, #0]
    r_ptr = LWRB_LOAD(buff->r_ptr, memory_order_acquire);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3308      	adds	r3, #8
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f3bf 8f5b 	dmb	ish
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	61fb      	str	r3, [r7, #28]
    r_ptr += len;
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	4413      	add	r3, r2
 800708e:	61fb      	str	r3, [r7, #28]
    if (r_ptr >= buff->size) {
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	429a      	cmp	r2, r3
 8007098:	d304      	bcc.n	80070a4 <lwrb_skip+0x76>
        r_ptr -= buff->size;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r_ptr, r_ptr, memory_order_release);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3308      	adds	r3, #8
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f3bf 8f5b 	dmb	ish
 80070b6:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <lwrb_skip+0x9e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	2100      	movs	r1, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	4798      	blx	r3
    return len;
 80070cc:	683b      	ldr	r3, [r7, #0]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <prv_parse_input>:
/**
 * \brief           Parse input string
 * \param[in]       lwobj: LwSHELL instance
 */
static void
prv_parse_input(lwshell_t* lwobj) {
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b089      	sub	sp, #36	@ 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

    /*
     * Check string length and compare with buffer pointer
     * Must be more than `1` character since we have to include end of line
     */
    s_len = strlen(lwobj->buff);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 f897 	bl	8000218 <strlen>
 80070ea:	60f8      	str	r0, [r7, #12]
    if (s_len != lwobj->buff_ptr || lwobj->buff_ptr == 0) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	f040 8197 	bne.w	8007428 <prv_parse_input+0x350>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8191 	beq.w	8007428 <prv_parse_input+0x350>
        return;
    }

    /* Set default values */
    lwobj->argc = 0;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    lwobj->argv[0] = lwobj->buff;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Process complete input */
    str = lwobj->buff;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	61fb      	str	r3, [r7, #28]

    /* Process complete string */
    while (*str != '\0') {
 800711e:	e072      	b.n	8007206 <prv_parse_input+0x12e>
        while (*str == ' ' && ++str) {} /* Remove leading spaces */
 8007120:	bf00      	nop
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b20      	cmp	r3, #32
 8007128:	d105      	bne.n	8007136 <prv_parse_input+0x5e>
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3301      	adds	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f5      	bne.n	8007122 <prv_parse_input+0x4a>
        if (*str == '\0') {
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d068      	beq.n	8007210 <prv_parse_input+0x138>
            break;
        }

        /* Check if it starts with quote to handle escapes */
        if (*str == '"') {
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b22      	cmp	r3, #34	@ 0x22
 8007144:	d131      	bne.n	80071aa <prv_parse_input+0xd2>
            ++str;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3301      	adds	r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument after quotes */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007152:	1c59      	adds	r1, r3, #1
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	3324      	adds	r3, #36	@ 0x24
 800715e:	69f9      	ldr	r1, [r7, #28]
 8007160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

            /* Process until end of quote */
            while (*str != '\0') {
 8007164:	e01c      	b.n	80071a0 <prv_parse_input+0xc8>
                if (*str == '\\') {
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b5c      	cmp	r3, #92	@ 0x5c
 800716c:	d10a      	bne.n	8007184 <prv_parse_input+0xac>
                    ++str;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
                    if (*str == '"') {
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b22      	cmp	r3, #34	@ 0x22
 800717a:	d111      	bne.n	80071a0 <prv_parse_input+0xc8>
                        ++str;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	3301      	adds	r3, #1
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	e00d      	b.n	80071a0 <prv_parse_input+0xc8>
                    }
                } else if (*str == '"') {
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b22      	cmp	r3, #34	@ 0x22
 800718a:	d106      	bne.n	800719a <prv_parse_input+0xc2>
                    *str = '\0';
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
                    ++str;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	3301      	adds	r3, #1
 8007196:	61fb      	str	r3, [r7, #28]
                    break;
 8007198:	e030      	b.n	80071fc <prv_parse_input+0x124>
                } else {
                    ++str;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3301      	adds	r3, #1
 800719e:	61fb      	str	r3, [r7, #28]
            while (*str != '\0') {
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1de      	bne.n	8007166 <prv_parse_input+0x8e>
 80071a8:	e028      	b.n	80071fc <prv_parse_input+0x124>
                }
            }
        } else {
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument directly on character */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071b0:	1c59      	adds	r1, r3, #1
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	3324      	adds	r3, #36	@ 0x24
 80071bc:	69f9      	ldr	r1, [r7, #28]
 80071be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            while (*str != ' ' && *str != '\0') {
 80071c2:	e009      	b.n	80071d8 <prv_parse_input+0x100>
                if (*str == '"') { /* Quote should not be here... */
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b22      	cmp	r3, #34	@ 0x22
 80071ca:	d102      	bne.n	80071d2 <prv_parse_input+0xfa>
                    *str = '\0';   /* ...add NULL termination to end token */
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
                }
                ++str;
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	3301      	adds	r3, #1
 80071d6:	61fb      	str	r3, [r7, #28]
            while (*str != ' ' && *str != '\0') {
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d003      	beq.n	80071e8 <prv_parse_input+0x110>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1ed      	bne.n	80071c4 <prv_parse_input+0xec>
            }
            if (*str == '\0') {
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d011      	beq.n	8007214 <prv_parse_input+0x13c>
                break;
            }
            *str = '\0';
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
            ++str;
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	3301      	adds	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
        }

        /* Check for number of arguments */
        if (lwobj->argc == LWSHELL_ARRAYSIZE(lwobj->argv)) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007202:	2b08      	cmp	r3, #8
 8007204:	d008      	beq.n	8007218 <prv_parse_input+0x140>
    while (*str != '\0') {
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d188      	bne.n	8007120 <prv_parse_input+0x48>
 800720e:	e004      	b.n	800721a <prv_parse_input+0x142>
            break;
 8007210:	bf00      	nop
 8007212:	e002      	b.n	800721a <prv_parse_input+0x142>
                break;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <prv_parse_input+0x142>
            break;
 8007218:	bf00      	nop
        }
    }

    /* Check for command */
    if (lwobj->argc > 0) {
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007220:	2b00      	cmp	r3, #0
 8007222:	f340 8102 	ble.w	800742a <prv_parse_input+0x352>
        const lwshell_cmd_t* ccmd = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	61bb      	str	r3, [r7, #24]
        size_t arg_len = strlen(lwobj->argv[0]);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007230:	4618      	mov	r0, r3
 8007232:	f7f8 fff1 	bl	8000218 <strlen>
 8007236:	60b8      	str	r0, [r7, #8]

#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
        /* Process all dynamic commands */
        if (ccmd == NULL && lwobj->dynamic_cmds_cnt > 0) {
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d13d      	bne.n	80072ba <prv_parse_input+0x1e2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8007244:	2b00      	cmp	r3, #0
 8007246:	d038      	beq.n	80072ba <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	e02f      	b.n	80072ae <prv_parse_input+0x1d6>
                if (arg_len == strlen(lwobj->dynamic_cmds[idx].name)
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4613      	mov	r3, r2
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	33b4      	adds	r3, #180	@ 0xb4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f7f8 ffd9 	bl	8000218 <strlen>
 8007266:	4602      	mov	r2, r0
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4293      	cmp	r3, r2
 800726c:	d11c      	bne.n	80072a8 <prv_parse_input+0x1d0>
                    && strncmp(lwobj->dynamic_cmds[idx].name, lwobj->argv[0], arg_len) == 0) {
 800726e:	6879      	ldr	r1, [r7, #4]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4613      	mov	r3, r2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	33b4      	adds	r3, #180	@ 0xb4
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4619      	mov	r1, r3
 800728a:	f000 fa77 	bl	800777c <strncmp>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <prv_parse_input+0x1d0>
                    ccmd = &lwobj->dynamic_cmds[idx];
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	33b0      	adds	r3, #176	@ 0xb0
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
                    break;
 80072a6:	e008      	b.n	80072ba <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3301      	adds	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3c9      	bcc.n	800724e <prv_parse_input+0x176>
            }
        }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */

        /* Valid command ready? */
        if (ccmd != NULL) {
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d03c      	beq.n	800733a <prv_parse_input+0x262>
            if (lwobj->argc == 2U && lwobj->argv[1][0] == '-' && lwobj->argv[1][1] == 'h'
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d12d      	bne.n	8007326 <prv_parse_input+0x24e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80072d4:	d127      	bne.n	8007326 <prv_parse_input+0x24e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072dc:	3301      	adds	r3, #1
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b68      	cmp	r3, #104	@ 0x68
 80072e2:	d120      	bne.n	8007326 <prv_parse_input+0x24e>
                && lwobj->argv[1][2] == '\0') {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072ea:	3302      	adds	r3, #2
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d119      	bne.n	8007326 <prv_parse_input+0x24e>
                /* Here we can print version */
                LWSHELL_OUTPUT(lwobj, ccmd->desc);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <prv_parse_input+0x238>
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d006      	beq.n	8007310 <prv_parse_input+0x238>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	6892      	ldr	r2, [r2, #8]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4610      	mov	r0, r2
 800730e:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, "\r\n");
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8088 	beq.w	800742a <prv_parse_input+0x352>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	4843      	ldr	r0, [pc, #268]	@ (8007430 <prv_parse_input+0x358>)
 8007322:	4798      	blx	r3
 8007324:	e081      	b.n	800742a <prv_parse_input+0x352>
            } else {
                ccmd->fn(lwobj->argc, lwobj->argv);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	3290      	adds	r2, #144	@ 0x90
 8007334:	4611      	mov	r1, r2
 8007336:	4798      	blx	r3
 8007338:	e077      	b.n	800742a <prv_parse_input+0x352>
            }
#if LWSHELL_CFG_USE_LIST_CMD
        } else if (strncmp(lwobj->argv[0], "listcmd", 7U) == 0) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007340:	2207      	movs	r2, #7
 8007342:	493c      	ldr	r1, [pc, #240]	@ (8007434 <prv_parse_input+0x35c>)
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fa19 	bl	800777c <strncmp>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d161      	bne.n	8007414 <prv_parse_input+0x33c>
            LWSHELL_OUTPUT(lwobj, "List of registered commands\r\n");
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <prv_parse_input+0x28a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	4836      	ldr	r0, [pc, #216]	@ (8007438 <prv_parse_input+0x360>)
 8007360:	4798      	blx	r3
#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	e04e      	b.n	8007406 <prv_parse_input+0x32e>
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].name);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d018      	beq.n	80073a2 <prv_parse_input+0x2ca>
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4613      	mov	r3, r2
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	33b4      	adds	r3, #180	@ 0xb4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <prv_parse_input+0x2ca>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681c      	ldr	r4, [r3, #0]
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4613      	mov	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	33b4      	adds	r3, #180	@ 0xb4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4618      	mov	r0, r3
 80073a0:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\t\t\t");
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <prv_parse_input+0x2dc>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4822      	ldr	r0, [pc, #136]	@ (800743c <prv_parse_input+0x364>)
 80073b2:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].desc);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d018      	beq.n	80073ee <prv_parse_input+0x316>
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4613      	mov	r3, r2
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	33b8      	adds	r3, #184	@ 0xb8
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00d      	beq.n	80073ee <prv_parse_input+0x316>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681c      	ldr	r4, [r3, #0]
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4613      	mov	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	33b8      	adds	r3, #184	@ 0xb8
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\r\n");
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <prv_parse_input+0x328>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	480c      	ldr	r0, [pc, #48]	@ (8007430 <prv_parse_input+0x358>)
 80073fe:	4798      	blx	r3
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	3301      	adds	r3, #1
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	429a      	cmp	r2, r3
 8007410:	d3aa      	bcc.n	8007368 <prv_parse_input+0x290>
 8007412:	e00a      	b.n	800742a <prv_parse_input+0x352>
                LWSHELL_OUTPUT(lwobj, "\r\n");
            }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */
#endif /* LWSHELL_CFG_USE_LIST_CMD */
        } else {
            LWSHELL_OUTPUT(lwobj, LWSHELL_CFG_USE_LIST_CMD
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <prv_parse_input+0x352>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	4807      	ldr	r0, [pc, #28]	@ (8007440 <prv_parse_input+0x368>)
 8007424:	4798      	blx	r3
 8007426:	e000      	b.n	800742a <prv_parse_input+0x352>
        return;
 8007428:	bf00      	nop
                                      ? "Unknown command, use listcmd to list available commands\r\n"
                                      : "Unknown command\r\n");
        }
    }
}
 800742a:	3724      	adds	r7, #36	@ 0x24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd90      	pop	{r4, r7, pc}
 8007430:	080078e4 	.word	0x080078e4
 8007434:	080078e8 	.word	0x080078e8
 8007438:	080078f0 	.word	0x080078f0
 800743c:	08007910 	.word	0x08007910
 8007440:	08007914 	.word	0x08007914

08007444 <lwshell_init_ex>:
 * \brief           Initialize shell interface
 * \param[in]       lwobj: LwSHELL object instance. Set to `NULL` to use default one
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_init_ex(lwshell_t* lwobj) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <lwshell_init_ex+0x12>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	e000      	b.n	8007458 <lwshell_init_ex+0x14>
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <lwshell_init_ex+0x2c>)
 8007458:	607b      	str	r3, [r7, #4]
    LWSHELL_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 800745a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800745e:	2100      	movs	r1, #0
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f983 	bl	800776c <memset>
    return lwshellOK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000884 	.word	0x20000884

08007474 <lwshell_set_output_fn_ex>:
 * \param[in]       out_fn: Output function to print library data.
 *                      Set to `NULL` to disable the feature
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn) {
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <lwshell_set_output_fn_ex+0x14>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	e000      	b.n	800748a <lwshell_set_output_fn_ex+0x16>
 8007488:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <lwshell_set_output_fn_ex+0x2c>)
 800748a:	607b      	str	r3, [r7, #4]
    lwobj->out_fn = out_fn;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	601a      	str	r2, [r3, #0]
    return lwshellOK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000884 	.word	0x20000884

080074a4 <lwshell_register_cmd_ex>:
 * \param[in]       desc: Custom command description
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 * \note            Available only when \ref LWSHELL_CFG_USE_DYNAMIC_COMMANDS is enabled
 */
lwshellr_t
lwshell_register_cmd_ex(lwshell_t* lwobj, const char* cmd_name, lwshell_cmd_fn cmd_fn, const char* desc) {
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <lwshell_register_cmd_ex+0x18>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	e000      	b.n	80074be <lwshell_register_cmd_ex+0x1a>
 80074bc:	4b23      	ldr	r3, [pc, #140]	@ (800754c <lwshell_register_cmd_ex+0xa8>)
 80074be:	60fb      	str	r3, [r7, #12]

    if (cmd_name == NULL || cmd_fn == NULL || strlen(cmd_name) == 0) {
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d006      	beq.n	80074d4 <lwshell_register_cmd_ex+0x30>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <lwshell_register_cmd_ex+0x30>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <lwshell_register_cmd_ex+0x34>
        return lwshellERRPAR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e032      	b.n	800753e <lwshell_register_cmd_ex+0x9a>
    }

    /* Check for memory available */
    if (lwobj->dynamic_cmds_cnt < LWSHELL_ARRAYSIZE(lwobj->dynamic_cmds)) {
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	d82c      	bhi.n	800753c <lwshell_register_cmd_ex+0x98>
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].name = cmd_name;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 80074e8:	68f9      	ldr	r1, [r7, #12]
 80074ea:	4613      	mov	r3, r2
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	33b4      	adds	r3, #180	@ 0xb4
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].fn = cmd_fn;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8007500:	68f9      	ldr	r1, [r7, #12]
 8007502:	4613      	mov	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	33b0      	adds	r3, #176	@ 0xb0
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].desc = desc;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	4613      	mov	r3, r2
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	440b      	add	r3, r1
 8007524:	33b8      	adds	r3, #184	@ 0xb8
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	601a      	str	r2, [r3, #0]

        ++lwobj->dynamic_cmds_cnt;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        return lwshellOK;
 8007538:	2300      	movs	r3, #0
 800753a:	e000      	b.n	800753e <lwshell_register_cmd_ex+0x9a>
    }
    return lwshellERRMEM;
 800753c:	2302      	movs	r3, #2
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000884 	.word	0x20000884

08007550 <lwshell_input_ex>:
 * \param[in]       in_data: Input data to process
 * \param[in]       len: Length of data for input
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
    const char* p_data = in_data;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	61bb      	str	r3, [r7, #24]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <lwshell_input_ex+0x1a>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	e000      	b.n	800756c <lwshell_input_ex+0x1c>
 800756a:	4b50      	ldr	r3, [pc, #320]	@ (80076ac <lwshell_input_ex+0x15c>)
 800756c:	60fb      	str	r3, [r7, #12]

    if (in_data == NULL || len == 0) {
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <lwshell_input_ex+0x2a>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <lwshell_input_ex+0x2e>
        return lwshellERRPAR;
 800757a:	2301      	movs	r3, #1
 800757c:	e091      	b.n	80076a2 <lwshell_input_ex+0x152>
    }

    /* Process all bytes */
    for (size_t idx = 0; idx < len; ++idx) {
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
 8007582:	e088      	b.n	8007696 <lwshell_input_ex+0x146>
        switch (p_data[idx]) {
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b0d      	cmp	r3, #13
 800758e:	d005      	beq.n	800759c <lwshell_input_ex+0x4c>
 8007590:	2b0d      	cmp	r3, #13
 8007592:	dc3f      	bgt.n	8007614 <lwshell_input_ex+0xc4>
 8007594:	2b08      	cmp	r3, #8
 8007596:	d020      	beq.n	80075da <lwshell_input_ex+0x8a>
 8007598:	2b0a      	cmp	r3, #10
 800759a:	d13b      	bne.n	8007614 <lwshell_input_ex+0xc4>
            case LWSHELL_ASCII_CR:
            case LWSHELL_ASCII_LF: {
                //LWSHELL_OUTPUT(lwobj, p_data[idx] == LWSHELL_ASCII_CR ? "\r" : "\n");
                LWSHELL_OUTPUT(lwobj, "\r\n");
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <lwshell_input_ex+0x5e>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	4841      	ldr	r0, [pc, #260]	@ (80076b0 <lwshell_input_ex+0x160>)
 80075ac:	4798      	blx	r3
                prv_parse_input(lwobj);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fd92 	bl	80070d8 <prv_parse_input>
                LWSHELL_RESET_BUFF(lwobj);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	2281      	movs	r2, #129	@ 0x81
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f8d5 	bl	800776c <memset>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3390      	adds	r3, #144	@ 0x90
 80075c6:	2220      	movs	r2, #32
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f8ce 	bl	800776c <memset>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                break;
 80075d8:	e05a      	b.n	8007690 <lwshell_input_ex+0x140>
            }
            case LWSHELL_ASCII_BACKSPACE: {
                /* Try to delete character from buffer */
                if (lwobj->buff_ptr > 0) {
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d054      	beq.n	800768e <lwshell_input_ex+0x13e>
                    --lwobj->buff_ptr;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                    lwobj->buff[lwobj->buff_ptr] = '\0';
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	2200      	movs	r2, #0
 80075fe:	711a      	strb	r2, [r3, #4]
                    LWSHELL_OUTPUT(lwobj, "\b \b");
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d042      	beq.n	800768e <lwshell_input_ex+0x13e>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68f9      	ldr	r1, [r7, #12]
 800760e:	4829      	ldr	r0, [pc, #164]	@ (80076b4 <lwshell_input_ex+0x164>)
 8007610:	4798      	blx	r3
                }
                break;
 8007612:	e03c      	b.n	800768e <lwshell_input_ex+0x13e>
            }
            default: {
#if LWSHELL_CFG_USE_OUTPUT
                char str[2] = {p_data[idx], 0};
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	753b      	strb	r3, [r7, #20]
 800761e:	2300      	movs	r3, #0
 8007620:	757b      	strb	r3, [r7, #21]
                LWSHELL_OUTPUT(lwobj, str);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <lwshell_input_ex+0xe8>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f107 0214 	add.w	r2, r7, #20
 8007632:	68f9      	ldr	r1, [r7, #12]
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
#endif /* LWSHELL_CFG_USE_OUTPUT */
                if (p_data[idx] >= 0x20 && p_data[idx] < 0x7F) {
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b1f      	cmp	r3, #31
 8007642:	d925      	bls.n	8007690 <lwshell_input_ex+0x140>
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b7e      	cmp	r3, #126	@ 0x7e
 800764e:	d81f      	bhi.n	8007690 <lwshell_input_ex+0x140>
                    LWSHELL_ADD_CH(lwobj, p_data[idx]);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007656:	2b7f      	cmp	r3, #127	@ 0x7f
 8007658:	d81a      	bhi.n	8007690 <lwshell_input_ex+0x140>
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	441a      	add	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007666:	7811      	ldrb	r1, [r2, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	460a      	mov	r2, r1
 800766e:	711a      	strb	r2, [r3, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	2200      	movs	r2, #0
 800768a:	711a      	strb	r2, [r3, #4]
 800768c:	e000      	b.n	8007690 <lwshell_input_ex+0x140>
                break;
 800768e:	bf00      	nop
    for (size_t idx = 0; idx < len; ++idx) {
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	3301      	adds	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	429a      	cmp	r2, r3
 800769c:	f4ff af72 	bcc.w	8007584 <lwshell_input_ex+0x34>
                }
            }
        }
    }
    return lwshellOK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000884 	.word	0x20000884
 80076b0:	080078e4 	.word	0x080078e4
 80076b4:	08007950 	.word	0x08007950

080076b8 <lwshell_user_output>:
 */
#include "lwshell/lwshell.h"
#include "lwprintf/lwprintf.h"
#include "usart.h"

static void lwshell_user_output(const char* str, struct lwshell* lwobj) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  (void)lwobj;
  lwprintf("%s", str);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4903      	ldr	r1, [pc, #12]	@ (80076d4 <lwshell_user_output+0x1c>)
 80076c6:	2000      	movs	r0, #0
 80076c8:	f7ff fad2 	bl	8006c70 <lwprintf_printf_ex>
  //HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	08007954 	.word	0x08007954

080076d8 <hello_cmd>:

static int32_t hello_cmd(int32_t argc, char** argv) {
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  lwshell_user_output("Hello, LwSHELL!\r\n", NULL);
 80076e2:	2100      	movs	r1, #0
 80076e4:	4811      	ldr	r0, [pc, #68]	@ (800772c <hello_cmd+0x54>)
 80076e6:	f7ff ffe7 	bl	80076b8 <lwshell_user_output>
  for (int32_t i = 0; i < argc; i++) {
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	e013      	b.n	8007718 <hello_cmd+0x40>
    lwshell_user_output("Arg ", NULL);
 80076f0:	2100      	movs	r1, #0
 80076f2:	480f      	ldr	r0, [pc, #60]	@ (8007730 <hello_cmd+0x58>)
 80076f4:	f7ff ffe0 	bl	80076b8 <lwshell_user_output>
    lwshell_user_output(argv[i], NULL);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	4413      	add	r3, r2
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2100      	movs	r1, #0
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff ffd7 	bl	80076b8 <lwshell_user_output>
    lwshell_user_output("\r\n", NULL);
 800770a:	2100      	movs	r1, #0
 800770c:	4809      	ldr	r0, [pc, #36]	@ (8007734 <hello_cmd+0x5c>)
 800770e:	f7ff ffd3 	bl	80076b8 <lwshell_user_output>
  for (int32_t i = 0; i < argc; i++) {
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3301      	adds	r3, #1
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	dbe7      	blt.n	80076f0 <hello_cmd+0x18>
  }
  return 0;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	08007958 	.word	0x08007958
 8007730:	0800796c 	.word	0x0800796c
 8007734:	08007974 	.word	0x08007974

08007738 <lwshell_user_init>:

void lwshell_user_init(void) {
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  lwshell_init();
 800773c:	2000      	movs	r0, #0
 800773e:	f7ff fe81 	bl	8007444 <lwshell_init_ex>
  lwshell_set_output_fn(lwshell_user_output);
 8007742:	4906      	ldr	r1, [pc, #24]	@ (800775c <lwshell_user_init+0x24>)
 8007744:	2000      	movs	r0, #0
 8007746:	f7ff fe95 	bl	8007474 <lwshell_set_output_fn_ex>
  lwshell_register_cmd("hello", hello_cmd, "Print hello message with args");
 800774a:	4b05      	ldr	r3, [pc, #20]	@ (8007760 <lwshell_user_init+0x28>)
 800774c:	4a05      	ldr	r2, [pc, #20]	@ (8007764 <lwshell_user_init+0x2c>)
 800774e:	4906      	ldr	r1, [pc, #24]	@ (8007768 <lwshell_user_init+0x30>)
 8007750:	2000      	movs	r0, #0
 8007752:	f7ff fea7 	bl	80074a4 <lwshell_register_cmd_ex>
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	080076b9 	.word	0x080076b9
 8007760:	08007978 	.word	0x08007978
 8007764:	080076d9 	.word	0x080076d9
 8007768:	08007998 	.word	0x08007998

0800776c <memset>:
 800776c:	4402      	add	r2, r0
 800776e:	4603      	mov	r3, r0
 8007770:	4293      	cmp	r3, r2
 8007772:	d100      	bne.n	8007776 <memset+0xa>
 8007774:	4770      	bx	lr
 8007776:	f803 1b01 	strb.w	r1, [r3], #1
 800777a:	e7f9      	b.n	8007770 <memset+0x4>

0800777c <strncmp>:
 800777c:	b510      	push	{r4, lr}
 800777e:	b16a      	cbz	r2, 800779c <strncmp+0x20>
 8007780:	3901      	subs	r1, #1
 8007782:	1884      	adds	r4, r0, r2
 8007784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007788:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800778c:	429a      	cmp	r2, r3
 800778e:	d103      	bne.n	8007798 <strncmp+0x1c>
 8007790:	42a0      	cmp	r0, r4
 8007792:	d001      	beq.n	8007798 <strncmp+0x1c>
 8007794:	2a00      	cmp	r2, #0
 8007796:	d1f5      	bne.n	8007784 <strncmp+0x8>
 8007798:	1ad0      	subs	r0, r2, r3
 800779a:	bd10      	pop	{r4, pc}
 800779c:	4610      	mov	r0, r2
 800779e:	e7fc      	b.n	800779a <strncmp+0x1e>

080077a0 <__libc_init_array>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	4d0d      	ldr	r5, [pc, #52]	@ (80077d8 <__libc_init_array+0x38>)
 80077a4:	4c0d      	ldr	r4, [pc, #52]	@ (80077dc <__libc_init_array+0x3c>)
 80077a6:	1b64      	subs	r4, r4, r5
 80077a8:	10a4      	asrs	r4, r4, #2
 80077aa:	2600      	movs	r6, #0
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	d109      	bne.n	80077c4 <__libc_init_array+0x24>
 80077b0:	4d0b      	ldr	r5, [pc, #44]	@ (80077e0 <__libc_init_array+0x40>)
 80077b2:	4c0c      	ldr	r4, [pc, #48]	@ (80077e4 <__libc_init_array+0x44>)
 80077b4:	f000 f826 	bl	8007804 <_init>
 80077b8:	1b64      	subs	r4, r4, r5
 80077ba:	10a4      	asrs	r4, r4, #2
 80077bc:	2600      	movs	r6, #0
 80077be:	42a6      	cmp	r6, r4
 80077c0:	d105      	bne.n	80077ce <__libc_init_array+0x2e>
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c8:	4798      	blx	r3
 80077ca:	3601      	adds	r6, #1
 80077cc:	e7ee      	b.n	80077ac <__libc_init_array+0xc>
 80077ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d2:	4798      	blx	r3
 80077d4:	3601      	adds	r6, #1
 80077d6:	e7f2      	b.n	80077be <__libc_init_array+0x1e>
 80077d8:	080079e8 	.word	0x080079e8
 80077dc:	080079e8 	.word	0x080079e8
 80077e0:	080079e8 	.word	0x080079e8
 80077e4:	080079ec 	.word	0x080079ec

080077e8 <memcpy>:
 80077e8:	440a      	add	r2, r1
 80077ea:	4291      	cmp	r1, r2
 80077ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f0:	d100      	bne.n	80077f4 <memcpy+0xc>
 80077f2:	4770      	bx	lr
 80077f4:	b510      	push	{r4, lr}
 80077f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077fe:	4291      	cmp	r1, r2
 8007800:	d1f9      	bne.n	80077f6 <memcpy+0xe>
 8007802:	bd10      	pop	{r4, pc}

08007804 <_init>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr

08007810 <_fini>:
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	bf00      	nop
 8007814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007816:	bc08      	pop	{r3}
 8007818:	469e      	mov	lr, r3
 800781a:	4770      	bx	lr
